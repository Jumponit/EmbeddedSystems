
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024c  00800200  000016e6  0000177a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a87  0080044c  0080044c  000019c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bbe  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014dc  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  00005774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  00005eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018eb  00000000  00000000  0000651b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c1       	rjmp	.+880    	; 0x3c6 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c7       	rjmp	.+3816   	; 0xf4e <__vector_25>
      66:	00 00       	nop
      68:	6e c6       	rjmp	.+3292   	; 0xd46 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c7       	rjmp	.+3858   	; 0xfa4 <__vector_36>
      92:	00 00       	nop
      94:	99 c6       	rjmp	.+3378   	; 0xdc8 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	96 c7       	rjmp	.+3884   	; 0xffa <__vector_51>
      ce:	00 00       	nop
      d0:	bc c6       	rjmp	.+3448   	; 0xe4a <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bb c7       	rjmp	.+3958   	; 0x1050 <__vector_54>
      da:	00 00       	nop
      dc:	f7 c6       	rjmp	.+3566   	; 0xecc <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ee       	ldi	r30, 0xE6	; 230
      fc:	f6 e1       	ldi	r31, 0x16	; 22
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 34       	cpi	r26, 0x4C	; 76
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	ac e4       	ldi	r26, 0x4C	; 76
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3d       	cpi	r26, 0xD3	; 211
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	d5 d3       	rcall	.+1962   	; 0x8ca <main>
     120:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
     126:	2f 92       	push	r2
		push  r3
     128:	3f 92       	push	r3
		push  r4
     12a:	4f 92       	push	r4
		push  r5
     12c:	5f 92       	push	r5
		push  r6
     12e:	6f 92       	push	r6
		push  r7
     130:	7f 92       	push	r7
		push  r8
     132:	8f 92       	push	r8
		push  r9
     134:	9f 92       	push	r9
		push  r10
     136:	af 92       	push	r10
		push  r11
     138:	bf 92       	push	r11
		push  r12
     13a:	cf 92       	push	r12
		push  r13
     13c:	df 92       	push	r13
		push  r14
     13e:	ef 92       	push	r14
		push  r15
     140:	ff 92       	push	r15
		push  r16
     142:	0f 93       	push	r16
		push  r17
     144:	1f 93       	push	r17
		push  r28
     146:	cf 93       	push	r28
		push  r29
     148:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
     14a:	20 91 59 04 	lds	r18, 0x0459
		lds   r19,x_thread_mask
     14e:	30 91 8d 0c 	lds	r19, 0x0C8D

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
     152:	f8 94       	cli
		in		r14,SPL
     154:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
     156:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
     158:	78 94       	sei


		ldi		r30,lo8(stack)
     15a:	eb e5       	ldi	r30, 0x5B	; 91
		ldi		r31,hi8(stack)
     15c:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r18
     15e:	22 0f       	add	r18, r18
		lsl		r18
     160:	22 0f       	add	r18, r18
		add		r30,r18
     162:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
     164:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
     166:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
     168:	f0 82       	st	Z, r15

0000016a <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
     16a:	20 91 8c 0c 	lds	r18, 0x0C8C
		lds		r19,x_delay_status
     16e:	30 91 5a 04 	lds	r19, 0x045A
		lds		r20,x_suspend_status
     172:	40 91 7b 04 	lds	r20, 0x047B
		or		r18,r19
     176:	23 2b       	or	r18, r19
		or		r18,r20
     178:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
     17a:	30 91 59 04 	lds	r19, 0x0459
		lds		r20, x_thread_mask
     17e:	40 91 8d 0c 	lds	r20, 0x0C8D
		ldi		r22,NUM_THREADS		;max number of threads
     182:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
     184:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
     186:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
     188:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
     18a:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
     18c:	08 f4       	brcc	.+2      	; 0x190 <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
     18e:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
     190:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
     192:	42 23       	and	r20, r18
		breq	restore				;break out if READY
     194:	19 f0       	breq	.+6      	; 0x19c <restore>
		dec		r22					;decrement thread count
     196:	6a 95       	dec	r22
		brne	1b					;back to test next thread
     198:	b1 f7       	brne	.-20     	; 0x186 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <x_schedule>

0000019c <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
     19c:	30 93 59 04 	sts	0x0459, r19
		sts		x_thread_mask,r23
     1a0:	70 93 8d 0c 	sts	0x0C8D, r23

		ldi		r30,lo8(stack)
     1a4:	eb e5       	ldi	r30, 0x5B	; 91
		ldi		r31,hi8(stack)
     1a6:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r19
     1a8:	33 0f       	add	r19, r19
		lsl		r19
     1aa:	33 0f       	add	r19, r19
		add		r30,r19
     1ac:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
     1ae:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
     1b0:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
     1b2:	30 81       	ld	r19, Z
		
		cli
     1b4:	f8 94       	cli
		out		SPL,r18		;restore SP
     1b6:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
     1b8:	3e bf       	out	0x3e, r19	; 62
		sei
     1ba:	78 94       	sei


		// Restore registers
		pop		r29
     1bc:	df 91       	pop	r29
		pop		r28
     1be:	cf 91       	pop	r28
		pop		r17
     1c0:	1f 91       	pop	r17
		pop		r16
     1c2:	0f 91       	pop	r16
		pop		r15
     1c4:	ff 90       	pop	r15
		pop		r14
     1c6:	ef 90       	pop	r14
		pop		r13
     1c8:	df 90       	pop	r13
		pop		r12
     1ca:	cf 90       	pop	r12
		pop		r11
     1cc:	bf 90       	pop	r11
		pop		r10
     1ce:	af 90       	pop	r10
		pop		r9
     1d0:	9f 90       	pop	r9
		pop		r8
     1d2:	8f 90       	pop	r8
		pop		r7
     1d4:	7f 90       	pop	r7
		pop		r6
     1d6:	6f 90       	pop	r6
		pop		r5
     1d8:	5f 90       	pop	r5
		pop		r4
     1da:	4f 90       	pop	r4
		pop		r3
     1dc:	3f 90       	pop	r3
		pop		r2
     1de:	2f 90       	pop	r2

		// Return to next thread
		ret
     1e0:	08 95       	ret

000001e2 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
		ldi r31,hi8(bitmask8_table)
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
     1e6:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
     1e8:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
     1ea:	84 91       	lpm	r24, Z
		ret
     1ec:	08 95       	ret

000001ee <bitmask8_table>:
     1ee:	01 02       	muls	r16, r17
     1f0:	04 08       	sbc	r0, r4
     1f2:	10 20       	and	r1, r0
     1f4:	40 80       	ld	r4, Z

000001f6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
     1f6:	68 2f       	mov	r22, r24
		or  r22,r25
     1f8:	69 2b       	or	r22, r25
		nop
     1fa:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
     1fc:	31 f0       	breq	.+12     	; 0x20a <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
     1fe:	05 d0       	rcall	.+10     	; 0x20a <delay_usec+0x14>
		rjmp	3f      // 2 cycles
     200:	00 c0       	rjmp	.+0      	; 0x202 <delay_usec+0xc>
3:	
		nop		// 1 cycle
     202:	00 00       	nop
		sbiw	r24,1   // 2 cycles
     204:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
     206:	d9 f7       	brne	.-10     	; 0x1fe <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
     208:	00 00       	nop
1:
     20a:	08 95       	ret

0000020c <x_new>:
   long val;
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
      val = x_system_counter;
   }
   return val;
}
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	18 2f       	mov	r17, r24
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	dc 01       	movw	r26, r24
     222:	aa 0f       	add	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	aa 0f       	add	r26, r26
     228:	bb 1f       	adc	r27, r27
     22a:	9d 01       	movw	r18, r26
     22c:	25 5a       	subi	r18, 0xA5	; 165
     22e:	3b 4f       	sbci	r19, 0xFB	; 251
     230:	79 01       	movw	r14, r18
     232:	d9 01       	movw	r26, r18
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	60 83       	st	Z, r22
     23e:	9f 01       	movw	r18, r30
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	d9 01       	movw	r26, r18
     246:	7c 93       	st	X, r23
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	31 09       	sbc	r19, r1
     24c:	d9 01       	movw	r26, r18
     24e:	1c 92       	st	X, r1
     250:	75 97       	sbiw	r30, 0x15	; 21
     252:	d7 01       	movw	r26, r14
     254:	ed 93       	st	X+, r30
     256:	fc 93       	st	X, r31
     258:	49 83       	std	Y+1, r20	; 0x01
     25a:	c3 df       	rcall	.-122    	; 0x1e2 <bit2mask8>
     25c:	98 2f       	mov	r25, r24
     25e:	80 91 8c 0c 	lds	r24, 0x0C8C
     262:	49 81       	ldd	r20, Y+1	; 0x01
     264:	44 23       	and	r20, r20
     266:	29 f0       	breq	.+10     	; 0x272 <x_new+0x66>
     268:	29 2f       	mov	r18, r25
     26a:	20 95       	com	r18
     26c:	98 2f       	mov	r25, r24
     26e:	92 23       	and	r25, r18
     270:	01 c0       	rjmp	.+2      	; 0x274 <x_new+0x68>
     272:	98 2b       	or	r25, r24
     274:	90 93 8c 0c 	sts	0x0C8C, r25
     278:	80 91 59 04 	lds	r24, 0x0459
     27c:	18 13       	cpse	r17, r24
     27e:	07 c0       	rjmp	.+14     	; 0x28e <x_new+0x82>
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	6e cf       	rjmp	.-292    	; 0x16a <x_schedule>
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	08 95       	ret

0000029c <init_System_Timer>:
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	84 bd       	out	0x24, r24	; 36
     2a0:	9a ef       	ldi	r25, 0xFA	; 250
     2a2:	97 bd       	out	0x27, r25	; 39
     2a4:	80 93 6e 00 	sts	0x006E, r24
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	85 bd       	out	0x25, r24	; 37
     2ac:	08 95       	ret

000002ae <x_init>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	f8 94       	cli
     2b4:	8e ef       	ldi	r24, 0xFE	; 254
     2b6:	80 93 8c 0c 	sts	0x0C8C, r24
     2ba:	10 92 7b 04 	sts	0x047B, r1
     2be:	10 92 5a 04 	sts	0x045A, r1
     2c2:	10 92 59 04 	sts	0x0459, r1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 8d 0c 	sts	0x0C8D, r24
     2cc:	cb e5       	ldi	r28, 0x5B	; 91
     2ce:	d4 e0       	ldi	r29, 0x04	; 4
     2d0:	8b e7       	ldi	r24, 0x7B	; 123
     2d2:	95 e0       	ldi	r25, 0x05	; 5
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
     2dc:	8b e7       	ldi	r24, 0x7B	; 123
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	9d 83       	std	Y+5, r25	; 0x05
     2e2:	8c 83       	std	Y+4, r24	; 0x04
     2e4:	9f 83       	std	Y+7, r25	; 0x07
     2e6:	8e 83       	std	Y+6, r24	; 0x06
     2e8:	8b e7       	ldi	r24, 0x7B	; 123
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	99 87       	std	Y+9, r25	; 0x09
     2ee:	88 87       	std	Y+8, r24	; 0x08
     2f0:	9b 87       	std	Y+11, r25	; 0x0b
     2f2:	8a 87       	std	Y+10, r24	; 0x0a
     2f4:	8b e7       	ldi	r24, 0x7B	; 123
     2f6:	98 e0       	ldi	r25, 0x08	; 8
     2f8:	9d 87       	std	Y+13, r25	; 0x0d
     2fa:	8c 87       	std	Y+12, r24	; 0x0c
     2fc:	9f 87       	std	Y+15, r25	; 0x0f
     2fe:	8e 87       	std	Y+14, r24	; 0x0e
     300:	8b e7       	ldi	r24, 0x7B	; 123
     302:	99 e0       	ldi	r25, 0x09	; 9
     304:	99 8b       	std	Y+17, r25	; 0x11
     306:	88 8b       	std	Y+16, r24	; 0x10
     308:	9b 8b       	std	Y+19, r25	; 0x13
     30a:	8a 8b       	std	Y+18, r24	; 0x12
     30c:	8b e7       	ldi	r24, 0x7B	; 123
     30e:	9a e0       	ldi	r25, 0x0A	; 10
     310:	9d 8b       	std	Y+21, r25	; 0x15
     312:	8c 8b       	std	Y+20, r24	; 0x14
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	8b e7       	ldi	r24, 0x7B	; 123
     31a:	9b e0       	ldi	r25, 0x0B	; 11
     31c:	99 8f       	std	Y+25, r25	; 0x19
     31e:	88 8f       	std	Y+24, r24	; 0x18
     320:	9b 8f       	std	Y+27, r25	; 0x1b
     322:	8a 8f       	std	Y+26, r24	; 0x1a
     324:	8b e7       	ldi	r24, 0x7B	; 123
     326:	9c e0       	ldi	r25, 0x0C	; 12
     328:	9d 8f       	std	Y+29, r25	; 0x1d
     32a:	8c 8f       	std	Y+28, r24	; 0x1c
     32c:	9f 8f       	std	Y+31, r25	; 0x1f
     32e:	8e 8f       	std	Y+30, r24	; 0x1e
     330:	8a ea       	ldi	r24, 0xAA	; 170
     332:	80 93 7c 04 	sts	0x047C, r24
     336:	80 93 7c 05 	sts	0x057C, r24
     33a:	80 93 7c 06 	sts	0x067C, r24
     33e:	80 93 7c 07 	sts	0x077C, r24
     342:	80 93 7c 08 	sts	0x087C, r24
     346:	80 93 7c 09 	sts	0x097C, r24
     34a:	80 93 7c 0a 	sts	0x0A7C, r24
     34e:	80 93 7c 0b 	sts	0x0B7C, r24
     352:	a4 df       	rcall	.-184    	; 0x29c <init_System_Timer>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	a8 81       	ld	r26, Y
     35a:	b9 81       	ldd	r27, Y+1	; 0x01
     35c:	85 81       	ldd	r24, Z+5	; 0x05
     35e:	8c 93       	st	X, r24
     360:	a8 81       	ld	r26, Y
     362:	b9 81       	ldd	r27, Y+1	; 0x01
     364:	84 81       	ldd	r24, Z+4	; 0x04
     366:	11 97       	sbiw	r26, 0x01	; 1
     368:	8c 93       	st	X, r24
     36a:	a8 81       	ld	r26, Y
     36c:	b9 81       	ldd	r27, Y+1	; 0x01
     36e:	83 81       	ldd	r24, Z+3	; 0x03
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	8c 93       	st	X, r24
     374:	a8 81       	ld	r26, Y
     376:	b9 81       	ldd	r27, Y+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	13 97       	sbiw	r26, 0x03	; 3
     37c:	8c 93       	st	X, r24
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	21 81       	ldd	r18, Z+1	; 0x01
     384:	fc 01       	movw	r30, r24
     386:	34 97       	sbiw	r30, 0x04	; 4
     388:	20 83       	st	Z, r18
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	05 97       	sbiw	r24, 0x05	; 5
     390:	9e bf       	out	0x3e, r25	; 62
     392:	8d bf       	out	0x3d, r24	; 61
     394:	78 94       	sei
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <x_delay>:
     39c:	9c 01       	movw	r18, r24
     39e:	9f b7       	in	r25, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	e0 91 59 04 	lds	r30, 0x0459
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e4 58       	subi	r30, 0x84	; 132
     3ae:	f3 4f       	sbci	r31, 0xF3	; 243
     3b0:	31 83       	std	Z+1, r19	; 0x01
     3b2:	20 83       	st	Z, r18
     3b4:	20 91 5a 04 	lds	r18, 0x045A
     3b8:	80 91 8d 0c 	lds	r24, 0x0C8D
     3bc:	82 2b       	or	r24, r18
     3be:	80 93 5a 04 	sts	0x045A, r24
     3c2:	9f bf       	out	0x3f, r25	; 63
     3c4:	b0 ce       	rjmp	.-672    	; 0x126 <x_yield>

000003c6 <__vector_21>:
                zero. If a thread is delayed and its counter reaches zero, then it
                is made READY and may be scheduled to run.

----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31

   // Increment system counter
   x_system_counter++;
     3e4:	80 91 4c 04 	lds	r24, 0x044C
     3e8:	90 91 4d 04 	lds	r25, 0x044D
     3ec:	a0 91 4e 04 	lds	r26, 0x044E
     3f0:	b0 91 4f 04 	lds	r27, 0x044F
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	a1 1d       	adc	r26, r1
     3f8:	b1 1d       	adc	r27, r1
     3fa:	80 93 4c 04 	sts	0x044C, r24
     3fe:	90 93 4d 04 	sts	0x044D, r25
     402:	a0 93 4e 04 	sts	0x044E, r26
     406:	b0 93 4f 04 	sts	0x044F, r27
     40a:	20 91 5a 04 	lds	r18, 0x045A
     40e:	ec e7       	ldi	r30, 0x7C	; 124
     410:	fc e0       	ldi	r31, 0x0C	; 12

   char msk = 0x01;  // start with thread 0
     412:	31 e0       	ldi	r19, 0x01	; 1

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
      (*pdelay)--;
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	81 93       	st	Z+, r24
     41c:	91 93       	st	Z+, r25
      if(*pdelay == 0){
     41e:	89 2b       	or	r24, r25
     420:	19 f4       	brne	.+6      	; 0x428 <__vector_21+0x62>
         x_delay_status &= ~msk;
     422:	83 2f       	mov	r24, r19
     424:	80 95       	com	r24
     426:	28 23       	and	r18, r24
      }
      msk <<= 1;
     428:	33 0f       	add	r19, r19

   char msk = 0x01;  // start with thread 0

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	ec 38       	cpi	r30, 0x8C	; 140
     42e:	f8 07       	cpc	r31, r24
     430:	89 f7       	brne	.-30     	; 0x414 <__vector_21+0x4e>
     432:	20 93 5a 04 	sts	0x045A, r18
      }
      msk <<= 1;
      pdelay++;
   }
   
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
     454:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
     456:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
     458:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
     45a:	8f ed       	ldi	r24, 0xDF	; 223
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	cb de       	rcall	.-618    	; 0x1f6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
     460:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     462:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	c6 de       	rcall	.-628    	; 0x1f6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     46a:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
     46c:	85 ee       	ldi	r24, 0xE5	; 229
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	c2 de       	rcall	.-636    	; 0x1f6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     472:	c2 95       	swap	r28
     474:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	8c 27       	eor	r24, r28
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
     47e:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     480:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
     482:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     484:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
     486:	8e e0       	ldi	r24, 0x0E	; 14
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	b5 de       	rcall	.-662    	; 0x1f6 <delay_usec>
	
	return(PINE & (1 << PE4));
     48c:	8c b1       	in	r24, 0x0c	; 12
}
     48e:	80 71       	andi	r24, 0x10	; 16
     490:	08 95       	ret

00000492 <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
     492:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     494:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	09 f4       	brne	.+2      	; 0x49c <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
     49a:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
     49c:	8b e3       	ldi	r24, 0x3B	; 59
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	aa de       	rcall	.-684    	; 0x1f6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
     4a2:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     4a4:	6c 98       	cbi	0x0d, 4	; 13
     4a6:	08 95       	ret

000004a8 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	c0 e0       	ldi	r28, 0x00	; 0
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
     4b6:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4b8:	ee 24       	eor	r14, r14
     4ba:	e3 94       	inc	r14
     4bc:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
     4be:	df df       	rcall	.-66     	; 0x47e <ow_read_bit>
     4c0:	88 23       	and	r24, r24
     4c2:	39 f0       	breq	.+14     	; 0x4d2 <ow_read_byte+0x2a>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4c4:	c7 01       	movw	r24, r14
     4c6:	0c 2e       	mov	r0, r28
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <ow_read_byte+0x24>
     4ca:	88 0f       	add	r24, r24
     4cc:	0a 94       	dec	r0
     4ce:	ea f7       	brpl	.-6      	; 0x4ca <ow_read_byte+0x22>
     4d0:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
     4d2:	83 e1       	ldi	r24, 0x13	; 19
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	8f de       	rcall	.-738    	; 0x1f6 <delay_usec>
     4d8:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
     4da:	c8 30       	cpi	r28, 0x08	; 8
     4dc:	d1 05       	cpc	r29, r1
     4de:	79 f7       	brne	.-34     	; 0x4be <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
     4e0:	81 2f       	mov	r24, r17
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	08 95       	ret

000004ee <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
     4fa:	08 2f       	mov	r16, r24
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	c8 01       	movw	r24, r16
     500:	0c 2e       	mov	r0, r28
     502:	02 c0       	rjmp	.+4      	; 0x508 <ow_write_byte+0x1a>
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
     50c:	81 70       	andi	r24, 0x01	; 1
     50e:	c1 df       	rcall	.-126    	; 0x492 <ow_write_bit>
     510:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
     512:	c8 30       	cpi	r28, 0x08	; 8
     514:	d1 05       	cpc	r29, r1
     516:	99 f7       	brne	.-26     	; 0x4fe <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     518:	87 e7       	ldi	r24, 0x77	; 119
     51a:	90 e0       	ldi	r25, 0x00	; 0
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     524:	68 ce       	rjmp	.-816    	; 0x1f6 <delay_usec>

00000526 <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	2a 97       	sbiw	r28, 0x0a	; 10
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	char shift_val = 4;
	//char temp_f;
	ow_reset();
     542:	88 df       	rcall	.-240    	; 0x454 <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
     544:	8c ec       	ldi	r24, 0xCC	; 204
     546:	d3 df       	rcall	.-90     	; 0x4ee <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
     548:	84 e4       	ldi	r24, 0x44	; 68
     54a:	d1 df       	rcall	.-94     	; 0x4ee <ow_write_byte>
	delay_usec(119); //wait 120us
     54c:	87 e7       	ldi	r24, 0x77	; 119
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	52 de       	rcall	.-860    	; 0x1f6 <delay_usec>
	ow_reset();
     552:	80 df       	rcall	.-256    	; 0x454 <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
     554:	8c ec       	ldi	r24, 0xCC	; 204
     556:	cb df       	rcall	.-106    	; 0x4ee <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
     558:	8e eb       	ldi	r24, 0xBE	; 190
     55a:	c9 df       	rcall	.-110    	; 0x4ee <ow_write_byte>
     55c:	8e 01       	movw	r16, r28
     55e:	0f 5f       	subi	r16, 0xFF	; 255
     560:	1f 4f       	sbci	r17, 0xFF	; 255
     562:	7e 01       	movw	r14, r28
     564:	4a e0       	ldi	r20, 0x0A	; 10
     566:	e4 0e       	add	r14, r20
     568:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
     56a:	9e df       	rcall	.-196    	; 0x4a8 <ow_read_byte>
     56c:	f8 01       	movw	r30, r16
     56e:	81 93       	st	Z+, r24
     570:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
     572:	ee 15       	cp	r30, r14
     574:	ff 05       	cpc	r31, r15
     576:	c9 f7       	brne	.-14     	; 0x56a <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
     578:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
     57a:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb>>shift_val) | (temp_msb<<(8-shift_val));} // shift to get whole degree
     57c:	91 38       	cpi	r25, 0x81	; 129
     57e:	38 f4       	brcc	.+14     	; 0x58e <ow_read_temperature+0x68>
     580:	f0 e1       	ldi	r31, 0x10	; 16
     582:	9f 9f       	mul	r25, r31
     584:	90 01       	movw	r18, r0
     586:	11 24       	eor	r1, r1
     588:	82 95       	swap	r24
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	82 2b       	or	r24, r18
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     58e:	97 ff       	sbrs	r25, 7
     590:	05 c0       	rjmp	.+10     	; 0x59c <ow_read_temperature+0x76>
     592:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb>>shift_val) | ((~temp_msb)<<(8-shift_val));}// shift to get whole degree
     594:	82 95       	swap	r24
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	80 6f       	ori	r24, 0xF0	; 240
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
     59a:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2a 96       	adiw	r28, 0x0a	; 10
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	08 95       	ret

000005b8 <io_controller>:
volatile int timeout = 60;

/*
 * Handles serial I/O
 */
void io_controller(void) {
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	2b 97       	sbiw	r28, 0x0b	; 11
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
	Serial_open(0,19200,SERIAL_8N1);
     5cc:	26 e0       	ldi	r18, 0x06	; 6
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	5b e4       	ldi	r21, 0x4B	; 75
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	4c d2       	rcall	.+1176   	; 0xa76 <Serial_open>
	char opcode[opcode_len];
	char operand[3];
	//char message[64];
	char * str;
	char * formatStr;
	char * format = "Last temp: 0x%x raw hex\n\r";
     5de:	44 e3       	ldi	r20, 0x34	; 52
     5e0:	e4 2e       	mov	r14, r20
     5e2:	42 e0       	ldi	r20, 0x02	; 2
     5e4:	f4 2e       	mov	r15, r20
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
     5e6:	66 24       	eor	r6, r6
     5e8:	63 94       	inc	r6
						if (target_temp < 0 || target_temp > 125) {
							str = "Invalid temperature selection. Sucks to suck.\n\r";
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							str="";
							if (sprintf(str,formatStr,target_temp) < 0) {
     5ea:	51 e9       	ldi	r21, 0x91	; 145
     5ec:	c5 2e       	mov	r12, r21
     5ee:	53 e0       	ldi	r21, 0x03	; 3
     5f0:	d5 2e       	mov	r13, r21
     5f2:	00 e9       	ldi	r16, 0x90	; 144
     5f4:	12 e0       	ldi	r17, 0x02	; 2
					} 
					else if (!strcmp(opcode, "SO")) {
						timeout = operand[0] * 60;
						formatStr = "Timeout set to %d seconds\n\r";
						str="";
						if (sprintf(str,formatStr,timeout) < 0) {
     5f6:	6b e5       	ldi	r22, 0x5B	; 91
     5f8:	a6 2e       	mov	r10, r22
     5fa:	63 e0       	ldi	r22, 0x03	; 3
     5fc:	b6 2e       	mov	r11, r22
					} 
					else if (!strcmp(opcode, "OV")) {
						over_temp = atoi(operand);
						formatStr = "Over-temperature set to %d degrees Celsius\n\r";
						str="";
						if (sprintf(str,formatStr,over_temp) < 0) {
     5fe:	7b e2       	ldi	r23, 0x2B	; 43
     600:	87 2e       	mov	r8, r23
     602:	73 e0       	ldi	r23, 0x03	; 3
     604:	97 2e       	mov	r9, r23
	char * str;
	char * formatStr;
	char * format = "Last temp: 0x%x raw hex\n\r";
	while(1) {
		//if we are able to read a command
		if(Serial_read_string(0,command,command_len)) {
     606:	45 e0       	ldi	r20, 0x05	; 5
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	be 01       	movw	r22, r28
     60c:	6f 5f       	subi	r22, 0xFF	; 255
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	39 d3       	rcall	.+1650   	; 0xc88 <Serial_read_string>
     616:	89 2b       	or	r24, r25
     618:	09 f4       	brne	.+2      	; 0x61c <io_controller+0x64>
     61a:	2d c1       	rjmp	.+602    	; 0x876 <io_controller+0x2be>
			opcode[0] = command[0];
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	8e 83       	std	Y+6, r24	; 0x06
			opcode[1] = command[1];
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	8f 83       	std	Y+7, r24	; 0x07
			/************************************************************************/
			/* Mode-selection commands                                              */
			/************************************************************************/
			if(!strcmp(opcode,"SM")) {//set service mode to true;
     624:	6a ee       	ldi	r22, 0xEA	; 234
     626:	72 e0       	ldi	r23, 0x02	; 2
     628:	ce 01       	movw	r24, r28
     62a:	06 96       	adiw	r24, 0x06	; 6
     62c:	80 d5       	rcall	.+2816   	; 0x112e <strcmp>
     62e:	89 2b       	or	r24, r25
     630:	51 f4       	brne	.+20     	; 0x646 <io_controller+0x8e>
				str = "Entering Service Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     632:	47 e1       	ldi	r20, 0x17	; 23
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	6d ee       	ldi	r22, 0xED	; 237
     638:	72 e0       	ldi	r23, 0x02	; 2
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	70 d3       	rcall	.+1760   	; 0xd20 <Serial_write_string>
				service_mode = 1;
     640:	60 92 92 0c 	sts	0x0C92, r6
     644:	1f c1       	rjmp	.+574    	; 0x884 <io_controller+0x2cc>
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
     646:	65 e0       	ldi	r22, 0x05	; 5
     648:	73 e0       	ldi	r23, 0x03	; 3
     64a:	ce 01       	movw	r24, r28
     64c:	06 96       	adiw	r24, 0x06	; 6
     64e:	6f d5       	rcall	.+2782   	; 0x112e <strcmp>
     650:	89 2b       	or	r24, r25
     652:	a9 f4       	brne	.+42     	; 0x67e <io_controller+0xc6>
				service_mode = !service_mode;
     654:	90 91 92 0c 	lds	r25, 0x0C92
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	91 11       	cpse	r25, r1
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	80 93 92 0c 	sts	0x0C92, r24
				if (service_mode) {
     662:	80 91 92 0c 	lds	r24, 0x0C92
     666:	88 23       	and	r24, r24
     668:	29 f0       	breq	.+10     	; 0x674 <io_controller+0xbc>
					str = "Entering Service Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     66a:	47 e1       	ldi	r20, 0x17	; 23
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	6d ee       	ldi	r22, 0xED	; 237
     670:	72 e0       	ldi	r23, 0x02	; 2
     672:	05 c1       	rjmp	.+522    	; 0x87e <io_controller+0x2c6>
				} else {
					str = "Entering Operating Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     674:	49 e1       	ldi	r20, 0x19	; 25
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	68 e0       	ldi	r22, 0x08	; 8
     67a:	73 e0       	ldi	r23, 0x03	; 3
     67c:	00 c1       	rjmp	.+512    	; 0x87e <io_controller+0x2c6>
				}
			} else if (!strcmp(opcode, "OM")) {//set service mode to false
     67e:	62 e2       	ldi	r22, 0x22	; 34
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	ce 01       	movw	r24, r28
     684:	06 96       	adiw	r24, 0x06	; 6
     686:	53 d5       	rcall	.+2726   	; 0x112e <strcmp>
     688:	89 2b       	or	r24, r25
     68a:	51 f4       	brne	.+20     	; 0x6a0 <io_controller+0xe8>
				str = "Entering Operating Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     68c:	49 e1       	ldi	r20, 0x19	; 25
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	68 e0       	ldi	r22, 0x08	; 8
     692:	73 e0       	ldi	r23, 0x03	; 3
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	43 d3       	rcall	.+1670   	; 0xd20 <Serial_write_string>
				service_mode = 0;
     69a:	10 92 92 0c 	sts	0x0C92, r1
     69e:	f2 c0       	rjmp	.+484    	; 0x884 <io_controller+0x2cc>
			} else {
				/************************************************************************/
				/* Mode-specific commands                                               */
				/************************************************************************/
				if(service_mode) {
     6a0:	90 91 92 0c 	lds	r25, 0x0C92
     6a4:	7b 80       	ldd	r7, Y+3	; 0x03
     6a6:	8c 81       	ldd	r24, Y+4	; 0x04
					operand[0] = command[2];
     6a8:	79 86       	std	Y+9, r7	; 0x09
					operand[1] = 0x00;
     6aa:	1a 86       	std	Y+10, r1	; 0x0a
				service_mode = 0;
			} else {
				/************************************************************************/
				/* Mode-specific commands                                               */
				/************************************************************************/
				if(service_mode) {
     6ac:	99 23       	and	r25, r25
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <io_controller+0xfa>
     6b0:	53 c0       	rjmp	.+166    	; 0x758 <io_controller+0x1a0>
					operand[0] = command[2];
					operand[1] = 0x00;
					if (command[3] != 0x00)
     6b2:	81 11       	cpse	r24, r1
					{
						operand[1] = command[3];
     6b4:	8a 87       	std	Y+10, r24	; 0x0a
					}
					//do service mode things
					if (!strcmp(opcode, "GT")) {
     6b6:	65 e2       	ldi	r22, 0x25	; 37
     6b8:	73 e0       	ldi	r23, 0x03	; 3
     6ba:	ce 01       	movw	r24, r28
     6bc:	06 96       	adiw	r24, 0x06	; 6
     6be:	37 d5       	rcall	.+2670   	; 0x112e <strcmp>
     6c0:	89 2b       	or	r24, r25
     6c2:	d1 f4       	brne	.+52     	; 0x6f8 <io_controller+0x140>
						//Get temperature
						char fmt_temp = last_temp;
     6c4:	60 91 50 04 	lds	r22, 0x0450
						if (!celsius) {
     6c8:	80 91 02 02 	lds	r24, 0x0202
     6cc:	81 11       	cpse	r24, r1
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <io_controller+0x136>
							//this is equivalent to (9/5)*C + 32
							fmt_temp = ((fmt_temp + (fmt_temp << 3))+160)/5;
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	cb 01       	movw	r24, r22
     6d4:	33 e0       	ldi	r19, 0x03	; 3
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	3a 95       	dec	r19
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <io_controller+0x11e>
     6de:	68 0f       	add	r22, r24
     6e0:	79 1f       	adc	r23, r25
     6e2:	cb 01       	movw	r24, r22
     6e4:	80 56       	subi	r24, 0x60	; 96
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	65 e0       	ldi	r22, 0x05	; 5
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	dc d4       	rcall	.+2488   	; 0x10a6 <__divmodhi4>
						}
						str="";
						if (sprintf(str, format, fmt_temp) < 0) {
     6ee:	1f 92       	push	r1
     6f0:	6f 93       	push	r22
     6f2:	ff 92       	push	r15
     6f4:	ef 92       	push	r14
     6f6:	55 c0       	rjmp	.+170    	; 0x7a2 <io_controller+0x1ea>
							str = "Formatting Error\n\r";
						}
						Serial_write_string(0, str, strlen(str));
					} 
					else if (!strcmp(opcode, "OV")) {
     6f8:	68 e2       	ldi	r22, 0x28	; 40
     6fa:	73 e0       	ldi	r23, 0x03	; 3
     6fc:	ce 01       	movw	r24, r28
     6fe:	06 96       	adiw	r24, 0x06	; 6
     700:	16 d5       	rcall	.+2604   	; 0x112e <strcmp>
     702:	89 2b       	or	r24, r25
     704:	81 f4       	brne	.+32     	; 0x726 <io_controller+0x16e>
						over_temp = atoi(operand);
     706:	ce 01       	movw	r24, r28
     708:	09 96       	adiw	r24, 0x09	; 9
     70a:	f4 d4       	rcall	.+2536   	; 0x10f4 <atoi>
     70c:	90 93 8f 0c 	sts	0x0C8F, r25
     710:	80 93 8e 0c 	sts	0x0C8E, r24
						formatStr = "Over-temperature set to %d degrees Celsius\n\r";
						str="";
						if (sprintf(str,formatStr,over_temp) < 0) {
     714:	80 91 8e 0c 	lds	r24, 0x0C8E
     718:	90 91 8f 0c 	lds	r25, 0x0C8F
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	9f 92       	push	r9
     722:	8f 92       	push	r8
     724:	3e c0       	rjmp	.+124    	; 0x7a2 <io_controller+0x1ea>
							str = "Formatting Error\n\r";
						}
						Serial_write_string(0, str, strlen(str));
					} 
					else if (!strcmp(opcode, "SO")) {
     726:	68 e5       	ldi	r22, 0x58	; 88
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	ce 01       	movw	r24, r28
     72c:	06 96       	adiw	r24, 0x06	; 6
     72e:	ff d4       	rcall	.+2558   	; 0x112e <strcmp>
     730:	89 2b       	or	r24, r25
     732:	09 f0       	breq	.+2      	; 0x736 <io_controller+0x17e>
     734:	9b c0       	rjmp	.+310    	; 0x86c <io_controller+0x2b4>
						timeout = operand[0] * 60;
     736:	2c e3       	ldi	r18, 0x3C	; 60
     738:	72 9e       	mul	r7, r18
     73a:	c0 01       	movw	r24, r0
     73c:	11 24       	eor	r1, r1
     73e:	90 93 01 02 	sts	0x0201, r25
     742:	80 93 00 02 	sts	0x0200, r24
						formatStr = "Timeout set to %d seconds\n\r";
						str="";
						if (sprintf(str,formatStr,timeout) < 0) {
     746:	80 91 00 02 	lds	r24, 0x0200
     74a:	90 91 01 02 	lds	r25, 0x0201
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	bf 92       	push	r11
     754:	af 92       	push	r10
     756:	25 c0       	rjmp	.+74     	; 0x7a2 <io_controller+0x1ea>
						Serial_write_string(0,str,strlen(str));
					}
				} else {
					operand[0] = command[2];
					operand[1] = 0x00;
					if (command[3] != 0x00)
     758:	81 11       	cpse	r24, r1
					{
						operand[1] = command[3];
     75a:	8a 87       	std	Y+10, r24	; 0x0a
					}
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
     75c:	6e e8       	ldi	r22, 0x8E	; 142
     75e:	73 e0       	ldi	r23, 0x03	; 3
     760:	ce 01       	movw	r24, r28
     762:	06 96       	adiw	r24, 0x06	; 6
     764:	e4 d4       	rcall	.+2504   	; 0x112e <strcmp>
     766:	89 2b       	or	r24, r25
     768:	c1 f5       	brne	.+112    	; 0x7da <io_controller+0x222>
						//set temperature
						target_temp = atoi(operand);
     76a:	ce 01       	movw	r24, r28
     76c:	09 96       	adiw	r24, 0x09	; 9
     76e:	c2 d4       	rcall	.+2436   	; 0x10f4 <atoi>
     770:	90 93 91 0c 	sts	0x0C91, r25
     774:	80 93 90 0c 	sts	0x0C90, r24
						if (target_temp < 0 || target_temp > 125) {
     778:	80 91 90 0c 	lds	r24, 0x0C90
     77c:	90 91 91 0c 	lds	r25, 0x0C91
     780:	97 fd       	sbrc	r25, 7
     782:	1d c0       	rjmp	.+58     	; 0x7be <io_controller+0x206>
     784:	80 91 90 0c 	lds	r24, 0x0C90
     788:	90 91 91 0c 	lds	r25, 0x0C91
     78c:	8e 37       	cpi	r24, 0x7E	; 126
     78e:	91 05       	cpc	r25, r1
     790:	b4 f4       	brge	.+44     	; 0x7be <io_controller+0x206>
							str = "Invalid temperature selection. Sucks to suck.\n\r";
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							str="";
							if (sprintf(str,formatStr,target_temp) < 0) {
     792:	80 91 90 0c 	lds	r24, 0x0C90
     796:	90 91 91 0c 	lds	r25, 0x0C91
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	df 92       	push	r13
     7a0:	cf 92       	push	r12
     7a2:	1f 93       	push	r17
     7a4:	0f 93       	push	r16
     7a6:	d4 d4       	rcall	.+2472   	; 0x1150 <sprintf>
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	97 ff       	sbrs	r25, 7
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <io_controller+0x20c>
								str = "Formatting Error\n\r";
     7b8:	6e e4       	ldi	r22, 0x4E	; 78
     7ba:	72 e0       	ldi	r23, 0x02	; 2
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <io_controller+0x210>
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
						//set temperature
						target_temp = atoi(operand);
						if (target_temp < 0 || target_temp > 125) {
							str = "Invalid temperature selection. Sucks to suck.\n\r";
     7be:	61 e6       	ldi	r22, 0x61	; 97
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <io_controller+0x210>
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							str="";
     7c4:	60 e9       	ldi	r22, 0x90	; 144
     7c6:	72 e0       	ldi	r23, 0x02	; 2
							if (sprintf(str,formatStr,target_temp) < 0) {
								str = "Formatting Error\n\r";
							}
						}
						Serial_write_string(0,str,strlen(str));
     7c8:	fb 01       	movw	r30, r22
     7ca:	01 90       	ld	r0, Z+
     7cc:	00 20       	and	r0, r0
     7ce:	e9 f7       	brne	.-6      	; 0x7ca <io_controller+0x212>
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	af 01       	movw	r20, r30
     7d4:	46 1b       	sub	r20, r22
     7d6:	57 0b       	sbc	r21, r23
     7d8:	52 c0       	rjmp	.+164    	; 0x87e <io_controller+0x2c6>
					} else if (!strcmp(opcode, "SR")) {
     7da:	60 ec       	ldi	r22, 0xC0	; 192
     7dc:	73 e0       	ldi	r23, 0x03	; 3
     7de:	ce 01       	movw	r24, r28
     7e0:	06 96       	adiw	r24, 0x06	; 6
     7e2:	a5 d4       	rcall	.+2378   	; 0x112e <strcmp>
     7e4:	89 2b       	or	r24, r25
     7e6:	19 f4       	brne	.+6      	; 0x7ee <io_controller+0x236>
						//set sample rate
						sample_rate = operand[0];
     7e8:	70 92 03 02 	sts	0x0203, r7
     7ec:	2e c0       	rjmp	.+92     	; 0x84a <io_controller+0x292>
						format="Last temp: %x raw hex";
						str = "Set format to Celsius Hexadecimal\n\r";
						Serial_write_string(0,str,strlen(str));
					} else if (!strcmp(opcode, "SD")) {
     7ee:	67 ee       	ldi	r22, 0xE7	; 231
     7f0:	73 e0       	ldi	r23, 0x03	; 3
     7f2:	ce 01       	movw	r24, r28
     7f4:	06 96       	adiw	r24, 0x06	; 6
     7f6:	9b d4       	rcall	.+2358   	; 0x112e <strcmp>
     7f8:	89 2b       	or	r24, r25
     7fa:	c1 f5       	brne	.+112    	; 0x86c <io_controller+0x2b4>
						//set display format
						switch (operand[0]) {
     7fc:	86 e4       	ldi	r24, 0x46	; 70
     7fe:	78 16       	cp	r7, r24
     800:	a1 f0       	breq	.+40     	; 0x82a <io_controller+0x272>
     802:	28 e5       	ldi	r18, 0x58	; 88
     804:	72 16       	cp	r7, r18
     806:	f9 f0       	breq	.+62     	; 0x846 <io_controller+0x28e>
     808:	83 e4       	ldi	r24, 0x43	; 67
     80a:	78 12       	cpse	r7, r24
     80c:	2a c0       	rjmp	.+84     	; 0x862 <io_controller+0x2aa>
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
								celsius = 1;
     80e:	60 92 02 02 	sts	0x0202, r6
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
     812:	47 e1       	ldi	r20, 0x17	; 23
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	65 e0       	ldi	r22, 0x05	; 5
     818:	74 e0       	ldi	r23, 0x04	; 4
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	80 d2       	rcall	.+1280   	; 0xd20 <Serial_write_string>
								celsius = 0;
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
     820:	9a ec       	ldi	r25, 0xCA	; 202
     822:	e9 2e       	mov	r14, r25
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	f9 2e       	mov	r15, r25
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     828:	2d c0       	rjmp	.+90     	; 0x884 <io_controller+0x2cc>
					} else if (!strcmp(opcode, "SD")) {
						//set display format
						switch (operand[0]) {
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
								celsius = 0;
     82a:	10 92 02 02 	sts	0x0202, r1
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
     82e:	4a e1       	ldi	r20, 0x1A	; 26
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	6a ee       	ldi	r22, 0xEA	; 234
     834:	73 e0       	ldi	r23, 0x03	; 3
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	72 d2       	rcall	.+1252   	; 0xd20 <Serial_write_string>
						Serial_write_string(0,str,strlen(str));
					} else if (!strcmp(opcode, "SD")) {
						//set display format
						switch (operand[0]) {
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
     83c:	27 ea       	ldi	r18, 0xA7	; 167
     83e:	e2 2e       	mov	r14, r18
     840:	22 e0       	ldi	r18, 0x02	; 2
     842:	f2 2e       	mov	r15, r18
								celsius = 0;
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     844:	1f c0       	rjmp	.+62     	; 0x884 <io_controller+0x2cc>
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
     846:	60 92 02 02 	sts	0x0202, r6
								format="Last temp: %x raw hex";
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
     84a:	43 e2       	ldi	r20, 0x23	; 35
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	63 ec       	ldi	r22, 0xC3	; 195
     850:	73 e0       	ldi	r23, 0x03	; 3
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	64 d2       	rcall	.+1224   	; 0xd20 <Serial_write_string>
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
								format="Last temp: %x raw hex";
     858:	81 e9       	ldi	r24, 0x91	; 145
     85a:	e8 2e       	mov	r14, r24
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	f8 2e       	mov	r15, r24
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     860:	11 c0       	rjmp	.+34     	; 0x884 <io_controller+0x2cc>
							default:
								str = "Unrecognized format\n\r";
								Serial_write_string(0,str,strlen(str));
     862:	45 e1       	ldi	r20, 0x15	; 21
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	6d e1       	ldi	r22, 0x1D	; 29
     868:	74 e0       	ldi	r23, 0x04	; 4
     86a:	09 c0       	rjmp	.+18     	; 0x87e <io_controller+0x2c6>
								break;
						}
					} else {
						str = "Unrecognized command\n\r";
						Serial_write_string(0,str,strlen(str));
     86c:	46 e1       	ldi	r20, 0x16	; 22
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	67 e7       	ldi	r22, 0x77	; 119
     872:	73 e0       	ldi	r23, 0x03	; 3
     874:	04 c0       	rjmp	.+8      	; 0x87e <io_controller+0x2c6>
				}
			}

		} else {
			str = "Error reading command\n\r";
			Serial_write_string(0,str,strlen(str));
     876:	47 e1       	ldi	r20, 0x17	; 23
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	63 e3       	ldi	r22, 0x33	; 51
     87c:	74 e0       	ldi	r23, 0x04	; 4
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	4e d2       	rcall	.+1180   	; 0xd20 <Serial_write_string>
		}
		x_delay(1000);
     884:	88 ee       	ldi	r24, 0xE8	; 232
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	89 dd       	rcall	.-1262   	; 0x39c <x_delay>
	}
     88a:	bd ce       	rjmp	.-646    	; 0x606 <io_controller+0x4e>

0000088c <box_controller>:
/*
 * Controller for the box
 */
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
     88c:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
		//_delay_ms(1000);
		PORTB ^= 0x10;
     88e:	c0 e1       	ldi	r28, 0x10	; 16
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
     890:	80 91 03 02 	lds	r24, 0x0203
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	82 dd       	rcall	.-1276   	; 0x39c <x_delay>
		//_delay_ms(1000);
		PORTB ^= 0x10;
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	8c 27       	eor	r24, r28
     89c:	85 b9       	out	0x05, r24	; 5
		//x_yield();
	}
     89e:	f8 cf       	rjmp	.-16     	; 0x890 <box_controller+0x4>

000008a0 <sensor_controller>:
}

/*
 * Polls sensor for temperature every second
 */
void sensor_controller(void) {
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	1f 92       	push	r1
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
	//Check for sensor presence
	char presence = ow_reset();
     8aa:	d4 dd       	rcall	.-1112   	; 0x454 <ow_reset>
	//keep checking until we detect a sensor
	while (! presence) {
     8ac:	81 11       	cpse	r24, r1
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <sensor_controller+0x1a>
		presence = ow_reset();
     8b0:	d1 dd       	rcall	.-1118   	; 0x454 <ow_reset>
		//give other threads a chance to act during this process
		x_yield();
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	38 dc       	rcall	.-1936   	; 0x126 <x_yield>
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	f9 cf       	rjmp	.-14     	; 0x8ac <sensor_controller+0xc>
	}
	//monitor temperature
	while(1) {
		last_temp = ow_read_temperature();
     8ba:	35 de       	rcall	.-918    	; 0x526 <ow_read_temperature>
     8bc:	80 93 50 04 	sts	0x0450, r24
		x_delay(sample_rate);
     8c0:	80 91 03 02 	lds	r24, 0x0203
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	6a dd       	rcall	.-1324   	; 0x39c <x_delay>
	}
     8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <sensor_controller+0x1a>

000008ca <main>:
}

int main(void)
{
	x_init();
     8ca:	f1 dc       	rcall	.-1566   	; 0x2ae <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	6c ed       	ldi	r22, 0xDC	; 220
     8d0:	72 e0       	ldi	r23, 0x02	; 2
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	9b dc       	rcall	.-1738   	; 0x20c <x_new>
	x_new(1, sensor_controller, 1);
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	60 e5       	ldi	r22, 0x50	; 80
     8da:	74 e0       	ldi	r23, 0x04	; 4
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	96 dc       	rcall	.-1748   	; 0x20c <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	66 e4       	ldi	r22, 0x46	; 70
     8e4:	74 e0       	ldi	r23, 0x04	; 4
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	91 dc       	rcall	.-1758   	; 0x20c <x_new>
}
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	08 95       	ret

000008f0 <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	QCB *qcb = &queues[qid];
	if (qcb->flags != 1)
     8f4:	98 e0       	ldi	r25, 0x08	; 8
     8f6:	89 9f       	mul	r24, r25
     8f8:	f0 01       	movw	r30, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	df 01       	movw	r26, r30
     8fe:	ad 56       	subi	r26, 0x6D	; 109
     900:	b3 4f       	sbci	r27, 0xF3	; 243
     902:	13 96       	adiw	r26, 0x03	; 3
     904:	8c 91       	ld	r24, X
     906:	13 97       	sbiw	r26, 0x03	; 3
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	a1 f1       	breq	.+104    	; 0x974 <Q_putc+0x84>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     90c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     90e:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
     910:	8c 91       	ld	r24, X
     912:	16 96       	adiw	r26, 0x06	; 6
     914:	cd 91       	ld	r28, X+
     916:	dc 91       	ld	r29, X
     918:	17 97       	sbiw	r26, 0x07	; 7
     91a:	c8 0f       	add	r28, r24
     91c:	d1 1d       	adc	r29, r1
     91e:	68 83       	st	Y, r22
			qcb->available += 1;
     920:	14 96       	adiw	r26, 0x04	; 4
     922:	2d 91       	ld	r18, X+
     924:	3c 91       	ld	r19, X
     926:	15 97       	sbiw	r26, 0x05	; 5
     928:	2f 5f       	subi	r18, 0xFF	; 255
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	15 96       	adiw	r26, 0x05	; 5
     92e:	3c 93       	st	X, r19
     930:	2e 93       	st	-X, r18
     932:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 2)
     934:	13 96       	adiw	r26, 0x03	; 3
     936:	8c 91       	ld	r24, X
     938:	13 97       	sbiw	r26, 0x03	; 3
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	11 f4       	brne	.+4      	; 0x942 <Q_putc+0x52>
			{
				qcb->flags = 0;
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	1c 92       	st	X, r1
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     942:	ed 56       	subi	r30, 0x6D	; 109
     944:	f3 4f       	sbci	r31, 0xF3	; 243
     946:	90 81       	ld	r25, Z
     948:	82 81       	ldd	r24, Z+2	; 0x02
     94a:	49 2f       	mov	r20, r25
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	4f 5f       	subi	r20, 0xFF	; 255
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	42 23       	and	r20, r18
     958:	53 23       	and	r21, r19
     95a:	21 81       	ldd	r18, Z+1	; 0x01
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
     960:	89 23       	and	r24, r25
     962:	80 83       	st	Z, r24
			if (qcb->flags == 2)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     964:	42 17       	cp	r20, r18
     966:	53 07       	cpc	r21, r19
     968:	11 f4       	brne	.+4      	; 0x96e <Q_putc+0x7e>
				qcb->in = (qcb->in + 1) & qcb->smask;
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     96e:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	01 c0       	rjmp	.+2      	; 0x976 <Q_putc+0x86>
	}
	else
	{
		return 0;
     974:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	9b 01       	movw	r18, r22
	QCB *qcb = &queues[qid];
	if (qcb->flags != 2)
     982:	98 e0       	ldi	r25, 0x08	; 8
     984:	89 9f       	mul	r24, r25
     986:	f0 01       	movw	r30, r0
     988:	11 24       	eor	r1, r1
     98a:	df 01       	movw	r26, r30
     98c:	ad 56       	subi	r26, 0x6D	; 109
     98e:	b3 4f       	sbci	r27, 0xF3	; 243
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	8c 91       	ld	r24, X
     994:	13 97       	sbiw	r26, 0x03	; 3
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	c1 f1       	breq	.+112    	; 0xa0a <Q_getc+0x8e>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     99a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     99c:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	8c 91       	ld	r24, X
     9a2:	11 97       	sbiw	r26, 0x01	; 1
     9a4:	16 96       	adiw	r26, 0x06	; 6
     9a6:	cd 91       	ld	r28, X+
     9a8:	dc 91       	ld	r29, X
     9aa:	17 97       	sbiw	r26, 0x07	; 7
     9ac:	c8 0f       	add	r28, r24
     9ae:	d1 1d       	adc	r29, r1
     9b0:	88 81       	ld	r24, Y
     9b2:	e9 01       	movw	r28, r18
     9b4:	88 83       	st	Y, r24
			qcb->available -= 1;
     9b6:	14 96       	adiw	r26, 0x04	; 4
     9b8:	2d 91       	ld	r18, X+
     9ba:	3c 91       	ld	r19, X
     9bc:	15 97       	sbiw	r26, 0x05	; 5
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	31 09       	sbc	r19, r1
     9c2:	15 96       	adiw	r26, 0x05	; 5
     9c4:	3c 93       	st	X, r19
     9c6:	2e 93       	st	-X, r18
     9c8:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 1)
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	8c 91       	ld	r24, X
     9ce:	13 97       	sbiw	r26, 0x03	; 3
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <Q_getc+0x5c>
			{
				qcb->flags = 0;
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	1c 92       	st	X, r1
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     9d8:	ed 56       	subi	r30, 0x6D	; 109
     9da:	f3 4f       	sbci	r31, 0xF3	; 243
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	49 2f       	mov	r20, r25
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	4f 5f       	subi	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	28 2f       	mov	r18, r24
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	42 23       	and	r20, r18
     9ee:	53 23       	and	r21, r19
     9f0:	20 81       	ld	r18, Z
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     9f6:	89 23       	and	r24, r25
     9f8:	81 83       	std	Z+1, r24	; 0x01
			if (qcb->flags == 1)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     9fa:	42 17       	cp	r20, r18
     9fc:	53 07       	cpc	r21, r19
     9fe:	11 f4       	brne	.+4      	; 0xa04 <Q_getc+0x88>
				qcb->out = (qcb->out + 1) & qcb->smask;
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a04:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <Q_getc+0x90>
	}
	return 0;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
     a12:	9c 01       	movw	r18, r24
     a14:	21 50       	subi	r18, 0x01	; 1
     a16:	31 09       	sbc	r19, r1
     a18:	2f 3f       	cpi	r18, 0xFF	; 255
     a1a:	31 05       	cpc	r19, r1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <Q_create+0xe>
     a1e:	48 f5       	brcc	.+82     	; 0xa72 <Q_create+0x60>
     a20:	28 23       	and	r18, r24
     a22:	39 23       	and	r19, r25
     a24:	23 2b       	or	r18, r19
     a26:	29 f5       	brne	.+74     	; 0xa72 <Q_create+0x60>
     a28:	e1 e5       	ldi	r30, 0x51	; 81
     a2a:	f4 e0       	ldi	r31, 0x04	; 4
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
     a30:	41 91       	ld	r20, Z+
     a32:	41 11       	cpse	r20, r1
     a34:	19 c0       	rjmp	.+50     	; 0xa68 <Q_create+0x56>
		{
			queues[i].in = 0;
     a36:	f9 01       	movw	r30, r18
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	9a 95       	dec	r25
     a40:	e1 f7       	brne	.-8      	; 0xa3a <Q_create+0x28>
     a42:	ed 56       	subi	r30, 0x6D	; 109
     a44:	f3 4f       	sbci	r31, 0xF3	; 243
     a46:	10 82       	st	Z, r1
			queues[i].out = 0;
     a48:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
     a4a:	81 50       	subi	r24, 0x01	; 1
     a4c:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
     a52:	15 82       	std	Z+5, r1	; 0x05
     a54:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
     a56:	77 83       	std	Z+7, r23	; 0x07
     a58:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
     a5a:	f9 01       	movw	r30, r18
     a5c:	ef 5a       	subi	r30, 0xAF	; 175
     a5e:	fb 4f       	sbci	r31, 0xFB	; 251
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 83       	st	Z, r24
			return i;
     a64:	82 2f       	mov	r24, r18
     a66:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	28 30       	cpi	r18, 0x08	; 8
     a6e:	31 05       	cpc	r19, r1
     a70:	f9 f6       	brne	.-66     	; 0xa30 <Q_create+0x1e>

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
     a74:	08 95       	ret

00000a76 <Serial_open>:
	Q_delete(ports[port].tx_qid);
}

int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	84 30       	cpi	r24, 0x04	; 4
     a8a:	91 05       	cpc	r25, r1
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <Serial_open+0x1a>
     a8e:	d0 c0       	rjmp	.+416    	; 0xc30 <Serial_open+0x1ba>
     a90:	b2 2e       	mov	r11, r18
     a92:	6a 01       	movw	r12, r20
     a94:	7b 01       	movw	r14, r22
     a96:	8c 01       	movw	r16, r24
     a98:	8a e0       	ldi	r24, 0x0A	; 10
     a9a:	80 9f       	mul	r24, r16
     a9c:	e0 01       	movw	r28, r0
     a9e:	81 9f       	mul	r24, r17
     aa0:	d0 0d       	add	r29, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	c4 5f       	subi	r28, 0xF4	; 244
     aa6:	dd 4f       	sbci	r29, 0xFD	; 253
     aa8:	6a 81       	ldd	r22, Y+2	; 0x02
     aaa:	7b 81       	ldd	r23, Y+3	; 0x03
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	b0 df       	rcall	.-160    	; 0xa12 <Q_create>
     ab2:	88 83       	st	Y, r24
     ab4:	6e 81       	ldd	r22, Y+6	; 0x06
     ab6:	7f 81       	ldd	r23, Y+7	; 0x07
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	99 85       	ldd	r25, Y+9	; 0x09
     abc:	aa df       	rcall	.-172    	; 0xa12 <Q_create>
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	00 0f       	add	r16, r16
     ac2:	11 1f       	adc	r17, r17
     ac4:	f8 01       	movw	r30, r16
     ac6:	ec 5f       	subi	r30, 0xFC	; 252
     ac8:	fd 4f       	sbci	r31, 0xFD	; 253
     aca:	a0 81       	ld	r26, Z
     acc:	b1 81       	ldd	r27, Z+1	; 0x01
     ace:	9c 91       	ld	r25, X
     ad0:	92 60       	ori	r25, 0x02	; 2
     ad2:	9c 93       	st	X, r25
     ad4:	80 e8       	ldi	r24, 0x80	; 128
     ad6:	c8 16       	cp	r12, r24
     ad8:	80 e7       	ldi	r24, 0x70	; 112
     ada:	d8 06       	cpc	r13, r24
     adc:	e1 04       	cpc	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <Serial_open+0x6e>
     ae2:	78 c0       	rjmp	.+240    	; 0xbd4 <Serial_open+0x15e>
     ae4:	94 f5       	brge	.+100    	; 0xb4a <Serial_open+0xd4>
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	c8 16       	cp	r12, r24
     aea:	85 e2       	ldi	r24, 0x25	; 37
     aec:	d8 06       	cpc	r13, r24
     aee:	e1 04       	cpc	r14, r1
     af0:	f1 04       	cpc	r15, r1
     af2:	09 f4       	brne	.+2      	; 0xaf6 <Serial_open+0x80>
     af4:	65 c0       	rjmp	.+202    	; 0xbc0 <Serial_open+0x14a>
     af6:	ac f4       	brge	.+42     	; 0xb22 <Serial_open+0xac>
     af8:	80 e6       	ldi	r24, 0x60	; 96
     afa:	c8 16       	cp	r12, r24
     afc:	89 e0       	ldi	r24, 0x09	; 9
     afe:	d8 06       	cpc	r13, r24
     b00:	e1 04       	cpc	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	09 f4       	brne	.+2      	; 0xb08 <Serial_open+0x92>
     b06:	57 c0       	rjmp	.+174    	; 0xbb6 <Serial_open+0x140>
     b08:	80 ec       	ldi	r24, 0xC0	; 192
     b0a:	c8 16       	cp	r12, r24
     b0c:	82 e1       	ldi	r24, 0x12	; 18
     b0e:	d8 06       	cpc	r13, r24
     b10:	e1 04       	cpc	r14, r1
     b12:	f1 04       	cpc	r15, r1
     b14:	09 f0       	breq	.+2      	; 0xb18 <Serial_open+0xa2>
     b16:	77 c0       	rjmp	.+238    	; 0xc06 <Serial_open+0x190>
     b18:	40 ea       	ldi	r20, 0xA0	; 160
     b1a:	51 e0       	ldi	r21, 0x01	; 1
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	75 c0       	rjmp	.+234    	; 0xc0c <Serial_open+0x196>
     b22:	80 e4       	ldi	r24, 0x40	; 64
     b24:	c8 16       	cp	r12, r24
     b26:	88 e3       	ldi	r24, 0x38	; 56
     b28:	d8 06       	cpc	r13, r24
     b2a:	e1 04       	cpc	r14, r1
     b2c:	f1 04       	cpc	r15, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <Serial_open+0xbc>
     b30:	4c c0       	rjmp	.+152    	; 0xbca <Serial_open+0x154>
     b32:	c1 14       	cp	r12, r1
     b34:	8b e4       	ldi	r24, 0x4B	; 75
     b36:	d8 06       	cpc	r13, r24
     b38:	e1 04       	cpc	r14, r1
     b3a:	f1 04       	cpc	r15, r1
     b3c:	09 f0       	breq	.+2      	; 0xb40 <Serial_open+0xca>
     b3e:	63 c0       	rjmp	.+198    	; 0xc06 <Serial_open+0x190>
     b40:	47 e6       	ldi	r20, 0x67	; 103
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	61 c0       	rjmp	.+194    	; 0xc0c <Serial_open+0x196>
     b4a:	c1 14       	cp	r12, r1
     b4c:	8c e2       	ldi	r24, 0x2C	; 44
     b4e:	d8 06       	cpc	r13, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	e8 06       	cpc	r14, r24
     b54:	f1 04       	cpc	r15, r1
     b56:	09 f4       	brne	.+2      	; 0xb5a <Serial_open+0xe4>
     b58:	47 c0       	rjmp	.+142    	; 0xbe8 <Serial_open+0x172>
     b5a:	94 f4       	brge	.+36     	; 0xb80 <Serial_open+0x10a>
     b5c:	c1 14       	cp	r12, r1
     b5e:	86 e9       	ldi	r24, 0x96	; 150
     b60:	d8 06       	cpc	r13, r24
     b62:	e1 04       	cpc	r14, r1
     b64:	f1 04       	cpc	r15, r1
     b66:	d9 f1       	breq	.+118    	; 0xbde <Serial_open+0x168>
     b68:	c1 14       	cp	r12, r1
     b6a:	81 ee       	ldi	r24, 0xE1	; 225
     b6c:	d8 06       	cpc	r13, r24
     b6e:	e1 04       	cpc	r14, r1
     b70:	f1 04       	cpc	r15, r1
     b72:	09 f0       	breq	.+2      	; 0xb76 <Serial_open+0x100>
     b74:	48 c0       	rjmp	.+144    	; 0xc06 <Serial_open+0x190>
     b76:	42 e2       	ldi	r20, 0x22	; 34
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	46 c0       	rjmp	.+140    	; 0xc0c <Serial_open+0x196>
     b80:	c1 14       	cp	r12, r1
     b82:	84 e8       	ldi	r24, 0x84	; 132
     b84:	d8 06       	cpc	r13, r24
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	e8 06       	cpc	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	91 f1       	breq	.+100    	; 0xbf2 <Serial_open+0x17c>
     b8e:	80 e9       	ldi	r24, 0x90	; 144
     b90:	c8 16       	cp	r12, r24
     b92:	80 ed       	ldi	r24, 0xD0	; 208
     b94:	d8 06       	cpc	r13, r24
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	e8 06       	cpc	r14, r24
     b9a:	f1 04       	cpc	r15, r1
     b9c:	79 f1       	breq	.+94     	; 0xbfc <Serial_open+0x186>
     b9e:	c1 14       	cp	r12, r1
     ba0:	82 ec       	ldi	r24, 0xC2	; 194
     ba2:	d8 06       	cpc	r13, r24
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	e8 06       	cpc	r14, r24
     ba8:	f1 04       	cpc	r15, r1
     baa:	69 f5       	brne	.+90     	; 0xc06 <Serial_open+0x190>
     bac:	40 e1       	ldi	r20, 0x10	; 16
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	2b c0       	rjmp	.+86     	; 0xc0c <Serial_open+0x196>
     bb6:	40 e4       	ldi	r20, 0x40	; 64
     bb8:	53 e0       	ldi	r21, 0x03	; 3
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	26 c0       	rjmp	.+76     	; 0xc0c <Serial_open+0x196>
     bc0:	4f ec       	ldi	r20, 0xCF	; 207
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <Serial_open+0x196>
     bca:	4a e8       	ldi	r20, 0x8A	; 138
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	1c c0       	rjmp	.+56     	; 0xc0c <Serial_open+0x196>
     bd4:	44 e4       	ldi	r20, 0x44	; 68
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	17 c0       	rjmp	.+46     	; 0xc0c <Serial_open+0x196>
     bde:	43 e3       	ldi	r20, 0x33	; 51
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	12 c0       	rjmp	.+36     	; 0xc0c <Serial_open+0x196>
     be8:	49 e1       	ldi	r20, 0x19	; 25
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <Serial_open+0x196>
     bf2:	48 e0       	ldi	r20, 0x08	; 8
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <Serial_open+0x196>
     bfc:	47 e0       	ldi	r20, 0x07	; 7
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <Serial_open+0x196>
     c06:	4f ef       	ldi	r20, 0xFF	; 255
     c08:	5f ef       	ldi	r21, 0xFF	; 255
     c0a:	ba 01       	movw	r22, r20
     c0c:	8f b7       	in	r24, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	f8 01       	movw	r30, r16
     c12:	ec 5f       	subi	r30, 0xFC	; 252
     c14:	fd 4f       	sbci	r31, 0xFD	; 253
     c16:	01 90       	ld	r0, Z+
     c18:	f0 81       	ld	r31, Z
     c1a:	e0 2d       	mov	r30, r0
     c1c:	55 83       	std	Z+5, r21	; 0x05
     c1e:	44 83       	std	Z+4, r20	; 0x04
     c20:	b2 82       	std	Z+2, r11	; 0x02
     c22:	98 e9       	ldi	r25, 0x98	; 152
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	8f bf       	out	0x3f, r24	; 63
     c28:	78 94       	sei
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <Serial_open+0x1be>
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	08 95       	ret

00000c48 <Serial_read>:
}

int Serial_read(int port)
{
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	1f 92       	push	r1
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	char qdata = 0;
     c52:	19 82       	std	Y+1, r1	; 0x01
	int data;
	
	if (Q_getc(ports[port].rx_qid, &qdata))
     c54:	2a e0       	ldi	r18, 0x0A	; 10
     c56:	ac 01       	movw	r20, r24
     c58:	24 9f       	mul	r18, r20
     c5a:	c0 01       	movw	r24, r0
     c5c:	25 9f       	mul	r18, r21
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	fc 01       	movw	r30, r24
     c64:	e4 5f       	subi	r30, 0xF4	; 244
     c66:	fd 4f       	sbci	r31, 0xFD	; 253
     c68:	be 01       	movw	r22, r28
     c6a:	6f 5f       	subi	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	85 de       	rcall	.-758    	; 0x97c <Q_getc>
     c72:	88 23       	and	r24, r24
     c74:	19 f0       	breq	.+6      	; 0xc7c <Serial_read+0x34>
	{
		data = qdata;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	90 e0       	ldi	r25, 0x00	; 0
		return data;
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <Serial_read+0x38>
	}
	else
	{
		return -1;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     c80:	0f 90       	pop	r0
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <Serial_read_string>:
		i++;
	}
	return 1;
}

int Serial_read_string(int port, char * data, int data_length) {
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	7c 01       	movw	r14, r24
     c9a:	6b 01       	movw	r12, r22
     c9c:	8a 01       	movw	r16, r20
	char latest;
	int i = 0;
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
	
	//loop until end of data
	while (i < data_length) {
     ca2:	c0 17       	cp	r28, r16
     ca4:	d1 07       	cpc	r29, r17
     ca6:	8c f4       	brge	.+34     	; 0xcca <Serial_read_string+0x42>
		//get latest character
		latest = Serial_read(port);
     ca8:	c7 01       	movw	r24, r14
     caa:	ce df       	rcall	.-100    	; 0xc48 <Serial_read>
		if (latest != 0xFF) {
     cac:	8f 3f       	cpi	r24, 0xFF	; 255
     cae:	59 f0       	breq	.+22     	; 0xcc6 <Serial_read_string+0x3e>
     cb0:	f6 01       	movw	r30, r12
     cb2:	ec 0f       	add	r30, r28
     cb4:	fd 1f       	adc	r31, r29
			if (latest == 0x0D) {
     cb6:	8d 30       	cpi	r24, 0x0D	; 13
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <Serial_read_string+0x3a>
				//the input has terminated
				data[i] = 0x00;//null terminate string
     cba:	10 82       	st	Z, r1
				return 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <Serial_read_string+0x46>
			}
			//write the next character into the buffer
			data[i++]=latest;
     cc2:	80 83       	st	Z, r24
     cc4:	21 96       	adiw	r28, 0x01	; 1
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
     cc6:	2f da       	rcall	.-2978   	; 0x126 <x_yield>
     cc8:	ec cf       	rjmp	.-40     	; 0xca2 <Serial_read_string+0x1a>
	}
	//we've used more than the whole array, error
	return 0;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	08 95       	ret

00000ce0 <Serial_write>:

int Serial_write(int port, char data)
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	ec 01       	movw	r28, r24
	if (Q_putc(ports[port].tx_qid, data))
     ce6:	8a e0       	ldi	r24, 0x0A	; 10
     ce8:	8c 9f       	mul	r24, r28
     cea:	f0 01       	movw	r30, r0
     cec:	8d 9f       	mul	r24, r29
     cee:	f0 0d       	add	r31, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	e4 5f       	subi	r30, 0xF4	; 244
     cf4:	fd 4f       	sbci	r31, 0xFD	; 253
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	fb dd       	rcall	.-1034   	; 0x8f0 <Q_putc>
     cfa:	88 23       	and	r24, r24
     cfc:	61 f0       	breq	.+24     	; 0xd16 <Serial_write+0x36>
	{
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line	
		regs[port]->ucsrb |= (1<<UDRIE0); 
     cfe:	cc 0f       	add	r28, r28
     d00:	dd 1f       	adc	r29, r29
     d02:	cc 5f       	subi	r28, 0xFC	; 252
     d04:	dd 4f       	sbci	r29, 0xFD	; 253
     d06:	e8 81       	ld	r30, Y
     d08:	f9 81       	ldd	r31, Y+1	; 0x01
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	80 62       	ori	r24, 0x20	; 32
     d0e:	81 83       	std	Z+1, r24	; 0x01
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;	
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <Serial_write+0x3a>
	}
	return -1;
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	9f ef       	ldi	r25, 0xFF	; 255
	
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <Serial_write_string>:
	{
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	8c 01       	movw	r16, r24
     d2a:	eb 01       	movw	r28, r22
	int i = 0;
	while( data[i] != 0x00) {
     d2c:	69 91       	ld	r22, Y+
     d2e:	66 23       	and	r22, r22
     d30:	19 f0       	breq	.+6      	; 0xd38 <Serial_write_string+0x18>
		Serial_write(port, data[i]);
     d32:	c8 01       	movw	r24, r16
     d34:	d5 df       	rcall	.-86     	; 0xce0 <Serial_write>
     d36:	fa cf       	rjmp	.-12     	; 0xd2c <Serial_write_string+0xc>
		i++;
	}
	return 1;
}
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	0b b6       	in	r0, 0x3b	; 59
     d52:	0f 92       	push	r0
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
     d76:	be 01       	movw	r22, r28
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	80 91 0d 02 	lds	r24, 0x020D
     d80:	fd dd       	rcall	.-1030   	; 0x97c <Q_getc>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <__vector_26+0x48>
	{
		UDR0 = data;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	80 93 c6 00 	sts	0x00C6, r24
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
     d8e:	e0 91 04 02 	lds	r30, 0x0204
     d92:	f0 91 05 02 	lds	r31, 0x0205
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	81 83       	std	Z+1, r24	; 0x01
	}
}
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	7f 91       	pop	r23
     db0:	6f 91       	pop	r22
     db2:	5f 91       	pop	r21
     db4:	4f 91       	pop	r20
     db6:	3f 91       	pop	r19
     db8:	2f 91       	pop	r18
     dba:	0f 90       	pop	r0
     dbc:	0b be       	out	0x3b, r0	; 59
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <__vector_37>:


ISR(USART1_UDRE_vect)
{
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	0b b6       	in	r0, 0x3b	; 59
     dd4:	0f 92       	push	r0
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
     df8:	be 01       	movw	r22, r28
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	80 91 17 02 	lds	r24, 0x0217
     e02:	bc dd       	rcall	.-1160   	; 0x97c <Q_getc>
     e04:	88 23       	and	r24, r24
     e06:	21 f0       	breq	.+8      	; 0xe10 <__vector_37+0x48>
	{
		UDR1 = data;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	80 93 ce 00 	sts	0x00CE, r24
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
     e10:	e0 91 06 02 	lds	r30, 0x0206
     e14:	f0 91 07 02 	lds	r31, 0x0207
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	81 83       	std	Z+1, r24	; 0x01
	}
}
     e1e:	0f 90       	pop	r0
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	ff 91       	pop	r31
     e26:	ef 91       	pop	r30
     e28:	bf 91       	pop	r27
     e2a:	af 91       	pop	r26
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	7f 91       	pop	r23
     e32:	6f 91       	pop	r22
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	0b be       	out	0x3b, r0	; 59
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_52>:

ISR(USART2_UDRE_vect)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	1f 92       	push	r1
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	80 91 21 02 	lds	r24, 0x0221
     e84:	7b dd       	rcall	.-1290   	; 0x97c <Q_getc>
     e86:	88 23       	and	r24, r24
     e88:	21 f0       	breq	.+8      	; 0xe92 <__vector_52+0x48>
	{
		UDR2 = data;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	80 93 d6 00 	sts	0x00D6, r24
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
     e92:	e0 91 08 02 	lds	r30, 0x0208
     e96:	f0 91 09 02 	lds	r31, 0x0209
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	81 83       	std	Z+1, r24	; 0x01
	}
}
     ea0:	0f 90       	pop	r0
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0b be       	out	0x3b, r0	; 59
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <__vector_55>:

ISR(USART3_UDRE_vect)
{
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	0b b6       	in	r0, 0x3b	; 59
     ed8:	0f 92       	push	r0
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	ef 93       	push	r30
     ef0:	ff 93       	push	r31
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	1f 92       	push	r1
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
     efc:	be 01       	movw	r22, r28
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	80 91 2b 02 	lds	r24, 0x022B
     f06:	3a dd       	rcall	.-1420   	; 0x97c <Q_getc>
     f08:	88 23       	and	r24, r24
     f0a:	21 f0       	breq	.+8      	; 0xf14 <__vector_55+0x48>
	{
		UDR3 = data;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	80 93 36 01 	sts	0x0136, r24
     f12:	07 c0       	rjmp	.+14     	; 0xf22 <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
     f14:	e0 91 0a 02 	lds	r30, 0x020A
     f18:	f0 91 0b 02 	lds	r31, 0x020B
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	81 83       	std	Z+1, r24	; 0x01
	}
}
     f22:	0f 90       	pop	r0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0b be       	out	0x3b, r0	; 59
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <__vector_25>:

ISR(USART0_RX_vect)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
     f74:	60 91 c6 00 	lds	r22, 0x00C6
     f78:	80 91 0c 02 	lds	r24, 0x020C
     f7c:	b9 dc       	rcall	.-1678   	; 0x8f0 <Q_putc>
}
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <__vector_36>:

ISR(USART1_RX_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	0b b6       	in	r0, 0x3b	; 59
     fb0:	0f 92       	push	r0
     fb2:	2f 93       	push	r18
     fb4:	3f 93       	push	r19
     fb6:	4f 93       	push	r20
     fb8:	5f 93       	push	r21
     fba:	6f 93       	push	r22
     fbc:	7f 93       	push	r23
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
     fca:	60 91 ce 00 	lds	r22, 0x00CE
     fce:	80 91 16 02 	lds	r24, 0x0216
     fd2:	8e dc       	rcall	.-1764   	; 0x8f0 <Q_putc>
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0b be       	out	0x3b, r0	; 59
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_51>:

ISR(USART2_RX_vect)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	0b b6       	in	r0, 0x3b	; 59
    1006:	0f 92       	push	r0
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
    1020:	60 91 d6 00 	lds	r22, 0x00D6
    1024:	80 91 20 02 	lds	r24, 0x0220
    1028:	63 dc       	rcall	.-1850   	; 0x8f0 <Q_putc>
}
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0b be       	out	0x3b, r0	; 59
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_54>:

ISR(USART3_RX_vect)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	0b b6       	in	r0, 0x3b	; 59
    105c:	0f 92       	push	r0
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
    1076:	60 91 36 01 	lds	r22, 0x0136
    107a:	80 91 2a 02 	lds	r24, 0x022A
    107e:	38 dc       	rcall	.-1936   	; 0x8f0 <Q_putc>
}
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__divmodhi4>:
    10a6:	97 fb       	bst	r25, 7
    10a8:	07 2e       	mov	r0, r23
    10aa:	16 f4       	brtc	.+4      	; 0x10b0 <__divmodhi4+0xa>
    10ac:	00 94       	com	r0
    10ae:	06 d0       	rcall	.+12     	; 0x10bc <__divmodhi4_neg1>
    10b0:	77 fd       	sbrc	r23, 7
    10b2:	08 d0       	rcall	.+16     	; 0x10c4 <__divmodhi4_neg2>
    10b4:	0b d0       	rcall	.+22     	; 0x10cc <__udivmodhi4>
    10b6:	07 fc       	sbrc	r0, 7
    10b8:	05 d0       	rcall	.+10     	; 0x10c4 <__divmodhi4_neg2>
    10ba:	3e f4       	brtc	.+14     	; 0x10ca <__divmodhi4_exit>

000010bc <__divmodhi4_neg1>:
    10bc:	90 95       	com	r25
    10be:	81 95       	neg	r24
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__divmodhi4_neg2>:
    10c4:	70 95       	com	r23
    10c6:	61 95       	neg	r22
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255

000010ca <__divmodhi4_exit>:
    10ca:	08 95       	ret

000010cc <__udivmodhi4>:
    10cc:	aa 1b       	sub	r26, r26
    10ce:	bb 1b       	sub	r27, r27
    10d0:	51 e1       	ldi	r21, 0x11	; 17
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <__udivmodhi4_ep>

000010d4 <__udivmodhi4_loop>:
    10d4:	aa 1f       	adc	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	a6 17       	cp	r26, r22
    10da:	b7 07       	cpc	r27, r23
    10dc:	10 f0       	brcs	.+4      	; 0x10e2 <__udivmodhi4_ep>
    10de:	a6 1b       	sub	r26, r22
    10e0:	b7 0b       	sbc	r27, r23

000010e2 <__udivmodhi4_ep>:
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	5a 95       	dec	r21
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__udivmodhi4_loop>
    10ea:	80 95       	com	r24
    10ec:	90 95       	com	r25
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	08 95       	ret

000010f4 <atoi>:
    10f4:	fc 01       	movw	r30, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	99 27       	eor	r25, r25
    10fa:	e8 94       	clt
    10fc:	21 91       	ld	r18, Z+
    10fe:	20 32       	cpi	r18, 0x20	; 32
    1100:	e9 f3       	breq	.-6      	; 0x10fc <atoi+0x8>
    1102:	29 30       	cpi	r18, 0x09	; 9
    1104:	10 f0       	brcs	.+4      	; 0x110a <atoi+0x16>
    1106:	2e 30       	cpi	r18, 0x0E	; 14
    1108:	c8 f3       	brcs	.-14     	; 0x10fc <atoi+0x8>
    110a:	2b 32       	cpi	r18, 0x2B	; 43
    110c:	39 f0       	breq	.+14     	; 0x111c <atoi+0x28>
    110e:	2d 32       	cpi	r18, 0x2D	; 45
    1110:	31 f4       	brne	.+12     	; 0x111e <atoi+0x2a>
    1112:	68 94       	set
    1114:	03 c0       	rjmp	.+6      	; 0x111c <atoi+0x28>
    1116:	14 d0       	rcall	.+40     	; 0x1140 <__mulhi_const_10>
    1118:	82 0f       	add	r24, r18
    111a:	91 1d       	adc	r25, r1
    111c:	21 91       	ld	r18, Z+
    111e:	20 53       	subi	r18, 0x30	; 48
    1120:	2a 30       	cpi	r18, 0x0A	; 10
    1122:	c8 f3       	brcs	.-14     	; 0x1116 <atoi+0x22>
    1124:	1e f4       	brtc	.+6      	; 0x112c <atoi+0x38>
    1126:	90 95       	com	r25
    1128:	81 95       	neg	r24
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	08 95       	ret

0000112e <strcmp>:
    112e:	fb 01       	movw	r30, r22
    1130:	dc 01       	movw	r26, r24
    1132:	8d 91       	ld	r24, X+
    1134:	01 90       	ld	r0, Z+
    1136:	80 19       	sub	r24, r0
    1138:	01 10       	cpse	r0, r1
    113a:	d9 f3       	breq	.-10     	; 0x1132 <strcmp+0x4>
    113c:	99 0b       	sbc	r25, r25
    113e:	08 95       	ret

00001140 <__mulhi_const_10>:
    1140:	7a e0       	ldi	r23, 0x0A	; 10
    1142:	97 9f       	mul	r25, r23
    1144:	90 2d       	mov	r25, r0
    1146:	87 9f       	mul	r24, r23
    1148:	80 2d       	mov	r24, r0
    114a:	91 0d       	add	r25, r1
    114c:	11 24       	eor	r1, r1
    114e:	08 95       	ret

00001150 <sprintf>:
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2e 97       	sbiw	r28, 0x0e	; 14
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	0e 89       	ldd	r16, Y+22	; 0x16
    116a:	1f 89       	ldd	r17, Y+23	; 0x17
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	8c 83       	std	Y+4, r24	; 0x04
    1170:	1a 83       	std	Y+2, r17	; 0x02
    1172:	09 83       	std	Y+1, r16	; 0x01
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f e7       	ldi	r25, 0x7F	; 127
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	ae 01       	movw	r20, r28
    117e:	46 5e       	subi	r20, 0xE6	; 230
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	68 8d       	ldd	r22, Y+24	; 0x18
    1184:	79 8d       	ldd	r23, Y+25	; 0x19
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	11 d0       	rcall	.+34     	; 0x11ae <vfprintf>
    118c:	2f 81       	ldd	r18, Y+7	; 0x07
    118e:	38 85       	ldd	r19, Y+8	; 0x08
    1190:	f8 01       	movw	r30, r16
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	10 82       	st	Z, r1
    1198:	2e 96       	adiw	r28, 0x0e	; 14
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <vfprintf>:
    11ae:	2f 92       	push	r2
    11b0:	3f 92       	push	r3
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	2c 97       	sbiw	r28, 0x0c	; 12
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	7c 01       	movw	r14, r24
    11e4:	6b 01       	movw	r12, r22
    11e6:	8a 01       	movw	r16, r20
    11e8:	fc 01       	movw	r30, r24
    11ea:	17 82       	std	Z+7, r1	; 0x07
    11ec:	16 82       	std	Z+6, r1	; 0x06
    11ee:	83 81       	ldd	r24, Z+3	; 0x03
    11f0:	81 ff       	sbrs	r24, 1
    11f2:	b0 c1       	rjmp	.+864    	; 0x1554 <vfprintf+0x3a6>
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	4c 01       	movw	r8, r24
    11fa:	f7 01       	movw	r30, r14
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	f6 01       	movw	r30, r12
    1200:	93 fd       	sbrc	r25, 3
    1202:	85 91       	lpm	r24, Z+
    1204:	93 ff       	sbrs	r25, 3
    1206:	81 91       	ld	r24, Z+
    1208:	6f 01       	movw	r12, r30
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <vfprintf+0x62>
    120e:	9e c1       	rjmp	.+828    	; 0x154c <vfprintf+0x39e>
    1210:	85 32       	cpi	r24, 0x25	; 37
    1212:	39 f4       	brne	.+14     	; 0x1222 <vfprintf+0x74>
    1214:	93 fd       	sbrc	r25, 3
    1216:	85 91       	lpm	r24, Z+
    1218:	93 ff       	sbrs	r25, 3
    121a:	81 91       	ld	r24, Z+
    121c:	6f 01       	movw	r12, r30
    121e:	85 32       	cpi	r24, 0x25	; 37
    1220:	21 f4       	brne	.+8      	; 0x122a <vfprintf+0x7c>
    1222:	b7 01       	movw	r22, r14
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	c7 d1       	rcall	.+910    	; 0x15b6 <fputc>
    1228:	e8 cf       	rjmp	.-48     	; 0x11fa <vfprintf+0x4c>
    122a:	51 2c       	mov	r5, r1
    122c:	31 2c       	mov	r3, r1
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	20 32       	cpi	r18, 0x20	; 32
    1232:	a0 f4       	brcc	.+40     	; 0x125c <vfprintf+0xae>
    1234:	8b 32       	cpi	r24, 0x2B	; 43
    1236:	69 f0       	breq	.+26     	; 0x1252 <vfprintf+0xa4>
    1238:	30 f4       	brcc	.+12     	; 0x1246 <vfprintf+0x98>
    123a:	80 32       	cpi	r24, 0x20	; 32
    123c:	59 f0       	breq	.+22     	; 0x1254 <vfprintf+0xa6>
    123e:	83 32       	cpi	r24, 0x23	; 35
    1240:	69 f4       	brne	.+26     	; 0x125c <vfprintf+0xae>
    1242:	20 61       	ori	r18, 0x10	; 16
    1244:	2c c0       	rjmp	.+88     	; 0x129e <vfprintf+0xf0>
    1246:	8d 32       	cpi	r24, 0x2D	; 45
    1248:	39 f0       	breq	.+14     	; 0x1258 <vfprintf+0xaa>
    124a:	80 33       	cpi	r24, 0x30	; 48
    124c:	39 f4       	brne	.+14     	; 0x125c <vfprintf+0xae>
    124e:	21 60       	ori	r18, 0x01	; 1
    1250:	26 c0       	rjmp	.+76     	; 0x129e <vfprintf+0xf0>
    1252:	22 60       	ori	r18, 0x02	; 2
    1254:	24 60       	ori	r18, 0x04	; 4
    1256:	23 c0       	rjmp	.+70     	; 0x129e <vfprintf+0xf0>
    1258:	28 60       	ori	r18, 0x08	; 8
    125a:	21 c0       	rjmp	.+66     	; 0x129e <vfprintf+0xf0>
    125c:	27 fd       	sbrc	r18, 7
    125e:	27 c0       	rjmp	.+78     	; 0x12ae <vfprintf+0x100>
    1260:	30 ed       	ldi	r19, 0xD0	; 208
    1262:	38 0f       	add	r19, r24
    1264:	3a 30       	cpi	r19, 0x0A	; 10
    1266:	78 f4       	brcc	.+30     	; 0x1286 <vfprintf+0xd8>
    1268:	26 ff       	sbrs	r18, 6
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <vfprintf+0xca>
    126c:	fa e0       	ldi	r31, 0x0A	; 10
    126e:	5f 9e       	mul	r5, r31
    1270:	30 0d       	add	r19, r0
    1272:	11 24       	eor	r1, r1
    1274:	53 2e       	mov	r5, r19
    1276:	13 c0       	rjmp	.+38     	; 0x129e <vfprintf+0xf0>
    1278:	8a e0       	ldi	r24, 0x0A	; 10
    127a:	38 9e       	mul	r3, r24
    127c:	30 0d       	add	r19, r0
    127e:	11 24       	eor	r1, r1
    1280:	33 2e       	mov	r3, r19
    1282:	20 62       	ori	r18, 0x20	; 32
    1284:	0c c0       	rjmp	.+24     	; 0x129e <vfprintf+0xf0>
    1286:	8e 32       	cpi	r24, 0x2E	; 46
    1288:	21 f4       	brne	.+8      	; 0x1292 <vfprintf+0xe4>
    128a:	26 fd       	sbrc	r18, 6
    128c:	5f c1       	rjmp	.+702    	; 0x154c <vfprintf+0x39e>
    128e:	20 64       	ori	r18, 0x40	; 64
    1290:	06 c0       	rjmp	.+12     	; 0x129e <vfprintf+0xf0>
    1292:	8c 36       	cpi	r24, 0x6C	; 108
    1294:	11 f4       	brne	.+4      	; 0x129a <vfprintf+0xec>
    1296:	20 68       	ori	r18, 0x80	; 128
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0xf0>
    129a:	88 36       	cpi	r24, 0x68	; 104
    129c:	41 f4       	brne	.+16     	; 0x12ae <vfprintf+0x100>
    129e:	f6 01       	movw	r30, r12
    12a0:	93 fd       	sbrc	r25, 3
    12a2:	85 91       	lpm	r24, Z+
    12a4:	93 ff       	sbrs	r25, 3
    12a6:	81 91       	ld	r24, Z+
    12a8:	6f 01       	movw	r12, r30
    12aa:	81 11       	cpse	r24, r1
    12ac:	c1 cf       	rjmp	.-126    	; 0x1230 <vfprintf+0x82>
    12ae:	98 2f       	mov	r25, r24
    12b0:	9f 7d       	andi	r25, 0xDF	; 223
    12b2:	95 54       	subi	r25, 0x45	; 69
    12b4:	93 30       	cpi	r25, 0x03	; 3
    12b6:	28 f4       	brcc	.+10     	; 0x12c2 <vfprintf+0x114>
    12b8:	0c 5f       	subi	r16, 0xFC	; 252
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	ff e3       	ldi	r31, 0x3F	; 63
    12be:	f9 83       	std	Y+1, r31	; 0x01
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <vfprintf+0x12e>
    12c2:	83 36       	cpi	r24, 0x63	; 99
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <vfprintf+0x124>
    12c6:	83 37       	cpi	r24, 0x73	; 115
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <vfprintf+0x138>
    12ca:	83 35       	cpi	r24, 0x53	; 83
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <vfprintf+0x122>
    12ce:	57 c0       	rjmp	.+174    	; 0x137e <vfprintf+0x1d0>
    12d0:	21 c0       	rjmp	.+66     	; 0x1314 <vfprintf+0x166>
    12d2:	f8 01       	movw	r30, r16
    12d4:	80 81       	ld	r24, Z
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	44 24       	eor	r4, r4
    12de:	43 94       	inc	r4
    12e0:	51 2c       	mov	r5, r1
    12e2:	54 01       	movw	r10, r8
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <vfprintf+0x160>
    12e6:	38 01       	movw	r6, r16
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	6f 0e       	add	r6, r31
    12ec:	71 1c       	adc	r7, r1
    12ee:	f8 01       	movw	r30, r16
    12f0:	a0 80       	ld	r10, Z
    12f2:	b1 80       	ldd	r11, Z+1	; 0x01
    12f4:	26 ff       	sbrs	r18, 6
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x150>
    12f8:	65 2d       	mov	r22, r5
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x154>
    12fe:	6f ef       	ldi	r22, 0xFF	; 255
    1300:	7f ef       	ldi	r23, 0xFF	; 255
    1302:	c5 01       	movw	r24, r10
    1304:	2c 87       	std	Y+12, r18	; 0x0c
    1306:	4c d1       	rcall	.+664    	; 0x15a0 <strnlen>
    1308:	2c 01       	movw	r4, r24
    130a:	83 01       	movw	r16, r6
    130c:	2c 85       	ldd	r18, Y+12	; 0x0c
    130e:	2f 77       	andi	r18, 0x7F	; 127
    1310:	22 2e       	mov	r2, r18
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <vfprintf+0x192>
    1314:	38 01       	movw	r6, r16
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	6f 0e       	add	r6, r31
    131a:	71 1c       	adc	r7, r1
    131c:	f8 01       	movw	r30, r16
    131e:	a0 80       	ld	r10, Z
    1320:	b1 80       	ldd	r11, Z+1	; 0x01
    1322:	26 ff       	sbrs	r18, 6
    1324:	03 c0       	rjmp	.+6      	; 0x132c <vfprintf+0x17e>
    1326:	65 2d       	mov	r22, r5
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <vfprintf+0x182>
    132c:	6f ef       	ldi	r22, 0xFF	; 255
    132e:	7f ef       	ldi	r23, 0xFF	; 255
    1330:	c5 01       	movw	r24, r10
    1332:	2c 87       	std	Y+12, r18	; 0x0c
    1334:	2a d1       	rcall	.+596    	; 0x158a <strnlen_P>
    1336:	2c 01       	movw	r4, r24
    1338:	2c 85       	ldd	r18, Y+12	; 0x0c
    133a:	20 68       	ori	r18, 0x80	; 128
    133c:	22 2e       	mov	r2, r18
    133e:	83 01       	movw	r16, r6
    1340:	23 fc       	sbrc	r2, 3
    1342:	19 c0       	rjmp	.+50     	; 0x1376 <vfprintf+0x1c8>
    1344:	83 2d       	mov	r24, r3
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	48 16       	cp	r4, r24
    134a:	59 06       	cpc	r5, r25
    134c:	a0 f4       	brcc	.+40     	; 0x1376 <vfprintf+0x1c8>
    134e:	b7 01       	movw	r22, r14
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	30 d1       	rcall	.+608    	; 0x15b6 <fputc>
    1356:	3a 94       	dec	r3
    1358:	f5 cf       	rjmp	.-22     	; 0x1344 <vfprintf+0x196>
    135a:	f5 01       	movw	r30, r10
    135c:	27 fc       	sbrc	r2, 7
    135e:	85 91       	lpm	r24, Z+
    1360:	27 fe       	sbrs	r2, 7
    1362:	81 91       	ld	r24, Z+
    1364:	5f 01       	movw	r10, r30
    1366:	b7 01       	movw	r22, r14
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	25 d1       	rcall	.+586    	; 0x15b6 <fputc>
    136c:	31 10       	cpse	r3, r1
    136e:	3a 94       	dec	r3
    1370:	f1 e0       	ldi	r31, 0x01	; 1
    1372:	4f 1a       	sub	r4, r31
    1374:	51 08       	sbc	r5, r1
    1376:	41 14       	cp	r4, r1
    1378:	51 04       	cpc	r5, r1
    137a:	79 f7       	brne	.-34     	; 0x135a <vfprintf+0x1ac>
    137c:	de c0       	rjmp	.+444    	; 0x153a <vfprintf+0x38c>
    137e:	84 36       	cpi	r24, 0x64	; 100
    1380:	11 f0       	breq	.+4      	; 0x1386 <vfprintf+0x1d8>
    1382:	89 36       	cpi	r24, 0x69	; 105
    1384:	31 f5       	brne	.+76     	; 0x13d2 <vfprintf+0x224>
    1386:	f8 01       	movw	r30, r16
    1388:	27 ff       	sbrs	r18, 7
    138a:	07 c0       	rjmp	.+14     	; 0x139a <vfprintf+0x1ec>
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	0c 5f       	subi	r16, 0xFC	; 252
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <vfprintf+0x1fc>
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	07 2e       	mov	r0, r23
    13a0:	00 0c       	add	r0, r0
    13a2:	88 0b       	sbc	r24, r24
    13a4:	99 0b       	sbc	r25, r25
    13a6:	0e 5f       	subi	r16, 0xFE	; 254
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	2f 76       	andi	r18, 0x6F	; 111
    13ac:	72 2e       	mov	r7, r18
    13ae:	97 ff       	sbrs	r25, 7
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <vfprintf+0x216>
    13b2:	90 95       	com	r25
    13b4:	80 95       	com	r24
    13b6:	70 95       	com	r23
    13b8:	61 95       	neg	r22
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	20 68       	ori	r18, 0x80	; 128
    13c2:	72 2e       	mov	r7, r18
    13c4:	2a e0       	ldi	r18, 0x0A	; 10
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a4 01       	movw	r20, r8
    13ca:	2d d1       	rcall	.+602    	; 0x1626 <__ultoa_invert>
    13cc:	a8 2e       	mov	r10, r24
    13ce:	a8 18       	sub	r10, r8
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <vfprintf+0x2aa>
    13d2:	85 37       	cpi	r24, 0x75	; 117
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <vfprintf+0x232>
    13d6:	2f 7e       	andi	r18, 0xEF	; 239
    13d8:	b2 2e       	mov	r11, r18
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	25 c0       	rjmp	.+74     	; 0x142a <vfprintf+0x27c>
    13e0:	f2 2f       	mov	r31, r18
    13e2:	f9 7f       	andi	r31, 0xF9	; 249
    13e4:	bf 2e       	mov	r11, r31
    13e6:	8f 36       	cpi	r24, 0x6F	; 111
    13e8:	c1 f0       	breq	.+48     	; 0x141a <vfprintf+0x26c>
    13ea:	18 f4       	brcc	.+6      	; 0x13f2 <vfprintf+0x244>
    13ec:	88 35       	cpi	r24, 0x58	; 88
    13ee:	79 f0       	breq	.+30     	; 0x140e <vfprintf+0x260>
    13f0:	ad c0       	rjmp	.+346    	; 0x154c <vfprintf+0x39e>
    13f2:	80 37       	cpi	r24, 0x70	; 112
    13f4:	19 f0       	breq	.+6      	; 0x13fc <vfprintf+0x24e>
    13f6:	88 37       	cpi	r24, 0x78	; 120
    13f8:	21 f0       	breq	.+8      	; 0x1402 <vfprintf+0x254>
    13fa:	a8 c0       	rjmp	.+336    	; 0x154c <vfprintf+0x39e>
    13fc:	2f 2f       	mov	r18, r31
    13fe:	20 61       	ori	r18, 0x10	; 16
    1400:	b2 2e       	mov	r11, r18
    1402:	b4 fe       	sbrs	r11, 4
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <vfprintf+0x272>
    1406:	8b 2d       	mov	r24, r11
    1408:	84 60       	ori	r24, 0x04	; 4
    140a:	b8 2e       	mov	r11, r24
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <vfprintf+0x272>
    140e:	24 ff       	sbrs	r18, 4
    1410:	0a c0       	rjmp	.+20     	; 0x1426 <vfprintf+0x278>
    1412:	9f 2f       	mov	r25, r31
    1414:	96 60       	ori	r25, 0x06	; 6
    1416:	b9 2e       	mov	r11, r25
    1418:	06 c0       	rjmp	.+12     	; 0x1426 <vfprintf+0x278>
    141a:	28 e0       	ldi	r18, 0x08	; 8
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <vfprintf+0x27c>
    1420:	20 e1       	ldi	r18, 0x10	; 16
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x27c>
    1426:	20 e1       	ldi	r18, 0x10	; 16
    1428:	32 e0       	ldi	r19, 0x02	; 2
    142a:	f8 01       	movw	r30, r16
    142c:	b7 fe       	sbrs	r11, 7
    142e:	07 c0       	rjmp	.+14     	; 0x143e <vfprintf+0x290>
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0c 5f       	subi	r16, 0xFC	; 252
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	06 c0       	rjmp	.+12     	; 0x144a <vfprintf+0x29c>
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 5f       	subi	r16, 0xFE	; 254
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	a4 01       	movw	r20, r8
    144c:	ec d0       	rcall	.+472    	; 0x1626 <__ultoa_invert>
    144e:	a8 2e       	mov	r10, r24
    1450:	a8 18       	sub	r10, r8
    1452:	fb 2d       	mov	r31, r11
    1454:	ff 77       	andi	r31, 0x7F	; 127
    1456:	7f 2e       	mov	r7, r31
    1458:	76 fe       	sbrs	r7, 6
    145a:	0b c0       	rjmp	.+22     	; 0x1472 <vfprintf+0x2c4>
    145c:	37 2d       	mov	r19, r7
    145e:	3e 7f       	andi	r19, 0xFE	; 254
    1460:	a5 14       	cp	r10, r5
    1462:	50 f4       	brcc	.+20     	; 0x1478 <vfprintf+0x2ca>
    1464:	74 fe       	sbrs	r7, 4
    1466:	0a c0       	rjmp	.+20     	; 0x147c <vfprintf+0x2ce>
    1468:	72 fc       	sbrc	r7, 2
    146a:	08 c0       	rjmp	.+16     	; 0x147c <vfprintf+0x2ce>
    146c:	37 2d       	mov	r19, r7
    146e:	3e 7e       	andi	r19, 0xEE	; 238
    1470:	05 c0       	rjmp	.+10     	; 0x147c <vfprintf+0x2ce>
    1472:	ba 2c       	mov	r11, r10
    1474:	37 2d       	mov	r19, r7
    1476:	03 c0       	rjmp	.+6      	; 0x147e <vfprintf+0x2d0>
    1478:	ba 2c       	mov	r11, r10
    147a:	01 c0       	rjmp	.+2      	; 0x147e <vfprintf+0x2d0>
    147c:	b5 2c       	mov	r11, r5
    147e:	34 ff       	sbrs	r19, 4
    1480:	0d c0       	rjmp	.+26     	; 0x149c <vfprintf+0x2ee>
    1482:	fe 01       	movw	r30, r28
    1484:	ea 0d       	add	r30, r10
    1486:	f1 1d       	adc	r31, r1
    1488:	80 81       	ld	r24, Z
    148a:	80 33       	cpi	r24, 0x30	; 48
    148c:	11 f4       	brne	.+4      	; 0x1492 <vfprintf+0x2e4>
    148e:	39 7e       	andi	r19, 0xE9	; 233
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x2f6>
    1492:	32 ff       	sbrs	r19, 2
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <vfprintf+0x2f4>
    1496:	b3 94       	inc	r11
    1498:	b3 94       	inc	r11
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <vfprintf+0x2f6>
    149c:	83 2f       	mov	r24, r19
    149e:	86 78       	andi	r24, 0x86	; 134
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <vfprintf+0x2f6>
    14a2:	b3 94       	inc	r11
    14a4:	33 fd       	sbrc	r19, 3
    14a6:	12 c0       	rjmp	.+36     	; 0x14cc <vfprintf+0x31e>
    14a8:	30 ff       	sbrs	r19, 0
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0x30a>
    14ac:	5a 2c       	mov	r5, r10
    14ae:	b3 14       	cp	r11, r3
    14b0:	18 f4       	brcc	.+6      	; 0x14b8 <vfprintf+0x30a>
    14b2:	53 0c       	add	r5, r3
    14b4:	5b 18       	sub	r5, r11
    14b6:	b3 2c       	mov	r11, r3
    14b8:	b3 14       	cp	r11, r3
    14ba:	60 f4       	brcc	.+24     	; 0x14d4 <vfprintf+0x326>
    14bc:	b7 01       	movw	r22, r14
    14be:	80 e2       	ldi	r24, 0x20	; 32
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	3c 87       	std	Y+12, r19	; 0x0c
    14c4:	78 d0       	rcall	.+240    	; 0x15b6 <fputc>
    14c6:	b3 94       	inc	r11
    14c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ca:	f6 cf       	rjmp	.-20     	; 0x14b8 <vfprintf+0x30a>
    14cc:	b3 14       	cp	r11, r3
    14ce:	10 f4       	brcc	.+4      	; 0x14d4 <vfprintf+0x326>
    14d0:	3b 18       	sub	r3, r11
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <vfprintf+0x328>
    14d4:	31 2c       	mov	r3, r1
    14d6:	34 ff       	sbrs	r19, 4
    14d8:	11 c0       	rjmp	.+34     	; 0x14fc <vfprintf+0x34e>
    14da:	b7 01       	movw	r22, r14
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	3c 87       	std	Y+12, r19	; 0x0c
    14e2:	69 d0       	rcall	.+210    	; 0x15b6 <fputc>
    14e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    14e6:	32 ff       	sbrs	r19, 2
    14e8:	16 c0       	rjmp	.+44     	; 0x1516 <vfprintf+0x368>
    14ea:	31 fd       	sbrc	r19, 1
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <vfprintf+0x346>
    14ee:	88 e7       	ldi	r24, 0x78	; 120
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x34a>
    14f4:	88 e5       	ldi	r24, 0x58	; 88
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	b7 01       	movw	r22, r14
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <vfprintf+0x366>
    14fc:	83 2f       	mov	r24, r19
    14fe:	86 78       	andi	r24, 0x86	; 134
    1500:	51 f0       	breq	.+20     	; 0x1516 <vfprintf+0x368>
    1502:	31 ff       	sbrs	r19, 1
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0x35c>
    1506:	8b e2       	ldi	r24, 0x2B	; 43
    1508:	01 c0       	rjmp	.+2      	; 0x150c <vfprintf+0x35e>
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	37 fd       	sbrc	r19, 7
    150e:	8d e2       	ldi	r24, 0x2D	; 45
    1510:	b7 01       	movw	r22, r14
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	50 d0       	rcall	.+160    	; 0x15b6 <fputc>
    1516:	a5 14       	cp	r10, r5
    1518:	30 f4       	brcc	.+12     	; 0x1526 <vfprintf+0x378>
    151a:	b7 01       	movw	r22, r14
    151c:	80 e3       	ldi	r24, 0x30	; 48
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	4a d0       	rcall	.+148    	; 0x15b6 <fputc>
    1522:	5a 94       	dec	r5
    1524:	f8 cf       	rjmp	.-16     	; 0x1516 <vfprintf+0x368>
    1526:	aa 94       	dec	r10
    1528:	f4 01       	movw	r30, r8
    152a:	ea 0d       	add	r30, r10
    152c:	f1 1d       	adc	r31, r1
    152e:	80 81       	ld	r24, Z
    1530:	b7 01       	movw	r22, r14
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	40 d0       	rcall	.+128    	; 0x15b6 <fputc>
    1536:	a1 10       	cpse	r10, r1
    1538:	f6 cf       	rjmp	.-20     	; 0x1526 <vfprintf+0x378>
    153a:	33 20       	and	r3, r3
    153c:	09 f4       	brne	.+2      	; 0x1540 <vfprintf+0x392>
    153e:	5d ce       	rjmp	.-838    	; 0x11fa <vfprintf+0x4c>
    1540:	b7 01       	movw	r22, r14
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	37 d0       	rcall	.+110    	; 0x15b6 <fputc>
    1548:	3a 94       	dec	r3
    154a:	f7 cf       	rjmp	.-18     	; 0x153a <vfprintf+0x38c>
    154c:	f7 01       	movw	r30, r14
    154e:	86 81       	ldd	r24, Z+6	; 0x06
    1550:	97 81       	ldd	r25, Z+7	; 0x07
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x3aa>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	2c 96       	adiw	r28, 0x0c	; 12
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <strnlen_P>:
    158a:	fc 01       	movw	r30, r24
    158c:	05 90       	lpm	r0, Z+
    158e:	61 50       	subi	r22, 0x01	; 1
    1590:	70 40       	sbci	r23, 0x00	; 0
    1592:	01 10       	cpse	r0, r1
    1594:	d8 f7       	brcc	.-10     	; 0x158c <strnlen_P+0x2>
    1596:	80 95       	com	r24
    1598:	90 95       	com	r25
    159a:	8e 0f       	add	r24, r30
    159c:	9f 1f       	adc	r25, r31
    159e:	08 95       	ret

000015a0 <strnlen>:
    15a0:	fc 01       	movw	r30, r24
    15a2:	61 50       	subi	r22, 0x01	; 1
    15a4:	70 40       	sbci	r23, 0x00	; 0
    15a6:	01 90       	ld	r0, Z+
    15a8:	01 10       	cpse	r0, r1
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <strnlen+0x2>
    15ac:	80 95       	com	r24
    15ae:	90 95       	com	r25
    15b0:	8e 0f       	add	r24, r30
    15b2:	9f 1f       	adc	r25, r31
    15b4:	08 95       	ret

000015b6 <fputc>:
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	fb 01       	movw	r30, r22
    15c0:	23 81       	ldd	r18, Z+3	; 0x03
    15c2:	21 fd       	sbrc	r18, 1
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <fputc+0x16>
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	28 c0       	rjmp	.+80     	; 0x161c <fputc+0x66>
    15cc:	22 ff       	sbrs	r18, 2
    15ce:	16 c0       	rjmp	.+44     	; 0x15fc <fputc+0x46>
    15d0:	46 81       	ldd	r20, Z+6	; 0x06
    15d2:	57 81       	ldd	r21, Z+7	; 0x07
    15d4:	24 81       	ldd	r18, Z+4	; 0x04
    15d6:	35 81       	ldd	r19, Z+5	; 0x05
    15d8:	42 17       	cp	r20, r18
    15da:	53 07       	cpc	r21, r19
    15dc:	44 f4       	brge	.+16     	; 0x15ee <fputc+0x38>
    15de:	a0 81       	ld	r26, Z
    15e0:	b1 81       	ldd	r27, Z+1	; 0x01
    15e2:	9d 01       	movw	r18, r26
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	31 83       	std	Z+1, r19	; 0x01
    15ea:	20 83       	st	Z, r18
    15ec:	8c 93       	st	X, r24
    15ee:	26 81       	ldd	r18, Z+6	; 0x06
    15f0:	37 81       	ldd	r19, Z+7	; 0x07
    15f2:	2f 5f       	subi	r18, 0xFF	; 255
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	37 83       	std	Z+7, r19	; 0x07
    15f8:	26 83       	std	Z+6, r18	; 0x06
    15fa:	10 c0       	rjmp	.+32     	; 0x161c <fputc+0x66>
    15fc:	eb 01       	movw	r28, r22
    15fe:	09 2f       	mov	r16, r25
    1600:	18 2f       	mov	r17, r24
    1602:	00 84       	ldd	r0, Z+8	; 0x08
    1604:	f1 85       	ldd	r31, Z+9	; 0x09
    1606:	e0 2d       	mov	r30, r0
    1608:	19 95       	eicall
    160a:	89 2b       	or	r24, r25
    160c:	e1 f6       	brne	.-72     	; 0x15c6 <fputc+0x10>
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	9f 81       	ldd	r25, Y+7	; 0x07
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	9f 83       	std	Y+7, r25	; 0x07
    1616:	8e 83       	std	Y+6, r24	; 0x06
    1618:	81 2f       	mov	r24, r17
    161a:	90 2f       	mov	r25, r16
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	08 95       	ret

00001626 <__ultoa_invert>:
    1626:	fa 01       	movw	r30, r20
    1628:	aa 27       	eor	r26, r26
    162a:	28 30       	cpi	r18, 0x08	; 8
    162c:	51 f1       	breq	.+84     	; 0x1682 <__ultoa_invert+0x5c>
    162e:	20 31       	cpi	r18, 0x10	; 16
    1630:	81 f1       	breq	.+96     	; 0x1692 <__ultoa_invert+0x6c>
    1632:	e8 94       	clt
    1634:	6f 93       	push	r22
    1636:	6e 7f       	andi	r22, 0xFE	; 254
    1638:	6e 5f       	subi	r22, 0xFE	; 254
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	af 4f       	sbci	r26, 0xFF	; 255
    1642:	b1 e0       	ldi	r27, 0x01	; 1
    1644:	3e d0       	rcall	.+124    	; 0x16c2 <__ultoa_invert+0x9c>
    1646:	b4 e0       	ldi	r27, 0x04	; 4
    1648:	3c d0       	rcall	.+120    	; 0x16c2 <__ultoa_invert+0x9c>
    164a:	67 0f       	add	r22, r23
    164c:	78 1f       	adc	r23, r24
    164e:	89 1f       	adc	r24, r25
    1650:	9a 1f       	adc	r25, r26
    1652:	a1 1d       	adc	r26, r1
    1654:	68 0f       	add	r22, r24
    1656:	79 1f       	adc	r23, r25
    1658:	8a 1f       	adc	r24, r26
    165a:	91 1d       	adc	r25, r1
    165c:	a1 1d       	adc	r26, r1
    165e:	6a 0f       	add	r22, r26
    1660:	71 1d       	adc	r23, r1
    1662:	81 1d       	adc	r24, r1
    1664:	91 1d       	adc	r25, r1
    1666:	a1 1d       	adc	r26, r1
    1668:	20 d0       	rcall	.+64     	; 0x16aa <__ultoa_invert+0x84>
    166a:	09 f4       	brne	.+2      	; 0x166e <__ultoa_invert+0x48>
    166c:	68 94       	set
    166e:	3f 91       	pop	r19
    1670:	2a e0       	ldi	r18, 0x0A	; 10
    1672:	26 9f       	mul	r18, r22
    1674:	11 24       	eor	r1, r1
    1676:	30 19       	sub	r19, r0
    1678:	30 5d       	subi	r19, 0xD0	; 208
    167a:	31 93       	st	Z+, r19
    167c:	de f6       	brtc	.-74     	; 0x1634 <__ultoa_invert+0xe>
    167e:	cf 01       	movw	r24, r30
    1680:	08 95       	ret
    1682:	46 2f       	mov	r20, r22
    1684:	47 70       	andi	r20, 0x07	; 7
    1686:	40 5d       	subi	r20, 0xD0	; 208
    1688:	41 93       	st	Z+, r20
    168a:	b3 e0       	ldi	r27, 0x03	; 3
    168c:	0f d0       	rcall	.+30     	; 0x16ac <__ultoa_invert+0x86>
    168e:	c9 f7       	brne	.-14     	; 0x1682 <__ultoa_invert+0x5c>
    1690:	f6 cf       	rjmp	.-20     	; 0x167e <__ultoa_invert+0x58>
    1692:	46 2f       	mov	r20, r22
    1694:	4f 70       	andi	r20, 0x0F	; 15
    1696:	40 5d       	subi	r20, 0xD0	; 208
    1698:	4a 33       	cpi	r20, 0x3A	; 58
    169a:	18 f0       	brcs	.+6      	; 0x16a2 <__ultoa_invert+0x7c>
    169c:	49 5d       	subi	r20, 0xD9	; 217
    169e:	31 fd       	sbrc	r19, 1
    16a0:	40 52       	subi	r20, 0x20	; 32
    16a2:	41 93       	st	Z+, r20
    16a4:	02 d0       	rcall	.+4      	; 0x16aa <__ultoa_invert+0x84>
    16a6:	a9 f7       	brne	.-22     	; 0x1692 <__ultoa_invert+0x6c>
    16a8:	ea cf       	rjmp	.-44     	; 0x167e <__ultoa_invert+0x58>
    16aa:	b4 e0       	ldi	r27, 0x04	; 4
    16ac:	a6 95       	lsr	r26
    16ae:	97 95       	ror	r25
    16b0:	87 95       	ror	r24
    16b2:	77 95       	ror	r23
    16b4:	67 95       	ror	r22
    16b6:	ba 95       	dec	r27
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <__ultoa_invert+0x86>
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 05       	cpc	r22, r1
    16be:	71 05       	cpc	r23, r1
    16c0:	08 95       	ret
    16c2:	9b 01       	movw	r18, r22
    16c4:	ac 01       	movw	r20, r24
    16c6:	0a 2e       	mov	r0, r26
    16c8:	06 94       	lsr	r0
    16ca:	57 95       	ror	r21
    16cc:	47 95       	ror	r20
    16ce:	37 95       	ror	r19
    16d0:	27 95       	ror	r18
    16d2:	ba 95       	dec	r27
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <__ultoa_invert+0xa2>
    16d6:	62 0f       	add	r22, r18
    16d8:	73 1f       	adc	r23, r19
    16da:	84 1f       	adc	r24, r20
    16dc:	95 1f       	adc	r25, r21
    16de:	a0 1d       	adc	r26, r0
    16e0:	08 95       	ret

000016e2 <_exit>:
    16e2:	f8 94       	cli

000016e4 <__stop_program>:
    16e4:	ff cf       	rjmp	.-2      	; 0x16e4 <__stop_program>
