
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800200  00001762  000017f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a87  00800452  00800452  00001a48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4b  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5f  00000000  00000000  00003953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bd  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  00005870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  00005fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d8  00000000  00000000  0000662b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c1       	rjmp	.+880    	; 0x3c6 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c7       	rjmp	.+3940   	; 0xfca <__vector_25>
      66:	00 00       	nop
      68:	ac c6       	rjmp	.+3416   	; 0xdc2 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c7       	rjmp	.+3982   	; 0x1020 <__vector_36>
      92:	00 00       	nop
      94:	d7 c6       	rjmp	.+3502   	; 0xe44 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c7       	rjmp	.+4008   	; 0x1076 <__vector_51>
      ce:	00 00       	nop
      d0:	fa c6       	rjmp	.+3572   	; 0xec6 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f9 c7       	rjmp	.+4082   	; 0x10cc <__vector_54>
      da:	00 00       	nop
      dc:	35 c7       	rjmp	.+3690   	; 0xf48 <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e6       	ldi	r30, 0x62	; 98
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 35       	cpi	r26, 0x52	; 82
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	a2 e5       	ldi	r26, 0x52	; 82
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 3d       	cpi	r26, 0xD9	; 217
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	13 d4       	rcall	.+2086   	; 0x946 <main>
     120:	0c 94 af 0b 	jmp	0x175e	; 0x175e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
     126:	2f 92       	push	r2
		push  r3
     128:	3f 92       	push	r3
		push  r4
     12a:	4f 92       	push	r4
		push  r5
     12c:	5f 92       	push	r5
		push  r6
     12e:	6f 92       	push	r6
		push  r7
     130:	7f 92       	push	r7
		push  r8
     132:	8f 92       	push	r8
		push  r9
     134:	9f 92       	push	r9
		push  r10
     136:	af 92       	push	r10
		push  r11
     138:	bf 92       	push	r11
		push  r12
     13a:	cf 92       	push	r12
		push  r13
     13c:	df 92       	push	r13
		push  r14
     13e:	ef 92       	push	r14
		push  r15
     140:	ff 92       	push	r15
		push  r16
     142:	0f 93       	push	r16
		push  r17
     144:	1f 93       	push	r17
		push  r28
     146:	cf 93       	push	r28
		push  r29
     148:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
     14a:	20 91 5f 04 	lds	r18, 0x045F
		lds   r19,x_thread_mask
     14e:	30 91 93 0c 	lds	r19, 0x0C93

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
     152:	f8 94       	cli
		in		r14,SPL
     154:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
     156:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
     158:	78 94       	sei


		ldi		r30,lo8(stack)
     15a:	e1 e6       	ldi	r30, 0x61	; 97
		ldi		r31,hi8(stack)
     15c:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r18
     15e:	22 0f       	add	r18, r18
		lsl		r18
     160:	22 0f       	add	r18, r18
		add		r30,r18
     162:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
     164:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
     166:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
     168:	f0 82       	st	Z, r15

0000016a <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
     16a:	20 91 92 0c 	lds	r18, 0x0C92
		lds		r19,x_delay_status
     16e:	30 91 60 04 	lds	r19, 0x0460
		lds		r20,x_suspend_status
     172:	40 91 81 04 	lds	r20, 0x0481
		or		r18,r19
     176:	23 2b       	or	r18, r19
		or		r18,r20
     178:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
     17a:	30 91 5f 04 	lds	r19, 0x045F
		lds		r20, x_thread_mask
     17e:	40 91 93 0c 	lds	r20, 0x0C93
		ldi		r22,NUM_THREADS		;max number of threads
     182:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
     184:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
     186:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
     188:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
     18a:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
     18c:	08 f4       	brcc	.+2      	; 0x190 <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
     18e:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
     190:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
     192:	42 23       	and	r20, r18
		breq	restore				;break out if READY
     194:	19 f0       	breq	.+6      	; 0x19c <restore>
		dec		r22					;decrement thread count
     196:	6a 95       	dec	r22
		brne	1b					;back to test next thread
     198:	b1 f7       	brne	.-20     	; 0x186 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <x_schedule>

0000019c <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
     19c:	30 93 5f 04 	sts	0x045F, r19
		sts		x_thread_mask,r23
     1a0:	70 93 93 0c 	sts	0x0C93, r23

		ldi		r30,lo8(stack)
     1a4:	e1 e6       	ldi	r30, 0x61	; 97
		ldi		r31,hi8(stack)
     1a6:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r19
     1a8:	33 0f       	add	r19, r19
		lsl		r19
     1aa:	33 0f       	add	r19, r19
		add		r30,r19
     1ac:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
     1ae:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
     1b0:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
     1b2:	30 81       	ld	r19, Z
		
		cli
     1b4:	f8 94       	cli
		out		SPL,r18		;restore SP
     1b6:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
     1b8:	3e bf       	out	0x3e, r19	; 62
		sei
     1ba:	78 94       	sei


		// Restore registers
		pop		r29
     1bc:	df 91       	pop	r29
		pop		r28
     1be:	cf 91       	pop	r28
		pop		r17
     1c0:	1f 91       	pop	r17
		pop		r16
     1c2:	0f 91       	pop	r16
		pop		r15
     1c4:	ff 90       	pop	r15
		pop		r14
     1c6:	ef 90       	pop	r14
		pop		r13
     1c8:	df 90       	pop	r13
		pop		r12
     1ca:	cf 90       	pop	r12
		pop		r11
     1cc:	bf 90       	pop	r11
		pop		r10
     1ce:	af 90       	pop	r10
		pop		r9
     1d0:	9f 90       	pop	r9
		pop		r8
     1d2:	8f 90       	pop	r8
		pop		r7
     1d4:	7f 90       	pop	r7
		pop		r6
     1d6:	6f 90       	pop	r6
		pop		r5
     1d8:	5f 90       	pop	r5
		pop		r4
     1da:	4f 90       	pop	r4
		pop		r3
     1dc:	3f 90       	pop	r3
		pop		r2
     1de:	2f 90       	pop	r2

		// Return to next thread
		ret
     1e0:	08 95       	ret

000001e2 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
		ldi r31,hi8(bitmask8_table)
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
     1e6:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
     1e8:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
     1ea:	84 91       	lpm	r24, Z
		ret
     1ec:	08 95       	ret

000001ee <bitmask8_table>:
     1ee:	01 02       	muls	r16, r17
     1f0:	04 08       	sbc	r0, r4
     1f2:	10 20       	and	r1, r0
     1f4:	40 80       	ld	r4, Z

000001f6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
     1f6:	68 2f       	mov	r22, r24
		or  r22,r25
     1f8:	69 2b       	or	r22, r25
		nop
     1fa:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
     1fc:	31 f0       	breq	.+12     	; 0x20a <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
     1fe:	05 d0       	rcall	.+10     	; 0x20a <delay_usec+0x14>
		rjmp	3f      // 2 cycles
     200:	00 c0       	rjmp	.+0      	; 0x202 <delay_usec+0xc>
3:	
		nop		// 1 cycle
     202:	00 00       	nop
		sbiw	r24,1   // 2 cycles
     204:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
     206:	d9 f7       	brne	.-10     	; 0x1fe <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
     208:	00 00       	nop
1:
     20a:	08 95       	ret

0000020c <x_new>:
   long val;
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
      val = x_system_counter;
   }
   return val;
}
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	18 2f       	mov	r17, r24
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	dc 01       	movw	r26, r24
     222:	aa 0f       	add	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	aa 0f       	add	r26, r26
     228:	bb 1f       	adc	r27, r27
     22a:	9d 01       	movw	r18, r26
     22c:	2f 59       	subi	r18, 0x9F	; 159
     22e:	3b 4f       	sbci	r19, 0xFB	; 251
     230:	79 01       	movw	r14, r18
     232:	d9 01       	movw	r26, r18
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	60 83       	st	Z, r22
     23e:	9f 01       	movw	r18, r30
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	d9 01       	movw	r26, r18
     246:	7c 93       	st	X, r23
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	31 09       	sbc	r19, r1
     24c:	d9 01       	movw	r26, r18
     24e:	1c 92       	st	X, r1
     250:	75 97       	sbiw	r30, 0x15	; 21
     252:	d7 01       	movw	r26, r14
     254:	ed 93       	st	X+, r30
     256:	fc 93       	st	X, r31
     258:	49 83       	std	Y+1, r20	; 0x01
     25a:	c3 df       	rcall	.-122    	; 0x1e2 <bit2mask8>
     25c:	98 2f       	mov	r25, r24
     25e:	80 91 92 0c 	lds	r24, 0x0C92
     262:	49 81       	ldd	r20, Y+1	; 0x01
     264:	44 23       	and	r20, r20
     266:	29 f0       	breq	.+10     	; 0x272 <x_new+0x66>
     268:	29 2f       	mov	r18, r25
     26a:	20 95       	com	r18
     26c:	98 2f       	mov	r25, r24
     26e:	92 23       	and	r25, r18
     270:	01 c0       	rjmp	.+2      	; 0x274 <x_new+0x68>
     272:	98 2b       	or	r25, r24
     274:	90 93 92 0c 	sts	0x0C92, r25
     278:	80 91 5f 04 	lds	r24, 0x045F
     27c:	18 13       	cpse	r17, r24
     27e:	07 c0       	rjmp	.+14     	; 0x28e <x_new+0x82>
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	6e cf       	rjmp	.-292    	; 0x16a <x_schedule>
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	08 95       	ret

0000029c <init_System_Timer>:
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	84 bd       	out	0x24, r24	; 36
     2a0:	9a ef       	ldi	r25, 0xFA	; 250
     2a2:	97 bd       	out	0x27, r25	; 39
     2a4:	80 93 6e 00 	sts	0x006E, r24
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	85 bd       	out	0x25, r24	; 37
     2ac:	08 95       	ret

000002ae <x_init>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	f8 94       	cli
     2b4:	8e ef       	ldi	r24, 0xFE	; 254
     2b6:	80 93 92 0c 	sts	0x0C92, r24
     2ba:	10 92 81 04 	sts	0x0481, r1
     2be:	10 92 60 04 	sts	0x0460, r1
     2c2:	10 92 5f 04 	sts	0x045F, r1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 93 0c 	sts	0x0C93, r24
     2cc:	c1 e6       	ldi	r28, 0x61	; 97
     2ce:	d4 e0       	ldi	r29, 0x04	; 4
     2d0:	81 e8       	ldi	r24, 0x81	; 129
     2d2:	95 e0       	ldi	r25, 0x05	; 5
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
     2dc:	81 e8       	ldi	r24, 0x81	; 129
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	9d 83       	std	Y+5, r25	; 0x05
     2e2:	8c 83       	std	Y+4, r24	; 0x04
     2e4:	9f 83       	std	Y+7, r25	; 0x07
     2e6:	8e 83       	std	Y+6, r24	; 0x06
     2e8:	81 e8       	ldi	r24, 0x81	; 129
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	99 87       	std	Y+9, r25	; 0x09
     2ee:	88 87       	std	Y+8, r24	; 0x08
     2f0:	9b 87       	std	Y+11, r25	; 0x0b
     2f2:	8a 87       	std	Y+10, r24	; 0x0a
     2f4:	81 e8       	ldi	r24, 0x81	; 129
     2f6:	98 e0       	ldi	r25, 0x08	; 8
     2f8:	9d 87       	std	Y+13, r25	; 0x0d
     2fa:	8c 87       	std	Y+12, r24	; 0x0c
     2fc:	9f 87       	std	Y+15, r25	; 0x0f
     2fe:	8e 87       	std	Y+14, r24	; 0x0e
     300:	81 e8       	ldi	r24, 0x81	; 129
     302:	99 e0       	ldi	r25, 0x09	; 9
     304:	99 8b       	std	Y+17, r25	; 0x11
     306:	88 8b       	std	Y+16, r24	; 0x10
     308:	9b 8b       	std	Y+19, r25	; 0x13
     30a:	8a 8b       	std	Y+18, r24	; 0x12
     30c:	81 e8       	ldi	r24, 0x81	; 129
     30e:	9a e0       	ldi	r25, 0x0A	; 10
     310:	9d 8b       	std	Y+21, r25	; 0x15
     312:	8c 8b       	std	Y+20, r24	; 0x14
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	81 e8       	ldi	r24, 0x81	; 129
     31a:	9b e0       	ldi	r25, 0x0B	; 11
     31c:	99 8f       	std	Y+25, r25	; 0x19
     31e:	88 8f       	std	Y+24, r24	; 0x18
     320:	9b 8f       	std	Y+27, r25	; 0x1b
     322:	8a 8f       	std	Y+26, r24	; 0x1a
     324:	81 e8       	ldi	r24, 0x81	; 129
     326:	9c e0       	ldi	r25, 0x0C	; 12
     328:	9d 8f       	std	Y+29, r25	; 0x1d
     32a:	8c 8f       	std	Y+28, r24	; 0x1c
     32c:	9f 8f       	std	Y+31, r25	; 0x1f
     32e:	8e 8f       	std	Y+30, r24	; 0x1e
     330:	8a ea       	ldi	r24, 0xAA	; 170
     332:	80 93 82 04 	sts	0x0482, r24
     336:	80 93 82 05 	sts	0x0582, r24
     33a:	80 93 82 06 	sts	0x0682, r24
     33e:	80 93 82 07 	sts	0x0782, r24
     342:	80 93 82 08 	sts	0x0882, r24
     346:	80 93 82 09 	sts	0x0982, r24
     34a:	80 93 82 0a 	sts	0x0A82, r24
     34e:	80 93 82 0b 	sts	0x0B82, r24
     352:	a4 df       	rcall	.-184    	; 0x29c <init_System_Timer>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	a8 81       	ld	r26, Y
     35a:	b9 81       	ldd	r27, Y+1	; 0x01
     35c:	85 81       	ldd	r24, Z+5	; 0x05
     35e:	8c 93       	st	X, r24
     360:	a8 81       	ld	r26, Y
     362:	b9 81       	ldd	r27, Y+1	; 0x01
     364:	84 81       	ldd	r24, Z+4	; 0x04
     366:	11 97       	sbiw	r26, 0x01	; 1
     368:	8c 93       	st	X, r24
     36a:	a8 81       	ld	r26, Y
     36c:	b9 81       	ldd	r27, Y+1	; 0x01
     36e:	83 81       	ldd	r24, Z+3	; 0x03
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	8c 93       	st	X, r24
     374:	a8 81       	ld	r26, Y
     376:	b9 81       	ldd	r27, Y+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	13 97       	sbiw	r26, 0x03	; 3
     37c:	8c 93       	st	X, r24
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	21 81       	ldd	r18, Z+1	; 0x01
     384:	fc 01       	movw	r30, r24
     386:	34 97       	sbiw	r30, 0x04	; 4
     388:	20 83       	st	Z, r18
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	05 97       	sbiw	r24, 0x05	; 5
     390:	9e bf       	out	0x3e, r25	; 62
     392:	8d bf       	out	0x3d, r24	; 61
     394:	78 94       	sei
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <x_delay>:
     39c:	9c 01       	movw	r18, r24
     39e:	9f b7       	in	r25, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	e0 91 5f 04 	lds	r30, 0x045F
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	ee 57       	subi	r30, 0x7E	; 126
     3ae:	f3 4f       	sbci	r31, 0xF3	; 243
     3b0:	31 83       	std	Z+1, r19	; 0x01
     3b2:	20 83       	st	Z, r18
     3b4:	20 91 60 04 	lds	r18, 0x0460
     3b8:	80 91 93 0c 	lds	r24, 0x0C93
     3bc:	82 2b       	or	r24, r18
     3be:	80 93 60 04 	sts	0x0460, r24
     3c2:	9f bf       	out	0x3f, r25	; 63
     3c4:	b0 ce       	rjmp	.-672    	; 0x126 <x_yield>

000003c6 <__vector_21>:
                zero. If a thread is delayed and its counter reaches zero, then it
                is made READY and may be scheduled to run.

----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31

   // Increment system counter
   x_system_counter++;
     3e4:	80 91 52 04 	lds	r24, 0x0452
     3e8:	90 91 53 04 	lds	r25, 0x0453
     3ec:	a0 91 54 04 	lds	r26, 0x0454
     3f0:	b0 91 55 04 	lds	r27, 0x0455
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	a1 1d       	adc	r26, r1
     3f8:	b1 1d       	adc	r27, r1
     3fa:	80 93 52 04 	sts	0x0452, r24
     3fe:	90 93 53 04 	sts	0x0453, r25
     402:	a0 93 54 04 	sts	0x0454, r26
     406:	b0 93 55 04 	sts	0x0455, r27
     40a:	20 91 60 04 	lds	r18, 0x0460
     40e:	e2 e8       	ldi	r30, 0x82	; 130
     410:	fc e0       	ldi	r31, 0x0C	; 12

   char msk = 0x01;  // start with thread 0
     412:	31 e0       	ldi	r19, 0x01	; 1

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
      (*pdelay)--;
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	81 93       	st	Z+, r24
     41c:	91 93       	st	Z+, r25
      if(*pdelay == 0){
     41e:	89 2b       	or	r24, r25
     420:	19 f4       	brne	.+6      	; 0x428 <__vector_21+0x62>
         x_delay_status &= ~msk;
     422:	83 2f       	mov	r24, r19
     424:	80 95       	com	r24
     426:	28 23       	and	r18, r24
      }
      msk <<= 1;
     428:	33 0f       	add	r19, r19

   char msk = 0x01;  // start with thread 0

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	e2 39       	cpi	r30, 0x92	; 146
     42e:	f8 07       	cpc	r31, r24
     430:	89 f7       	brne	.-30     	; 0x414 <__vector_21+0x4e>
     432:	20 93 60 04 	sts	0x0460, r18
      }
      msk <<= 1;
      pdelay++;
   }
   
}
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
     454:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
     456:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
     458:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
     45a:	8f ed       	ldi	r24, 0xDF	; 223
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	cb de       	rcall	.-618    	; 0x1f6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
     460:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     462:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	c6 de       	rcall	.-628    	; 0x1f6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     46a:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
     46c:	85 ee       	ldi	r24, 0xE5	; 229
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	c2 de       	rcall	.-636    	; 0x1f6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     472:	c2 95       	swap	r28
     474:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	8c 27       	eor	r24, r28
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
     47e:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     480:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
     482:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     484:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
     486:	8e e0       	ldi	r24, 0x0E	; 14
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	b5 de       	rcall	.-662    	; 0x1f6 <delay_usec>
	
	return(PINE & (1 << PE4));
     48c:	8c b1       	in	r24, 0x0c	; 12
}
     48e:	80 71       	andi	r24, 0x10	; 16
     490:	08 95       	ret

00000492 <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
     492:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     494:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	09 f4       	brne	.+2      	; 0x49c <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
     49a:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
     49c:	8b e3       	ldi	r24, 0x3B	; 59
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	aa de       	rcall	.-684    	; 0x1f6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
     4a2:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     4a4:	6c 98       	cbi	0x0d, 4	; 13
     4a6:	08 95       	ret

000004a8 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	c0 e0       	ldi	r28, 0x00	; 0
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
     4b6:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4b8:	ee 24       	eor	r14, r14
     4ba:	e3 94       	inc	r14
     4bc:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
     4be:	df df       	rcall	.-66     	; 0x47e <ow_read_bit>
     4c0:	88 23       	and	r24, r24
     4c2:	39 f0       	breq	.+14     	; 0x4d2 <ow_read_byte+0x2a>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4c4:	c7 01       	movw	r24, r14
     4c6:	0c 2e       	mov	r0, r28
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <ow_read_byte+0x24>
     4ca:	88 0f       	add	r24, r24
     4cc:	0a 94       	dec	r0
     4ce:	ea f7       	brpl	.-6      	; 0x4ca <ow_read_byte+0x22>
     4d0:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
     4d2:	83 e1       	ldi	r24, 0x13	; 19
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	8f de       	rcall	.-738    	; 0x1f6 <delay_usec>
     4d8:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
     4da:	c8 30       	cpi	r28, 0x08	; 8
     4dc:	d1 05       	cpc	r29, r1
     4de:	79 f7       	brne	.-34     	; 0x4be <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
     4e0:	81 2f       	mov	r24, r17
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	08 95       	ret

000004ee <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
     4fa:	08 2f       	mov	r16, r24
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	c8 01       	movw	r24, r16
     500:	0c 2e       	mov	r0, r28
     502:	02 c0       	rjmp	.+4      	; 0x508 <ow_write_byte+0x1a>
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
     50c:	81 70       	andi	r24, 0x01	; 1
     50e:	c1 df       	rcall	.-126    	; 0x492 <ow_write_bit>
     510:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
     512:	c8 30       	cpi	r28, 0x08	; 8
     514:	d1 05       	cpc	r29, r1
     516:	99 f7       	brne	.-26     	; 0x4fe <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     518:	87 e7       	ldi	r24, 0x77	; 119
     51a:	90 e0       	ldi	r25, 0x00	; 0
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     524:	68 ce       	rjmp	.-816    	; 0x1f6 <delay_usec>

00000526 <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	2a 97       	sbiw	r28, 0x0a	; 10
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	char shift_val = 4;
	//char temp_f;
	ow_reset();
     542:	88 df       	rcall	.-240    	; 0x454 <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
     544:	8c ec       	ldi	r24, 0xCC	; 204
     546:	d3 df       	rcall	.-90     	; 0x4ee <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
     548:	84 e4       	ldi	r24, 0x44	; 68
     54a:	d1 df       	rcall	.-94     	; 0x4ee <ow_write_byte>
	delay_usec(119); //wait 120us
     54c:	87 e7       	ldi	r24, 0x77	; 119
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	52 de       	rcall	.-860    	; 0x1f6 <delay_usec>
	ow_reset();
     552:	80 df       	rcall	.-256    	; 0x454 <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
     554:	8c ec       	ldi	r24, 0xCC	; 204
     556:	cb df       	rcall	.-106    	; 0x4ee <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
     558:	8e eb       	ldi	r24, 0xBE	; 190
     55a:	c9 df       	rcall	.-110    	; 0x4ee <ow_write_byte>
     55c:	8e 01       	movw	r16, r28
     55e:	0f 5f       	subi	r16, 0xFF	; 255
     560:	1f 4f       	sbci	r17, 0xFF	; 255
     562:	7e 01       	movw	r14, r28
     564:	4a e0       	ldi	r20, 0x0A	; 10
     566:	e4 0e       	add	r14, r20
     568:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
     56a:	9e df       	rcall	.-196    	; 0x4a8 <ow_read_byte>
     56c:	f8 01       	movw	r30, r16
     56e:	81 93       	st	Z+, r24
     570:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
     572:	ee 15       	cp	r30, r14
     574:	ff 05       	cpc	r31, r15
     576:	c9 f7       	brne	.-14     	; 0x56a <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
     578:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
     57a:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb>>shift_val) | (temp_msb<<(8-shift_val));} // shift to get whole degree
     57c:	91 38       	cpi	r25, 0x81	; 129
     57e:	38 f4       	brcc	.+14     	; 0x58e <ow_read_temperature+0x68>
     580:	f0 e1       	ldi	r31, 0x10	; 16
     582:	9f 9f       	mul	r25, r31
     584:	90 01       	movw	r18, r0
     586:	11 24       	eor	r1, r1
     588:	82 95       	swap	r24
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	82 2b       	or	r24, r18
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     58e:	97 ff       	sbrs	r25, 7
     590:	05 c0       	rjmp	.+10     	; 0x59c <ow_read_temperature+0x76>
     592:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb>>shift_val) | ((~temp_msb)<<(8-shift_val));}// shift to get whole degree
     594:	82 95       	swap	r24
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	80 6f       	ori	r24, 0xF0	; 240
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
     59a:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2a 96       	adiw	r28, 0x0a	; 10
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	08 95       	ret

000005b8 <io_controller>:
volatile int timeout = 60;

/*
 * Handles serial I/O
 */
void io_controller(void) {
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	c0 55       	subi	r28, 0x50	; 80
     5c2:	d1 09       	sbc	r29, r1
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
	Serial_open(0,19200,SERIAL_8N1);
     5ce:	26 e0       	ldi	r18, 0x06	; 6
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	5b e4       	ldi	r21, 0x4B	; 75
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	89 d2       	rcall	.+1298   	; 0xaf2 <Serial_open>
	char opcode[opcode_len];
	char operand[operand_len];
	char message[64];
	char * str;
	char * formatStr;
	char * format = "Last temp: 0x%x raw hex\n\r";
     5e0:	45 e3       	ldi	r20, 0x35	; 53
     5e2:	e4 2e       	mov	r14, r20
     5e4:	42 e0       	ldi	r20, 0x02	; 2
     5e6:	f4 2e       	mov	r15, r20
     5e8:	51 e4       	ldi	r21, 0x41	; 65
     5ea:	65 2e       	mov	r6, r21
     5ec:	71 2c       	mov	r7, r1
     5ee:	6c 0e       	add	r6, r28
     5f0:	7d 1e       	adc	r7, r29
     5f2:	22 e0       	ldi	r18, 0x02	; 2
     5f4:	62 0e       	add	r6, r18
     5f6:	71 1c       	adc	r7, r1
     5f8:	69 e4       	ldi	r22, 0x49	; 73
     5fa:	86 2e       	mov	r8, r22
     5fc:	91 2c       	mov	r9, r1
     5fe:	8c 0e       	add	r8, r28
     600:	9d 1e       	adc	r9, r29
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	88 0e       	add	r8, r24
     606:	91 1c       	adc	r9, r1
						}	
					} else if (!strcmp(opcode, "SR")) {
						//set sample rate
						sample_rate = atoi(operand);
						formatStr = "Set sample rate to %u\n\r";
						sprintf((char *) message,formatStr,sample_rate);
     608:	71 eb       	ldi	r23, 0xB1	; 177
     60a:	c7 2e       	mov	r12, r23
     60c:	73 e0       	ldi	r23, 0x03	; 3
     60e:	d7 2e       	mov	r13, r23
     610:	8e 01       	movw	r16, r28
     612:	0f 5f       	subi	r16, 0xFF	; 255
     614:	1f 4f       	sbci	r17, 0xFF	; 255
						if (target_temp < 0 || target_temp > 125) {
							str = "Invalid temperature selection. Sucks to suck.\n\r";
							Serial_write_string(0,str,strlen(str));
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							sprintf((char *) message,formatStr,target_temp);
     616:	ef e7       	ldi	r30, 0x7F	; 127
     618:	ae 2e       	mov	r10, r30
     61a:	e3 e0       	ldi	r30, 0x03	; 3
     61c:	be 2e       	mov	r11, r30
	char * str;
	char * formatStr;
	char * format = "Last temp: 0x%x raw hex\n\r";
	while(1) {
		//if we are able to read a command
		if(Serial_read_string(0,command,command_len)) {
     61e:	48 e0       	ldi	r20, 0x08	; 8
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	be 01       	movw	r22, r28
     624:	6f 5b       	subi	r22, 0xBF	; 191
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	6b d3       	rcall	.+1750   	; 0xd04 <Serial_read_string>
     62e:	89 2b       	or	r24, r25
     630:	09 f4       	brne	.+2      	; 0x634 <io_controller+0x7c>
     632:	5b c1       	rjmp	.+694    	; 0x8ea <io_controller+0x332>
			opcode[0] = command[0];
     634:	22 96       	adiw	r28, 0x02	; 2
     636:	8f ad       	ldd	r24, Y+63	; 0x3f
     638:	22 97       	sbiw	r28, 0x02	; 2
     63a:	60 96       	adiw	r28, 0x10	; 16
     63c:	8f af       	std	Y+63, r24	; 0x3f
     63e:	60 97       	sbiw	r28, 0x10	; 16
			opcode[1] = command[1];
     640:	23 96       	adiw	r28, 0x03	; 3
     642:	8f ad       	ldd	r24, Y+63	; 0x3f
     644:	23 97       	sbiw	r28, 0x03	; 3
     646:	61 96       	adiw	r28, 0x11	; 17
     648:	8f af       	std	Y+63, r24	; 0x3f
     64a:	61 97       	sbiw	r28, 0x11	; 17
     64c:	d3 01       	movw	r26, r6
     64e:	fe 01       	movw	r30, r28
     650:	e7 5b       	subi	r30, 0xB7	; 183
     652:	ff 4f       	sbci	r31, 0xFF	; 255
			for (int i = 0; i < operand_len; i++)
			{
				if (command[i+2] != 0x00)
     654:	8d 91       	ld	r24, X+
     656:	88 23       	and	r24, r24
     658:	11 f0       	breq	.+4      	; 0x65e <io_controller+0xa6>
				{
					operand[i] = command[i+2];
     65a:	80 83       	st	Z, r24
     65c:	01 c0       	rjmp	.+2      	; 0x660 <io_controller+0xa8>
				}
				else
				{
					operand[i] = 0x00;
     65e:	10 82       	st	Z, r1
     660:	31 96       	adiw	r30, 0x01	; 1
	while(1) {
		//if we are able to read a command
		if(Serial_read_string(0,command,command_len)) {
			opcode[0] = command[0];
			opcode[1] = command[1];
			for (int i = 0; i < operand_len; i++)
     662:	e8 15       	cp	r30, r8
     664:	f9 05       	cpc	r31, r9
     666:	b1 f7       	brne	.-20     	; 0x654 <io_controller+0x9c>
				}
			}
			/************************************************************************/
			/* Mode-selection commands                                              */
			/************************************************************************/
			if(!strcmp(opcode,"SM")) {//set service mode to true;
     668:	68 ea       	ldi	r22, 0xA8	; 168
     66a:	72 e0       	ldi	r23, 0x02	; 2
     66c:	ce 01       	movw	r24, r28
     66e:	81 5b       	subi	r24, 0xB1	; 177
     670:	9f 4f       	sbci	r25, 0xFF	; 255
     672:	9b d5       	rcall	.+2870   	; 0x11aa <strcmp>
     674:	89 2b       	or	r24, r25
     676:	59 f4       	brne	.+22     	; 0x68e <io_controller+0xd6>
				str = "Entering Service Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     678:	47 e1       	ldi	r20, 0x17	; 23
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	6b ea       	ldi	r22, 0xAB	; 171
     67e:	72 e0       	ldi	r23, 0x02	; 2
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	8b d3       	rcall	.+1814   	; 0xd9c <Serial_write_string>
				service_mode = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 98 0c 	sts	0x0C98, r24
     68c:	35 c1       	rjmp	.+618    	; 0x8f8 <io_controller+0x340>
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
     68e:	63 ec       	ldi	r22, 0xC3	; 195
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	ce 01       	movw	r24, r28
     694:	81 5b       	subi	r24, 0xB1	; 177
     696:	9f 4f       	sbci	r25, 0xFF	; 255
     698:	88 d5       	rcall	.+2832   	; 0x11aa <strcmp>
     69a:	89 2b       	or	r24, r25
     69c:	a9 f4       	brne	.+42     	; 0x6c8 <io_controller+0x110>
				service_mode = !service_mode;
     69e:	90 91 98 0c 	lds	r25, 0x0C98
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	91 11       	cpse	r25, r1
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	80 93 98 0c 	sts	0x0C98, r24
				if (service_mode) {
     6ac:	80 91 98 0c 	lds	r24, 0x0C98
     6b0:	88 23       	and	r24, r24
     6b2:	29 f0       	breq	.+10     	; 0x6be <io_controller+0x106>
					str = "Entering Service Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     6b4:	47 e1       	ldi	r20, 0x17	; 23
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	6b ea       	ldi	r22, 0xAB	; 171
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	1a c1       	rjmp	.+564    	; 0x8f2 <io_controller+0x33a>
				} else {
					str = "Entering Operating Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     6be:	49 e1       	ldi	r20, 0x19	; 25
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	66 ec       	ldi	r22, 0xC6	; 198
     6c4:	72 e0       	ldi	r23, 0x02	; 2
     6c6:	15 c1       	rjmp	.+554    	; 0x8f2 <io_controller+0x33a>
				}
			} else if (!strcmp(opcode, "OM")) {//set service mode to false
     6c8:	60 ee       	ldi	r22, 0xE0	; 224
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	ce 01       	movw	r24, r28
     6ce:	81 5b       	subi	r24, 0xB1	; 177
     6d0:	9f 4f       	sbci	r25, 0xFF	; 255
     6d2:	6b d5       	rcall	.+2774   	; 0x11aa <strcmp>
     6d4:	89 2b       	or	r24, r25
     6d6:	51 f4       	brne	.+20     	; 0x6ec <io_controller+0x134>
				str = "Entering Operating Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     6d8:	49 e1       	ldi	r20, 0x19	; 25
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	66 ec       	ldi	r22, 0xC6	; 198
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	5b d3       	rcall	.+1718   	; 0xd9c <Serial_write_string>
				service_mode = 0;
     6e6:	10 92 98 0c 	sts	0x0C98, r1
     6ea:	06 c1       	rjmp	.+524    	; 0x8f8 <io_controller+0x340>
			} else {
				/************************************************************************/
				/* Mode-specific commands                                               */
				/************************************************************************/
				if(service_mode) {
     6ec:	80 91 98 0c 	lds	r24, 0x0C98
     6f0:	88 23       	and	r24, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <io_controller+0x13e>
     6f4:	5a c0       	rjmp	.+180    	; 0x7aa <io_controller+0x1f2>
					//do service mode things
					if (!strcmp(opcode, "GT")) {
     6f6:	63 ee       	ldi	r22, 0xE3	; 227
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	ce 01       	movw	r24, r28
     6fc:	81 5b       	subi	r24, 0xB1	; 177
     6fe:	9f 4f       	sbci	r25, 0xFF	; 255
     700:	54 d5       	rcall	.+2728   	; 0x11aa <strcmp>
     702:	89 2b       	or	r24, r25
     704:	d1 f4       	brne	.+52     	; 0x73a <io_controller+0x182>
						//Get temperature
						char fmt_temp = last_temp;
     706:	60 91 56 04 	lds	r22, 0x0456
						if (!celsius) {
     70a:	80 91 02 02 	lds	r24, 0x0202
     70e:	81 11       	cpse	r24, r1
     710:	0f c0       	rjmp	.+30     	; 0x730 <io_controller+0x178>
							//this is equivalent to (9/5)*C + 32
							fmt_temp = ((fmt_temp + (fmt_temp << 3))+160)/5;
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	cb 01       	movw	r24, r22
     716:	33 e0       	ldi	r19, 0x03	; 3
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	3a 95       	dec	r19
     71e:	e1 f7       	brne	.-8      	; 0x718 <io_controller+0x160>
     720:	68 0f       	add	r22, r24
     722:	79 1f       	adc	r23, r25
     724:	cb 01       	movw	r24, r22
     726:	80 56       	subi	r24, 0x60	; 96
     728:	9f 4f       	sbci	r25, 0xFF	; 255
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	f9 d4       	rcall	.+2546   	; 0x1122 <__divmodhi4>
						}
						sprintf((char *) message, format, fmt_temp);
     730:	1f 92       	push	r1
     732:	6f 93       	push	r22
     734:	ff 92       	push	r15
     736:	ef 92       	push	r14
     738:	7b c0       	rjmp	.+246    	; 0x830 <io_controller+0x278>
						Serial_write_string(0, (char *) message, strlen((char *) message));
					} 
					else if (!strcmp(opcode, "OV")) {
     73a:	66 ee       	ldi	r22, 0xE6	; 230
     73c:	72 e0       	ldi	r23, 0x02	; 2
     73e:	ce 01       	movw	r24, r28
     740:	81 5b       	subi	r24, 0xB1	; 177
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	32 d5       	rcall	.+2660   	; 0x11aa <strcmp>
     746:	89 2b       	or	r24, r25
     748:	89 f4       	brne	.+34     	; 0x76c <io_controller+0x1b4>
						over_temp = atoi(operand);
     74a:	ce 01       	movw	r24, r28
     74c:	87 5b       	subi	r24, 0xB7	; 183
     74e:	9f 4f       	sbci	r25, 0xFF	; 255
     750:	0f d5       	rcall	.+2590   	; 0x1170 <atoi>
     752:	90 93 95 0c 	sts	0x0C95, r25
     756:	80 93 94 0c 	sts	0x0C94, r24
						formatStr = "Over-temperature set to %d degrees Celsius\n\r";
						sprintf((char *) message,formatStr,over_temp);
     75a:	80 91 94 0c 	lds	r24, 0x0C94
     75e:	90 91 95 0c 	lds	r25, 0x0C95
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	89 ee       	ldi	r24, 0xE9	; 233
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	1c c0       	rjmp	.+56     	; 0x7a4 <io_controller+0x1ec>
						Serial_write_string(0, (char *) message, strlen((char *) message));
					} 
					else if (!strcmp(opcode, "SO")) {
     76c:	66 e1       	ldi	r22, 0x16	; 22
     76e:	73 e0       	ldi	r23, 0x03	; 3
     770:	ce 01       	movw	r24, r28
     772:	81 5b       	subi	r24, 0xB1	; 177
     774:	9f 4f       	sbci	r25, 0xFF	; 255
     776:	19 d5       	rcall	.+2610   	; 0x11aa <strcmp>
     778:	89 2b       	or	r24, r25
     77a:	09 f0       	breq	.+2      	; 0x77e <io_controller+0x1c6>
     77c:	b1 c0       	rjmp	.+354    	; 0x8e0 <io_controller+0x328>
						timeout = operand[0] * 60;
     77e:	2a 96       	adiw	r28, 0x0a	; 10
     780:	8f ad       	ldd	r24, Y+63	; 0x3f
     782:	2a 97       	sbiw	r28, 0x0a	; 10
     784:	2c e3       	ldi	r18, 0x3C	; 60
     786:	82 9f       	mul	r24, r18
     788:	c0 01       	movw	r24, r0
     78a:	11 24       	eor	r1, r1
     78c:	90 93 01 02 	sts	0x0201, r25
     790:	80 93 00 02 	sts	0x0200, r24
						formatStr = "Timeout set to %d seconds\n\r";
						sprintf((char *) message,formatStr,timeout);
     794:	80 91 00 02 	lds	r24, 0x0200
     798:	90 91 01 02 	lds	r25, 0x0201
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	89 e1       	ldi	r24, 0x19	; 25
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	43 c0       	rjmp	.+134    	; 0x830 <io_controller+0x278>
						str = "Unrecognized command\n\r";
						Serial_write_string(0,str,strlen(str));
					}
				} else {
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
     7aa:	6c e4       	ldi	r22, 0x4C	; 76
     7ac:	73 e0       	ldi	r23, 0x03	; 3
     7ae:	ce 01       	movw	r24, r28
     7b0:	81 5b       	subi	r24, 0xB1	; 177
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
     7b4:	fa d4       	rcall	.+2548   	; 0x11aa <strcmp>
     7b6:	89 2b       	or	r24, r25
     7b8:	19 f5       	brne	.+70     	; 0x800 <io_controller+0x248>
						//set temperature
						target_temp = atoi(operand);
     7ba:	ce 01       	movw	r24, r28
     7bc:	87 5b       	subi	r24, 0xB7	; 183
     7be:	9f 4f       	sbci	r25, 0xFF	; 255
     7c0:	d7 d4       	rcall	.+2478   	; 0x1170 <atoi>
     7c2:	90 93 97 0c 	sts	0x0C97, r25
     7c6:	80 93 96 0c 	sts	0x0C96, r24
						if (target_temp < 0 || target_temp > 125) {
     7ca:	80 91 96 0c 	lds	r24, 0x0C96
     7ce:	90 91 97 0c 	lds	r25, 0x0C97
     7d2:	97 fd       	sbrc	r25, 7
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <io_controller+0x22c>
     7d6:	80 91 96 0c 	lds	r24, 0x0C96
     7da:	90 91 97 0c 	lds	r25, 0x0C97
     7de:	8e 37       	cpi	r24, 0x7E	; 126
     7e0:	91 05       	cpc	r25, r1
     7e2:	2c f0       	brlt	.+10     	; 0x7ee <io_controller+0x236>
							str = "Invalid temperature selection. Sucks to suck.\n\r";
							Serial_write_string(0,str,strlen(str));
     7e4:	4f e2       	ldi	r20, 0x2F	; 47
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	6f e4       	ldi	r22, 0x4F	; 79
     7ea:	73 e0       	ldi	r23, 0x03	; 3
     7ec:	82 c0       	rjmp	.+260    	; 0x8f2 <io_controller+0x33a>
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							sprintf((char *) message,formatStr,target_temp);
     7ee:	80 91 96 0c 	lds	r24, 0x0C96
     7f2:	90 91 97 0c 	lds	r25, 0x0C97
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	bf 92       	push	r11
     7fc:	af 92       	push	r10
     7fe:	18 c0       	rjmp	.+48     	; 0x830 <io_controller+0x278>
							Serial_write_string(0, (char *) message, strlen((char *) message));
						}	
					} else if (!strcmp(opcode, "SR")) {
     800:	6e ea       	ldi	r22, 0xAE	; 174
     802:	73 e0       	ldi	r23, 0x03	; 3
     804:	ce 01       	movw	r24, r28
     806:	81 5b       	subi	r24, 0xB1	; 177
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	cf d4       	rcall	.+2462   	; 0x11aa <strcmp>
     80c:	89 2b       	or	r24, r25
     80e:	31 f5       	brne	.+76     	; 0x85c <io_controller+0x2a4>
						//set sample rate
						sample_rate = atoi(operand);
     810:	ce 01       	movw	r24, r28
     812:	87 5b       	subi	r24, 0xB7	; 183
     814:	9f 4f       	sbci	r25, 0xFF	; 255
     816:	ac d4       	rcall	.+2392   	; 0x1170 <atoi>
     818:	90 93 04 02 	sts	0x0204, r25
     81c:	80 93 03 02 	sts	0x0203, r24
						formatStr = "Set sample rate to %u\n\r";
						sprintf((char *) message,formatStr,sample_rate);
     820:	80 91 03 02 	lds	r24, 0x0203
     824:	90 91 04 02 	lds	r25, 0x0204
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	df 92       	push	r13
     82e:	cf 92       	push	r12
     830:	1f 93       	push	r17
     832:	0f 93       	push	r16
     834:	cb d4       	rcall	.+2454   	; 0x11cc <sprintf>
						Serial_write_string(0, (char *) message, strlen((char *) message));
     836:	f8 01       	movw	r30, r16
     838:	01 90       	ld	r0, Z+
     83a:	00 20       	and	r0, r0
     83c:	e9 f7       	brne	.-6      	; 0x838 <io_controller+0x280>
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	af 01       	movw	r20, r30
     842:	40 1b       	sub	r20, r16
     844:	51 0b       	sbc	r21, r17
     846:	b8 01       	movw	r22, r16
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a7 d2       	rcall	.+1358   	; 0xd9c <Serial_write_string>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	4e c0       	rjmp	.+156    	; 0x8f8 <io_controller+0x340>
					} else if (!strcmp(opcode, "SD")) {
     85c:	69 ec       	ldi	r22, 0xC9	; 201
     85e:	73 e0       	ldi	r23, 0x03	; 3
     860:	ce 01       	movw	r24, r28
     862:	81 5b       	subi	r24, 0xB1	; 177
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	a1 d4       	rcall	.+2370   	; 0x11aa <strcmp>
     868:	89 2b       	or	r24, r25
     86a:	d1 f5       	brne	.+116    	; 0x8e0 <io_controller+0x328>
						//set display format
						switch (operand[0]) {
     86c:	2a 96       	adiw	r28, 0x0a	; 10
     86e:	8f ad       	ldd	r24, Y+63	; 0x3f
     870:	2a 97       	sbiw	r28, 0x0a	; 10
     872:	86 34       	cpi	r24, 0x46	; 70
     874:	99 f0       	breq	.+38     	; 0x89c <io_controller+0x2e4>
     876:	88 35       	cpi	r24, 0x58	; 88
     878:	f9 f0       	breq	.+62     	; 0x8b8 <io_controller+0x300>
     87a:	83 34       	cpi	r24, 0x43	; 67
     87c:	61 f5       	brne	.+88     	; 0x8d6 <io_controller+0x31e>
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
								celsius = 1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 02 02 	sts	0x0202, r24
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
     884:	47 e1       	ldi	r20, 0x17	; 23
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	67 ee       	ldi	r22, 0xE7	; 231
     88a:	73 e0       	ldi	r23, 0x03	; 3
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	85 d2       	rcall	.+1290   	; 0xd9c <Serial_write_string>
								celsius = 0;
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
     892:	98 e8       	ldi	r25, 0x88	; 136
     894:	e9 2e       	mov	r14, r25
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	f9 2e       	mov	r15, r25
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     89a:	2e c0       	rjmp	.+92     	; 0x8f8 <io_controller+0x340>
					} else if (!strcmp(opcode, "SD")) {
						//set display format
						switch (operand[0]) {
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
								celsius = 0;
     89c:	10 92 02 02 	sts	0x0202, r1
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
     8a0:	4a e1       	ldi	r20, 0x1A	; 26
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	6c ec       	ldi	r22, 0xCC	; 204
     8a6:	73 e0       	ldi	r23, 0x03	; 3
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	77 d2       	rcall	.+1262   	; 0xd9c <Serial_write_string>
						Serial_write_string(0, (char *) message, strlen((char *) message));
					} else if (!strcmp(opcode, "SD")) {
						//set display format
						switch (operand[0]) {
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
     8ae:	25 e6       	ldi	r18, 0x65	; 101
     8b0:	e2 2e       	mov	r14, r18
     8b2:	22 e0       	ldi	r18, 0x02	; 2
     8b4:	f2 2e       	mov	r15, r18
								celsius = 0;
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     8b6:	20 c0       	rjmp	.+64     	; 0x8f8 <io_controller+0x340>
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 02 02 	sts	0x0202, r24
								format="Last temp: %x raw hex";
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
     8be:	43 e2       	ldi	r20, 0x23	; 35
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	6f ef       	ldi	r22, 0xFF	; 255
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	68 d2       	rcall	.+1232   	; 0xd9c <Serial_write_string>
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
								format="Last temp: %x raw hex";
     8cc:	8f e4       	ldi	r24, 0x4F	; 79
     8ce:	e8 2e       	mov	r14, r24
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	f8 2e       	mov	r15, r24
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
     8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <io_controller+0x340>
							default:
								str = "Unrecognized format\n\r";
								Serial_write_string(0,str,strlen(str));
     8d6:	45 e1       	ldi	r20, 0x15	; 21
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	63 e2       	ldi	r22, 0x23	; 35
     8dc:	74 e0       	ldi	r23, 0x04	; 4
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <io_controller+0x33a>
								break;
						}
					} else {
						str = "Unrecognized command\n\r";
						Serial_write_string(0,str,strlen(str));
     8e0:	46 e1       	ldi	r20, 0x16	; 22
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	65 e3       	ldi	r22, 0x35	; 53
     8e6:	73 e0       	ldi	r23, 0x03	; 3
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <io_controller+0x33a>
				}
			}

		} else {
			str = "Error reading command\n\r";
			Serial_write_string(0,str,strlen(str));
     8ea:	47 e1       	ldi	r20, 0x17	; 23
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	69 e3       	ldi	r22, 0x39	; 57
     8f0:	74 e0       	ldi	r23, 0x04	; 4
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	52 d2       	rcall	.+1188   	; 0xd9c <Serial_write_string>
		}
		x_delay(1000);
     8f8:	88 ee       	ldi	r24, 0xE8	; 232
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	4f dd       	rcall	.-1378   	; 0x39c <x_delay>
	}
     8fe:	8f ce       	rjmp	.-738    	; 0x61e <io_controller+0x66>

00000900 <box_controller>:
/*
 * Controller for the box
 */
void box_controller(void) {
	//TODO: blink LED
	DDRB |= (0x1 << light_bulbs) | (0x1 << fans);
     900:	84 b1       	in	r24, 0x04	; 4
     902:	80 63       	ori	r24, 0x30	; 48
     904:	84 b9       	out	0x04, r24	; 4
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
		//_delay_ms(1000);
		PORTB ^= (0x1 << light_bulbs) | (0x1 << fans);
     906:	c0 e3       	ldi	r28, 0x30	; 48
void box_controller(void) {
	//TODO: blink LED
	DDRB |= (0x1 << light_bulbs) | (0x1 << fans);
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
     908:	80 91 03 02 	lds	r24, 0x0203
     90c:	90 91 04 02 	lds	r25, 0x0204
     910:	45 dd       	rcall	.-1398   	; 0x39c <x_delay>
		//_delay_ms(1000);
		PORTB ^= (0x1 << light_bulbs) | (0x1 << fans);
     912:	85 b1       	in	r24, 0x05	; 5
     914:	8c 27       	eor	r24, r28
     916:	85 b9       	out	0x05, r24	; 5
		//x_yield();
	}
     918:	f7 cf       	rjmp	.-18     	; 0x908 <box_controller+0x8>

0000091a <sensor_controller>:
}

/*
 * Polls sensor for temperature every second
 */
void sensor_controller(void) {
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	1f 92       	push	r1
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
	//Check for sensor presence
	char presence = ow_reset();
     924:	97 dd       	rcall	.-1234   	; 0x454 <ow_reset>
	//keep checking until we detect a sensor
	while (! presence) {
     926:	81 11       	cpse	r24, r1
     928:	05 c0       	rjmp	.+10     	; 0x934 <sensor_controller+0x1a>
		presence = ow_reset();
     92a:	94 dd       	rcall	.-1240   	; 0x454 <ow_reset>
		//give other threads a chance to act during this process
		x_yield();
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	fb db       	rcall	.-2058   	; 0x126 <x_yield>
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	f9 cf       	rjmp	.-14     	; 0x926 <sensor_controller+0xc>
	}
	//monitor temperature
	while(1) {
		last_temp = ow_read_temperature();
     934:	f8 dd       	rcall	.-1040   	; 0x526 <ow_read_temperature>
     936:	80 93 56 04 	sts	0x0456, r24
		x_delay(sample_rate);
     93a:	80 91 03 02 	lds	r24, 0x0203
     93e:	90 91 04 02 	lds	r25, 0x0204
     942:	2c dd       	rcall	.-1448   	; 0x39c <x_delay>
	}
     944:	f7 cf       	rjmp	.-18     	; 0x934 <sensor_controller+0x1a>

00000946 <main>:
}

int main(void)
{
	x_init();
     946:	b3 dc       	rcall	.-1690   	; 0x2ae <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	6c ed       	ldi	r22, 0xDC	; 220
     94c:	72 e0       	ldi	r23, 0x02	; 2
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	5d dc       	rcall	.-1862   	; 0x20c <x_new>
	x_new(1, sensor_controller, 1);
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	6d e8       	ldi	r22, 0x8D	; 141
     956:	74 e0       	ldi	r23, 0x04	; 4
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	58 dc       	rcall	.-1872   	; 0x20c <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	60 e8       	ldi	r22, 0x80	; 128
     960:	74 e0       	ldi	r23, 0x04	; 4
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	53 dc       	rcall	.-1882   	; 0x20c <x_new>
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	08 95       	ret

0000096c <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
	QCB *qcb = &queues[qid];
	if (qcb->flags != 1)
     970:	98 e0       	ldi	r25, 0x08	; 8
     972:	89 9f       	mul	r24, r25
     974:	f0 01       	movw	r30, r0
     976:	11 24       	eor	r1, r1
     978:	df 01       	movw	r26, r30
     97a:	a7 56       	subi	r26, 0x67	; 103
     97c:	b3 4f       	sbci	r27, 0xF3	; 243
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	8c 91       	ld	r24, X
     982:	13 97       	sbiw	r26, 0x03	; 3
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	a1 f1       	breq	.+104    	; 0x9f0 <Q_putc+0x84>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     988:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     98a:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
     98c:	8c 91       	ld	r24, X
     98e:	16 96       	adiw	r26, 0x06	; 6
     990:	cd 91       	ld	r28, X+
     992:	dc 91       	ld	r29, X
     994:	17 97       	sbiw	r26, 0x07	; 7
     996:	c8 0f       	add	r28, r24
     998:	d1 1d       	adc	r29, r1
     99a:	68 83       	st	Y, r22
			qcb->available += 1;
     99c:	14 96       	adiw	r26, 0x04	; 4
     99e:	2d 91       	ld	r18, X+
     9a0:	3c 91       	ld	r19, X
     9a2:	15 97       	sbiw	r26, 0x05	; 5
     9a4:	2f 5f       	subi	r18, 0xFF	; 255
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	15 96       	adiw	r26, 0x05	; 5
     9aa:	3c 93       	st	X, r19
     9ac:	2e 93       	st	-X, r18
     9ae:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 2)
     9b0:	13 96       	adiw	r26, 0x03	; 3
     9b2:	8c 91       	ld	r24, X
     9b4:	13 97       	sbiw	r26, 0x03	; 3
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	11 f4       	brne	.+4      	; 0x9be <Q_putc+0x52>
			{
				qcb->flags = 0;
     9ba:	13 96       	adiw	r26, 0x03	; 3
     9bc:	1c 92       	st	X, r1
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     9be:	e7 56       	subi	r30, 0x67	; 103
     9c0:	f3 4f       	sbci	r31, 0xF3	; 243
     9c2:	90 81       	ld	r25, Z
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	49 2f       	mov	r20, r25
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	4f 5f       	subi	r20, 0xFF	; 255
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	42 23       	and	r20, r18
     9d4:	53 23       	and	r21, r19
     9d6:	21 81       	ldd	r18, Z+1	; 0x01
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
     9dc:	89 23       	and	r24, r25
     9de:	80 83       	st	Z, r24
			if (qcb->flags == 2)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     9e0:	42 17       	cp	r20, r18
     9e2:	53 07       	cpc	r21, r19
     9e4:	11 f4       	brne	.+4      	; 0x9ea <Q_putc+0x7e>
				qcb->in = (qcb->in + 1) & qcb->smask;
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9ea:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <Q_putc+0x86>
	}
	else
	{
		return 0;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	9b 01       	movw	r18, r22
	QCB *qcb = &queues[qid];
	if (qcb->flags != 2)
     9fe:	98 e0       	ldi	r25, 0x08	; 8
     a00:	89 9f       	mul	r24, r25
     a02:	f0 01       	movw	r30, r0
     a04:	11 24       	eor	r1, r1
     a06:	df 01       	movw	r26, r30
     a08:	a7 56       	subi	r26, 0x67	; 103
     a0a:	b3 4f       	sbci	r27, 0xF3	; 243
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	8c 91       	ld	r24, X
     a10:	13 97       	sbiw	r26, 0x03	; 3
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	c1 f1       	breq	.+112    	; 0xa86 <Q_getc+0x8e>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a16:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a18:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	8c 91       	ld	r24, X
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	16 96       	adiw	r26, 0x06	; 6
     a22:	cd 91       	ld	r28, X+
     a24:	dc 91       	ld	r29, X
     a26:	17 97       	sbiw	r26, 0x07	; 7
     a28:	c8 0f       	add	r28, r24
     a2a:	d1 1d       	adc	r29, r1
     a2c:	88 81       	ld	r24, Y
     a2e:	e9 01       	movw	r28, r18
     a30:	88 83       	st	Y, r24
			qcb->available -= 1;
     a32:	14 96       	adiw	r26, 0x04	; 4
     a34:	2d 91       	ld	r18, X+
     a36:	3c 91       	ld	r19, X
     a38:	15 97       	sbiw	r26, 0x05	; 5
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	31 09       	sbc	r19, r1
     a3e:	15 96       	adiw	r26, 0x05	; 5
     a40:	3c 93       	st	X, r19
     a42:	2e 93       	st	-X, r18
     a44:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 1)
     a46:	13 96       	adiw	r26, 0x03	; 3
     a48:	8c 91       	ld	r24, X
     a4a:	13 97       	sbiw	r26, 0x03	; 3
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	11 f4       	brne	.+4      	; 0xa54 <Q_getc+0x5c>
			{
				qcb->flags = 0;
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	1c 92       	st	X, r1
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     a54:	e7 56       	subi	r30, 0x67	; 103
     a56:	f3 4f       	sbci	r31, 0xF3	; 243
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	49 2f       	mov	r20, r25
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	4f 5f       	subi	r20, 0xFF	; 255
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	42 23       	and	r20, r18
     a6a:	53 23       	and	r21, r19
     a6c:	20 81       	ld	r18, Z
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     a72:	89 23       	and	r24, r25
     a74:	81 83       	std	Z+1, r24	; 0x01
			if (qcb->flags == 1)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     a76:	42 17       	cp	r20, r18
     a78:	53 07       	cpc	r21, r19
     a7a:	11 f4       	brne	.+4      	; 0xa80 <Q_getc+0x88>
				qcb->out = (qcb->out + 1) & qcb->smask;
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a80:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <Q_getc+0x90>
	}
	return 0;
     a86:	80 e0       	ldi	r24, 0x00	; 0
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
     a8e:	9c 01       	movw	r18, r24
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	31 09       	sbc	r19, r1
     a94:	2f 3f       	cpi	r18, 0xFF	; 255
     a96:	31 05       	cpc	r19, r1
     a98:	09 f0       	breq	.+2      	; 0xa9c <Q_create+0xe>
     a9a:	48 f5       	brcc	.+82     	; 0xaee <Q_create+0x60>
     a9c:	28 23       	and	r18, r24
     a9e:	39 23       	and	r19, r25
     aa0:	23 2b       	or	r18, r19
     aa2:	29 f5       	brne	.+74     	; 0xaee <Q_create+0x60>
     aa4:	e7 e5       	ldi	r30, 0x57	; 87
     aa6:	f4 e0       	ldi	r31, 0x04	; 4
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
     aac:	41 91       	ld	r20, Z+
     aae:	41 11       	cpse	r20, r1
     ab0:	19 c0       	rjmp	.+50     	; 0xae4 <Q_create+0x56>
		{
			queues[i].in = 0;
     ab2:	f9 01       	movw	r30, r18
     ab4:	93 e0       	ldi	r25, 0x03	; 3
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	9a 95       	dec	r25
     abc:	e1 f7       	brne	.-8      	; 0xab6 <Q_create+0x28>
     abe:	e7 56       	subi	r30, 0x67	; 103
     ac0:	f3 4f       	sbci	r31, 0xF3	; 243
     ac2:	10 82       	st	Z, r1
			queues[i].out = 0;
     ac4:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
     ac6:	81 50       	subi	r24, 0x01	; 1
     ac8:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
     ace:	15 82       	std	Z+5, r1	; 0x05
     ad0:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
     ad2:	77 83       	std	Z+7, r23	; 0x07
     ad4:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
     ad6:	f9 01       	movw	r30, r18
     ad8:	e9 5a       	subi	r30, 0xA9	; 169
     ada:	fb 4f       	sbci	r31, 0xFB	; 251
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
			return i;
     ae0:	82 2f       	mov	r24, r18
     ae2:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     ae4:	2f 5f       	subi	r18, 0xFF	; 255
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	28 30       	cpi	r18, 0x08	; 8
     aea:	31 05       	cpc	r19, r1
     aec:	f9 f6       	brne	.-66     	; 0xaac <Q_create+0x1e>

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
     af0:	08 95       	ret

00000af2 <Serial_open>:
	Q_delete(ports[port].tx_qid);
}

int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	84 30       	cpi	r24, 0x04	; 4
     b06:	91 05       	cpc	r25, r1
     b08:	08 f0       	brcs	.+2      	; 0xb0c <Serial_open+0x1a>
     b0a:	d0 c0       	rjmp	.+416    	; 0xcac <Serial_open+0x1ba>
     b0c:	b2 2e       	mov	r11, r18
     b0e:	6a 01       	movw	r12, r20
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	80 9f       	mul	r24, r16
     b18:	e0 01       	movw	r28, r0
     b1a:	81 9f       	mul	r24, r17
     b1c:	d0 0d       	add	r29, r0
     b1e:	11 24       	eor	r1, r1
     b20:	c3 5f       	subi	r28, 0xF3	; 243
     b22:	dd 4f       	sbci	r29, 0xFD	; 253
     b24:	6a 81       	ldd	r22, Y+2	; 0x02
     b26:	7b 81       	ldd	r23, Y+3	; 0x03
     b28:	8c 81       	ldd	r24, Y+4	; 0x04
     b2a:	9d 81       	ldd	r25, Y+5	; 0x05
     b2c:	b0 df       	rcall	.-160    	; 0xa8e <Q_create>
     b2e:	88 83       	st	Y, r24
     b30:	6e 81       	ldd	r22, Y+6	; 0x06
     b32:	7f 81       	ldd	r23, Y+7	; 0x07
     b34:	88 85       	ldd	r24, Y+8	; 0x08
     b36:	99 85       	ldd	r25, Y+9	; 0x09
     b38:	aa df       	rcall	.-172    	; 0xa8e <Q_create>
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	00 0f       	add	r16, r16
     b3e:	11 1f       	adc	r17, r17
     b40:	f8 01       	movw	r30, r16
     b42:	eb 5f       	subi	r30, 0xFB	; 251
     b44:	fd 4f       	sbci	r31, 0xFD	; 253
     b46:	a0 81       	ld	r26, Z
     b48:	b1 81       	ldd	r27, Z+1	; 0x01
     b4a:	9c 91       	ld	r25, X
     b4c:	92 60       	ori	r25, 0x02	; 2
     b4e:	9c 93       	st	X, r25
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	c8 16       	cp	r12, r24
     b54:	80 e7       	ldi	r24, 0x70	; 112
     b56:	d8 06       	cpc	r13, r24
     b58:	e1 04       	cpc	r14, r1
     b5a:	f1 04       	cpc	r15, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <Serial_open+0x6e>
     b5e:	78 c0       	rjmp	.+240    	; 0xc50 <Serial_open+0x15e>
     b60:	94 f5       	brge	.+100    	; 0xbc6 <Serial_open+0xd4>
     b62:	80 e8       	ldi	r24, 0x80	; 128
     b64:	c8 16       	cp	r12, r24
     b66:	85 e2       	ldi	r24, 0x25	; 37
     b68:	d8 06       	cpc	r13, r24
     b6a:	e1 04       	cpc	r14, r1
     b6c:	f1 04       	cpc	r15, r1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <Serial_open+0x80>
     b70:	65 c0       	rjmp	.+202    	; 0xc3c <Serial_open+0x14a>
     b72:	ac f4       	brge	.+42     	; 0xb9e <Serial_open+0xac>
     b74:	80 e6       	ldi	r24, 0x60	; 96
     b76:	c8 16       	cp	r12, r24
     b78:	89 e0       	ldi	r24, 0x09	; 9
     b7a:	d8 06       	cpc	r13, r24
     b7c:	e1 04       	cpc	r14, r1
     b7e:	f1 04       	cpc	r15, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <Serial_open+0x92>
     b82:	57 c0       	rjmp	.+174    	; 0xc32 <Serial_open+0x140>
     b84:	80 ec       	ldi	r24, 0xC0	; 192
     b86:	c8 16       	cp	r12, r24
     b88:	82 e1       	ldi	r24, 0x12	; 18
     b8a:	d8 06       	cpc	r13, r24
     b8c:	e1 04       	cpc	r14, r1
     b8e:	f1 04       	cpc	r15, r1
     b90:	09 f0       	breq	.+2      	; 0xb94 <Serial_open+0xa2>
     b92:	77 c0       	rjmp	.+238    	; 0xc82 <Serial_open+0x190>
     b94:	40 ea       	ldi	r20, 0xA0	; 160
     b96:	51 e0       	ldi	r21, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	75 c0       	rjmp	.+234    	; 0xc88 <Serial_open+0x196>
     b9e:	80 e4       	ldi	r24, 0x40	; 64
     ba0:	c8 16       	cp	r12, r24
     ba2:	88 e3       	ldi	r24, 0x38	; 56
     ba4:	d8 06       	cpc	r13, r24
     ba6:	e1 04       	cpc	r14, r1
     ba8:	f1 04       	cpc	r15, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <Serial_open+0xbc>
     bac:	4c c0       	rjmp	.+152    	; 0xc46 <Serial_open+0x154>
     bae:	c1 14       	cp	r12, r1
     bb0:	8b e4       	ldi	r24, 0x4B	; 75
     bb2:	d8 06       	cpc	r13, r24
     bb4:	e1 04       	cpc	r14, r1
     bb6:	f1 04       	cpc	r15, r1
     bb8:	09 f0       	breq	.+2      	; 0xbbc <Serial_open+0xca>
     bba:	63 c0       	rjmp	.+198    	; 0xc82 <Serial_open+0x190>
     bbc:	47 e6       	ldi	r20, 0x67	; 103
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	61 c0       	rjmp	.+194    	; 0xc88 <Serial_open+0x196>
     bc6:	c1 14       	cp	r12, r1
     bc8:	8c e2       	ldi	r24, 0x2C	; 44
     bca:	d8 06       	cpc	r13, r24
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	e8 06       	cpc	r14, r24
     bd0:	f1 04       	cpc	r15, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <Serial_open+0xe4>
     bd4:	47 c0       	rjmp	.+142    	; 0xc64 <Serial_open+0x172>
     bd6:	94 f4       	brge	.+36     	; 0xbfc <Serial_open+0x10a>
     bd8:	c1 14       	cp	r12, r1
     bda:	86 e9       	ldi	r24, 0x96	; 150
     bdc:	d8 06       	cpc	r13, r24
     bde:	e1 04       	cpc	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	d9 f1       	breq	.+118    	; 0xc5a <Serial_open+0x168>
     be4:	c1 14       	cp	r12, r1
     be6:	81 ee       	ldi	r24, 0xE1	; 225
     be8:	d8 06       	cpc	r13, r24
     bea:	e1 04       	cpc	r14, r1
     bec:	f1 04       	cpc	r15, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <Serial_open+0x100>
     bf0:	48 c0       	rjmp	.+144    	; 0xc82 <Serial_open+0x190>
     bf2:	42 e2       	ldi	r20, 0x22	; 34
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	46 c0       	rjmp	.+140    	; 0xc88 <Serial_open+0x196>
     bfc:	c1 14       	cp	r12, r1
     bfe:	84 e8       	ldi	r24, 0x84	; 132
     c00:	d8 06       	cpc	r13, r24
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	e8 06       	cpc	r14, r24
     c06:	f1 04       	cpc	r15, r1
     c08:	91 f1       	breq	.+100    	; 0xc6e <Serial_open+0x17c>
     c0a:	80 e9       	ldi	r24, 0x90	; 144
     c0c:	c8 16       	cp	r12, r24
     c0e:	80 ed       	ldi	r24, 0xD0	; 208
     c10:	d8 06       	cpc	r13, r24
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	e8 06       	cpc	r14, r24
     c16:	f1 04       	cpc	r15, r1
     c18:	79 f1       	breq	.+94     	; 0xc78 <Serial_open+0x186>
     c1a:	c1 14       	cp	r12, r1
     c1c:	82 ec       	ldi	r24, 0xC2	; 194
     c1e:	d8 06       	cpc	r13, r24
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	e8 06       	cpc	r14, r24
     c24:	f1 04       	cpc	r15, r1
     c26:	69 f5       	brne	.+90     	; 0xc82 <Serial_open+0x190>
     c28:	40 e1       	ldi	r20, 0x10	; 16
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	2b c0       	rjmp	.+86     	; 0xc88 <Serial_open+0x196>
     c32:	40 e4       	ldi	r20, 0x40	; 64
     c34:	53 e0       	ldi	r21, 0x03	; 3
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	26 c0       	rjmp	.+76     	; 0xc88 <Serial_open+0x196>
     c3c:	4f ec       	ldi	r20, 0xCF	; 207
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <Serial_open+0x196>
     c46:	4a e8       	ldi	r20, 0x8A	; 138
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	1c c0       	rjmp	.+56     	; 0xc88 <Serial_open+0x196>
     c50:	44 e4       	ldi	r20, 0x44	; 68
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	17 c0       	rjmp	.+46     	; 0xc88 <Serial_open+0x196>
     c5a:	43 e3       	ldi	r20, 0x33	; 51
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <Serial_open+0x196>
     c64:	49 e1       	ldi	r20, 0x19	; 25
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0d c0       	rjmp	.+26     	; 0xc88 <Serial_open+0x196>
     c6e:	48 e0       	ldi	r20, 0x08	; 8
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <Serial_open+0x196>
     c78:	47 e0       	ldi	r20, 0x07	; 7
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <Serial_open+0x196>
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	5f ef       	ldi	r21, 0xFF	; 255
     c86:	ba 01       	movw	r22, r20
     c88:	8f b7       	in	r24, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	f8 01       	movw	r30, r16
     c8e:	eb 5f       	subi	r30, 0xFB	; 251
     c90:	fd 4f       	sbci	r31, 0xFD	; 253
     c92:	01 90       	ld	r0, Z+
     c94:	f0 81       	ld	r31, Z
     c96:	e0 2d       	mov	r30, r0
     c98:	55 83       	std	Z+5, r21	; 0x05
     c9a:	44 83       	std	Z+4, r20	; 0x04
     c9c:	b2 82       	std	Z+2, r11	; 0x02
     c9e:	98 e9       	ldi	r25, 0x98	; 152
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	8f bf       	out	0x3f, r24	; 63
     ca4:	78 94       	sei
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <Serial_open+0x1be>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	08 95       	ret

00000cc4 <Serial_read>:
}

int Serial_read(int port)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	1f 92       	push	r1
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	char qdata = 0;
     cce:	19 82       	std	Y+1, r1	; 0x01
	int data;
	
	if (Q_getc(ports[port].rx_qid, &qdata))
     cd0:	2a e0       	ldi	r18, 0x0A	; 10
     cd2:	ac 01       	movw	r20, r24
     cd4:	24 9f       	mul	r18, r20
     cd6:	c0 01       	movw	r24, r0
     cd8:	25 9f       	mul	r18, r21
     cda:	90 0d       	add	r25, r0
     cdc:	11 24       	eor	r1, r1
     cde:	fc 01       	movw	r30, r24
     ce0:	e3 5f       	subi	r30, 0xF3	; 243
     ce2:	fd 4f       	sbci	r31, 0xFD	; 253
     ce4:	be 01       	movw	r22, r28
     ce6:	6f 5f       	subi	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	80 81       	ld	r24, Z
     cec:	85 de       	rcall	.-758    	; 0x9f8 <Q_getc>
     cee:	88 23       	and	r24, r24
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <Serial_read+0x34>
	{
		data = qdata;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	90 e0       	ldi	r25, 0x00	; 0
		return data;
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <Serial_read+0x38>
	}
	else
	{
		return -1;
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <Serial_read_string>:
		i++;
	}
	return 1;
}

int Serial_read_string(int port, char * data, int data_length) {
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	7c 01       	movw	r14, r24
     d16:	6b 01       	movw	r12, r22
     d18:	8a 01       	movw	r16, r20
	char latest;
	int i = 0;
     d1a:	c0 e0       	ldi	r28, 0x00	; 0
     d1c:	d0 e0       	ldi	r29, 0x00	; 0
	
	//loop until end of data
	while (i < data_length) {
     d1e:	c0 17       	cp	r28, r16
     d20:	d1 07       	cpc	r29, r17
     d22:	8c f4       	brge	.+34     	; 0xd46 <Serial_read_string+0x42>
		//get latest character
		latest = Serial_read(port);
     d24:	c7 01       	movw	r24, r14
     d26:	ce df       	rcall	.-100    	; 0xcc4 <Serial_read>
		if (latest != 0xFF) {
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	59 f0       	breq	.+22     	; 0xd42 <Serial_read_string+0x3e>
     d2c:	f6 01       	movw	r30, r12
     d2e:	ec 0f       	add	r30, r28
     d30:	fd 1f       	adc	r31, r29
			if (latest == 0x0D) {
     d32:	8d 30       	cpi	r24, 0x0D	; 13
     d34:	21 f4       	brne	.+8      	; 0xd3e <Serial_read_string+0x3a>
				//the input has terminated
				data[i] = 0x00;//null terminate string
     d36:	10 82       	st	Z, r1
				return 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <Serial_read_string+0x46>
			}
			//write the next character into the buffer
			data[i++]=latest;
     d3e:	80 83       	st	Z, r24
     d40:	21 96       	adiw	r28, 0x01	; 1
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
     d42:	f1 d9       	rcall	.-3102   	; 0x126 <x_yield>
     d44:	ec cf       	rjmp	.-40     	; 0xd1e <Serial_read_string+0x1a>
	}
	//we've used more than the whole array, error
	return 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <Serial_write>:

int Serial_write(int port, char data)
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
	if (Q_putc(ports[port].tx_qid, data))
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	8c 9f       	mul	r24, r28
     d66:	f0 01       	movw	r30, r0
     d68:	8d 9f       	mul	r24, r29
     d6a:	f0 0d       	add	r31, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	e3 5f       	subi	r30, 0xF3	; 243
     d70:	fd 4f       	sbci	r31, 0xFD	; 253
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	fb dd       	rcall	.-1034   	; 0x96c <Q_putc>
     d76:	88 23       	and	r24, r24
     d78:	61 f0       	breq	.+24     	; 0xd92 <Serial_write+0x36>
	{
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line	
		regs[port]->ucsrb |= (1<<UDRIE0); 
     d7a:	cc 0f       	add	r28, r28
     d7c:	dd 1f       	adc	r29, r29
     d7e:	cb 5f       	subi	r28, 0xFB	; 251
     d80:	dd 4f       	sbci	r29, 0xFD	; 253
     d82:	e8 81       	ld	r30, Y
     d84:	f9 81       	ldd	r31, Y+1	; 0x01
     d86:	81 81       	ldd	r24, Z+1	; 0x01
     d88:	80 62       	ori	r24, 0x20	; 32
     d8a:	81 83       	std	Z+1, r24	; 0x01
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;	
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <Serial_write+0x3a>
	}
	return -1;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
	
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <Serial_write_string>:
	{
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	8c 01       	movw	r16, r24
     da6:	eb 01       	movw	r28, r22
	int i = 0;
	while( data[i] != 0x00) {
     da8:	69 91       	ld	r22, Y+
     daa:	66 23       	and	r22, r22
     dac:	19 f0       	breq	.+6      	; 0xdb4 <Serial_write_string+0x18>
		Serial_write(port, data[i]);
     dae:	c8 01       	movw	r24, r16
     db0:	d5 df       	rcall	.-86     	; 0xd5c <Serial_write>
     db2:	fa cf       	rjmp	.-12     	; 0xda8 <Serial_write_string+0xc>
		i++;
	}
	return 1;
}
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	0b b6       	in	r0, 0x3b	; 59
     dce:	0f 92       	push	r0
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	1f 92       	push	r1
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	80 91 0e 02 	lds	r24, 0x020E
     dfc:	fd dd       	rcall	.-1030   	; 0x9f8 <Q_getc>
     dfe:	88 23       	and	r24, r24
     e00:	21 f0       	breq	.+8      	; 0xe0a <__vector_26+0x48>
	{
		UDR0 = data;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	80 93 c6 00 	sts	0x00C6, r24
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
     e0a:	e0 91 05 02 	lds	r30, 0x0205
     e0e:	f0 91 06 02 	lds	r31, 0x0206
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	81 83       	std	Z+1, r24	; 0x01
	}
}
     e18:	0f 90       	pop	r0
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_37>:


ISR(USART1_UDRE_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	0b b6       	in	r0, 0x3b	; 59
     e50:	0f 92       	push	r0
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	1f 92       	push	r1
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
     e74:	be 01       	movw	r22, r28
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	80 91 18 02 	lds	r24, 0x0218
     e7e:	bc dd       	rcall	.-1160   	; 0x9f8 <Q_getc>
     e80:	88 23       	and	r24, r24
     e82:	21 f0       	breq	.+8      	; 0xe8c <__vector_37+0x48>
	{
		UDR1 = data;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	80 93 ce 00 	sts	0x00CE, r24
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
     e8c:	e0 91 07 02 	lds	r30, 0x0207
     e90:	f0 91 08 02 	lds	r31, 0x0208
     e94:	81 81       	ldd	r24, Z+1	; 0x01
     e96:	8f 7d       	andi	r24, 0xDF	; 223
     e98:	81 83       	std	Z+1, r24	; 0x01
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_52>:

ISR(USART2_UDRE_vect)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
     ef6:	be 01       	movw	r22, r28
     ef8:	6f 5f       	subi	r22, 0xFF	; 255
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	80 91 22 02 	lds	r24, 0x0222
     f00:	7b dd       	rcall	.-1290   	; 0x9f8 <Q_getc>
     f02:	88 23       	and	r24, r24
     f04:	21 f0       	breq	.+8      	; 0xf0e <__vector_52+0x48>
	{
		UDR2 = data;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	80 93 d6 00 	sts	0x00D6, r24
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
     f0e:	e0 91 09 02 	lds	r30, 0x0209
     f12:	f0 91 0a 02 	lds	r31, 0x020A
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	81 83       	std	Z+1, r24	; 0x01
	}
}
     f1c:	0f 90       	pop	r0
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	0f 90       	pop	r0
     f3c:	0b be       	out	0x3b, r0	; 59
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_55>:

ISR(USART3_UDRE_vect)
{
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	0b b6       	in	r0, 0x3b	; 59
     f54:	0f 92       	push	r0
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	1f 92       	push	r1
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
     f78:	be 01       	movw	r22, r28
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	80 91 2c 02 	lds	r24, 0x022C
     f82:	3a dd       	rcall	.-1420   	; 0x9f8 <Q_getc>
     f84:	88 23       	and	r24, r24
     f86:	21 f0       	breq	.+8      	; 0xf90 <__vector_55+0x48>
	{
		UDR3 = data;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	80 93 36 01 	sts	0x0136, r24
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
     f90:	e0 91 0b 02 	lds	r30, 0x020B
     f94:	f0 91 0c 02 	lds	r31, 0x020C
     f98:	81 81       	ldd	r24, Z+1	; 0x01
     f9a:	8f 7d       	andi	r24, 0xDF	; 223
     f9c:	81 83       	std	Z+1, r24	; 0x01
	}
}
     f9e:	0f 90       	pop	r0
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0b be       	out	0x3b, r0	; 59
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <__vector_25>:

ISR(USART0_RX_vect)
{
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	0b b6       	in	r0, 0x3b	; 59
     fd6:	0f 92       	push	r0
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
     ff0:	60 91 c6 00 	lds	r22, 0x00C6
     ff4:	80 91 0d 02 	lds	r24, 0x020D
     ff8:	b9 dc       	rcall	.-1678   	; 0x96c <Q_putc>
}
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0b be       	out	0x3b, r0	; 59
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <__vector_36>:

ISR(USART1_RX_vect)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	0b b6       	in	r0, 0x3b	; 59
    102c:	0f 92       	push	r0
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
    1046:	60 91 ce 00 	lds	r22, 0x00CE
    104a:	80 91 17 02 	lds	r24, 0x0217
    104e:	8e dc       	rcall	.-1764   	; 0x96c <Q_putc>
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	0f 90       	pop	r0
    106a:	0b be       	out	0x3b, r0	; 59
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_51>:

ISR(USART2_RX_vect)
{
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	0b b6       	in	r0, 0x3b	; 59
    1082:	0f 92       	push	r0
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
    109c:	60 91 d6 00 	lds	r22, 0x00D6
    10a0:	80 91 21 02 	lds	r24, 0x0221
    10a4:	63 dc       	rcall	.-1850   	; 0x96c <Q_putc>
}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0b be       	out	0x3b, r0	; 59
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_54>:

ISR(USART3_RX_vect)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	0b b6       	in	r0, 0x3b	; 59
    10d8:	0f 92       	push	r0
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
    10f2:	60 91 36 01 	lds	r22, 0x0136
    10f6:	80 91 2b 02 	lds	r24, 0x022B
    10fa:	38 dc       	rcall	.-1936   	; 0x96c <Q_putc>
}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0b be       	out	0x3b, r0	; 59
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__divmodhi4>:
    1122:	97 fb       	bst	r25, 7
    1124:	07 2e       	mov	r0, r23
    1126:	16 f4       	brtc	.+4      	; 0x112c <__divmodhi4+0xa>
    1128:	00 94       	com	r0
    112a:	06 d0       	rcall	.+12     	; 0x1138 <__divmodhi4_neg1>
    112c:	77 fd       	sbrc	r23, 7
    112e:	08 d0       	rcall	.+16     	; 0x1140 <__divmodhi4_neg2>
    1130:	0b d0       	rcall	.+22     	; 0x1148 <__udivmodhi4>
    1132:	07 fc       	sbrc	r0, 7
    1134:	05 d0       	rcall	.+10     	; 0x1140 <__divmodhi4_neg2>
    1136:	3e f4       	brtc	.+14     	; 0x1146 <__divmodhi4_exit>

00001138 <__divmodhi4_neg1>:
    1138:	90 95       	com	r25
    113a:	81 95       	neg	r24
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__divmodhi4_neg2>:
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255

00001146 <__divmodhi4_exit>:
    1146:	08 95       	ret

00001148 <__udivmodhi4>:
    1148:	aa 1b       	sub	r26, r26
    114a:	bb 1b       	sub	r27, r27
    114c:	51 e1       	ldi	r21, 0x11	; 17
    114e:	07 c0       	rjmp	.+14     	; 0x115e <__udivmodhi4_ep>

00001150 <__udivmodhi4_loop>:
    1150:	aa 1f       	adc	r26, r26
    1152:	bb 1f       	adc	r27, r27
    1154:	a6 17       	cp	r26, r22
    1156:	b7 07       	cpc	r27, r23
    1158:	10 f0       	brcs	.+4      	; 0x115e <__udivmodhi4_ep>
    115a:	a6 1b       	sub	r26, r22
    115c:	b7 0b       	sbc	r27, r23

0000115e <__udivmodhi4_ep>:
    115e:	88 1f       	adc	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	5a 95       	dec	r21
    1164:	a9 f7       	brne	.-22     	; 0x1150 <__udivmodhi4_loop>
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	08 95       	ret

00001170 <atoi>:
    1170:	fc 01       	movw	r30, r24
    1172:	88 27       	eor	r24, r24
    1174:	99 27       	eor	r25, r25
    1176:	e8 94       	clt
    1178:	21 91       	ld	r18, Z+
    117a:	20 32       	cpi	r18, 0x20	; 32
    117c:	e9 f3       	breq	.-6      	; 0x1178 <atoi+0x8>
    117e:	29 30       	cpi	r18, 0x09	; 9
    1180:	10 f0       	brcs	.+4      	; 0x1186 <atoi+0x16>
    1182:	2e 30       	cpi	r18, 0x0E	; 14
    1184:	c8 f3       	brcs	.-14     	; 0x1178 <atoi+0x8>
    1186:	2b 32       	cpi	r18, 0x2B	; 43
    1188:	39 f0       	breq	.+14     	; 0x1198 <atoi+0x28>
    118a:	2d 32       	cpi	r18, 0x2D	; 45
    118c:	31 f4       	brne	.+12     	; 0x119a <atoi+0x2a>
    118e:	68 94       	set
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <atoi+0x28>
    1192:	14 d0       	rcall	.+40     	; 0x11bc <__mulhi_const_10>
    1194:	82 0f       	add	r24, r18
    1196:	91 1d       	adc	r25, r1
    1198:	21 91       	ld	r18, Z+
    119a:	20 53       	subi	r18, 0x30	; 48
    119c:	2a 30       	cpi	r18, 0x0A	; 10
    119e:	c8 f3       	brcs	.-14     	; 0x1192 <atoi+0x22>
    11a0:	1e f4       	brtc	.+6      	; 0x11a8 <atoi+0x38>
    11a2:	90 95       	com	r25
    11a4:	81 95       	neg	r24
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	08 95       	ret

000011aa <strcmp>:
    11aa:	fb 01       	movw	r30, r22
    11ac:	dc 01       	movw	r26, r24
    11ae:	8d 91       	ld	r24, X+
    11b0:	01 90       	ld	r0, Z+
    11b2:	80 19       	sub	r24, r0
    11b4:	01 10       	cpse	r0, r1
    11b6:	d9 f3       	breq	.-10     	; 0x11ae <strcmp+0x4>
    11b8:	99 0b       	sbc	r25, r25
    11ba:	08 95       	ret

000011bc <__mulhi_const_10>:
    11bc:	7a e0       	ldi	r23, 0x0A	; 10
    11be:	97 9f       	mul	r25, r23
    11c0:	90 2d       	mov	r25, r0
    11c2:	87 9f       	mul	r24, r23
    11c4:	80 2d       	mov	r24, r0
    11c6:	91 0d       	add	r25, r1
    11c8:	11 24       	eor	r1, r1
    11ca:	08 95       	ret

000011cc <sprintf>:
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	2e 97       	sbiw	r28, 0x0e	; 14
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	0e 89       	ldd	r16, Y+22	; 0x16
    11e6:	1f 89       	ldd	r17, Y+23	; 0x17
    11e8:	86 e0       	ldi	r24, 0x06	; 6
    11ea:	8c 83       	std	Y+4, r24	; 0x04
    11ec:	1a 83       	std	Y+2, r17	; 0x02
    11ee:	09 83       	std	Y+1, r16	; 0x01
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	9f e7       	ldi	r25, 0x7F	; 127
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	ae 01       	movw	r20, r28
    11fa:	46 5e       	subi	r20, 0xE6	; 230
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	68 8d       	ldd	r22, Y+24	; 0x18
    1200:	79 8d       	ldd	r23, Y+25	; 0x19
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	11 d0       	rcall	.+34     	; 0x122a <vfprintf>
    1208:	2f 81       	ldd	r18, Y+7	; 0x07
    120a:	38 85       	ldd	r19, Y+8	; 0x08
    120c:	f8 01       	movw	r30, r16
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	10 82       	st	Z, r1
    1214:	2e 96       	adiw	r28, 0x0e	; 14
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	08 95       	ret

0000122a <vfprintf>:
    122a:	2f 92       	push	r2
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2c 97       	sbiw	r28, 0x0c	; 12
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	7c 01       	movw	r14, r24
    1260:	6b 01       	movw	r12, r22
    1262:	8a 01       	movw	r16, r20
    1264:	fc 01       	movw	r30, r24
    1266:	17 82       	std	Z+7, r1	; 0x07
    1268:	16 82       	std	Z+6, r1	; 0x06
    126a:	83 81       	ldd	r24, Z+3	; 0x03
    126c:	81 ff       	sbrs	r24, 1
    126e:	b0 c1       	rjmp	.+864    	; 0x15d0 <vfprintf+0x3a6>
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	4c 01       	movw	r8, r24
    1276:	f7 01       	movw	r30, r14
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	f6 01       	movw	r30, r12
    127c:	93 fd       	sbrc	r25, 3
    127e:	85 91       	lpm	r24, Z+
    1280:	93 ff       	sbrs	r25, 3
    1282:	81 91       	ld	r24, Z+
    1284:	6f 01       	movw	r12, r30
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <vfprintf+0x62>
    128a:	9e c1       	rjmp	.+828    	; 0x15c8 <vfprintf+0x39e>
    128c:	85 32       	cpi	r24, 0x25	; 37
    128e:	39 f4       	brne	.+14     	; 0x129e <vfprintf+0x74>
    1290:	93 fd       	sbrc	r25, 3
    1292:	85 91       	lpm	r24, Z+
    1294:	93 ff       	sbrs	r25, 3
    1296:	81 91       	ld	r24, Z+
    1298:	6f 01       	movw	r12, r30
    129a:	85 32       	cpi	r24, 0x25	; 37
    129c:	21 f4       	brne	.+8      	; 0x12a6 <vfprintf+0x7c>
    129e:	b7 01       	movw	r22, r14
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	c7 d1       	rcall	.+910    	; 0x1632 <fputc>
    12a4:	e8 cf       	rjmp	.-48     	; 0x1276 <vfprintf+0x4c>
    12a6:	51 2c       	mov	r5, r1
    12a8:	31 2c       	mov	r3, r1
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	20 32       	cpi	r18, 0x20	; 32
    12ae:	a0 f4       	brcc	.+40     	; 0x12d8 <vfprintf+0xae>
    12b0:	8b 32       	cpi	r24, 0x2B	; 43
    12b2:	69 f0       	breq	.+26     	; 0x12ce <vfprintf+0xa4>
    12b4:	30 f4       	brcc	.+12     	; 0x12c2 <vfprintf+0x98>
    12b6:	80 32       	cpi	r24, 0x20	; 32
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <vfprintf+0xa6>
    12ba:	83 32       	cpi	r24, 0x23	; 35
    12bc:	69 f4       	brne	.+26     	; 0x12d8 <vfprintf+0xae>
    12be:	20 61       	ori	r18, 0x10	; 16
    12c0:	2c c0       	rjmp	.+88     	; 0x131a <vfprintf+0xf0>
    12c2:	8d 32       	cpi	r24, 0x2D	; 45
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <vfprintf+0xaa>
    12c6:	80 33       	cpi	r24, 0x30	; 48
    12c8:	39 f4       	brne	.+14     	; 0x12d8 <vfprintf+0xae>
    12ca:	21 60       	ori	r18, 0x01	; 1
    12cc:	26 c0       	rjmp	.+76     	; 0x131a <vfprintf+0xf0>
    12ce:	22 60       	ori	r18, 0x02	; 2
    12d0:	24 60       	ori	r18, 0x04	; 4
    12d2:	23 c0       	rjmp	.+70     	; 0x131a <vfprintf+0xf0>
    12d4:	28 60       	ori	r18, 0x08	; 8
    12d6:	21 c0       	rjmp	.+66     	; 0x131a <vfprintf+0xf0>
    12d8:	27 fd       	sbrc	r18, 7
    12da:	27 c0       	rjmp	.+78     	; 0x132a <vfprintf+0x100>
    12dc:	30 ed       	ldi	r19, 0xD0	; 208
    12de:	38 0f       	add	r19, r24
    12e0:	3a 30       	cpi	r19, 0x0A	; 10
    12e2:	78 f4       	brcc	.+30     	; 0x1302 <vfprintf+0xd8>
    12e4:	26 ff       	sbrs	r18, 6
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfprintf+0xca>
    12e8:	fa e0       	ldi	r31, 0x0A	; 10
    12ea:	5f 9e       	mul	r5, r31
    12ec:	30 0d       	add	r19, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	53 2e       	mov	r5, r19
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <vfprintf+0xf0>
    12f4:	8a e0       	ldi	r24, 0x0A	; 10
    12f6:	38 9e       	mul	r3, r24
    12f8:	30 0d       	add	r19, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	33 2e       	mov	r3, r19
    12fe:	20 62       	ori	r18, 0x20	; 32
    1300:	0c c0       	rjmp	.+24     	; 0x131a <vfprintf+0xf0>
    1302:	8e 32       	cpi	r24, 0x2E	; 46
    1304:	21 f4       	brne	.+8      	; 0x130e <vfprintf+0xe4>
    1306:	26 fd       	sbrc	r18, 6
    1308:	5f c1       	rjmp	.+702    	; 0x15c8 <vfprintf+0x39e>
    130a:	20 64       	ori	r18, 0x40	; 64
    130c:	06 c0       	rjmp	.+12     	; 0x131a <vfprintf+0xf0>
    130e:	8c 36       	cpi	r24, 0x6C	; 108
    1310:	11 f4       	brne	.+4      	; 0x1316 <vfprintf+0xec>
    1312:	20 68       	ori	r18, 0x80	; 128
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0xf0>
    1316:	88 36       	cpi	r24, 0x68	; 104
    1318:	41 f4       	brne	.+16     	; 0x132a <vfprintf+0x100>
    131a:	f6 01       	movw	r30, r12
    131c:	93 fd       	sbrc	r25, 3
    131e:	85 91       	lpm	r24, Z+
    1320:	93 ff       	sbrs	r25, 3
    1322:	81 91       	ld	r24, Z+
    1324:	6f 01       	movw	r12, r30
    1326:	81 11       	cpse	r24, r1
    1328:	c1 cf       	rjmp	.-126    	; 0x12ac <vfprintf+0x82>
    132a:	98 2f       	mov	r25, r24
    132c:	9f 7d       	andi	r25, 0xDF	; 223
    132e:	95 54       	subi	r25, 0x45	; 69
    1330:	93 30       	cpi	r25, 0x03	; 3
    1332:	28 f4       	brcc	.+10     	; 0x133e <vfprintf+0x114>
    1334:	0c 5f       	subi	r16, 0xFC	; 252
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ff e3       	ldi	r31, 0x3F	; 63
    133a:	f9 83       	std	Y+1, r31	; 0x01
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <vfprintf+0x12e>
    133e:	83 36       	cpi	r24, 0x63	; 99
    1340:	31 f0       	breq	.+12     	; 0x134e <vfprintf+0x124>
    1342:	83 37       	cpi	r24, 0x73	; 115
    1344:	71 f0       	breq	.+28     	; 0x1362 <vfprintf+0x138>
    1346:	83 35       	cpi	r24, 0x53	; 83
    1348:	09 f0       	breq	.+2      	; 0x134c <vfprintf+0x122>
    134a:	57 c0       	rjmp	.+174    	; 0x13fa <vfprintf+0x1d0>
    134c:	21 c0       	rjmp	.+66     	; 0x1390 <vfprintf+0x166>
    134e:	f8 01       	movw	r30, r16
    1350:	80 81       	ld	r24, Z
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	0e 5f       	subi	r16, 0xFE	; 254
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	44 24       	eor	r4, r4
    135a:	43 94       	inc	r4
    135c:	51 2c       	mov	r5, r1
    135e:	54 01       	movw	r10, r8
    1360:	14 c0       	rjmp	.+40     	; 0x138a <vfprintf+0x160>
    1362:	38 01       	movw	r6, r16
    1364:	f2 e0       	ldi	r31, 0x02	; 2
    1366:	6f 0e       	add	r6, r31
    1368:	71 1c       	adc	r7, r1
    136a:	f8 01       	movw	r30, r16
    136c:	a0 80       	ld	r10, Z
    136e:	b1 80       	ldd	r11, Z+1	; 0x01
    1370:	26 ff       	sbrs	r18, 6
    1372:	03 c0       	rjmp	.+6      	; 0x137a <vfprintf+0x150>
    1374:	65 2d       	mov	r22, r5
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x154>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	c5 01       	movw	r24, r10
    1380:	2c 87       	std	Y+12, r18	; 0x0c
    1382:	4c d1       	rcall	.+664    	; 0x161c <strnlen>
    1384:	2c 01       	movw	r4, r24
    1386:	83 01       	movw	r16, r6
    1388:	2c 85       	ldd	r18, Y+12	; 0x0c
    138a:	2f 77       	andi	r18, 0x7F	; 127
    138c:	22 2e       	mov	r2, r18
    138e:	16 c0       	rjmp	.+44     	; 0x13bc <vfprintf+0x192>
    1390:	38 01       	movw	r6, r16
    1392:	f2 e0       	ldi	r31, 0x02	; 2
    1394:	6f 0e       	add	r6, r31
    1396:	71 1c       	adc	r7, r1
    1398:	f8 01       	movw	r30, r16
    139a:	a0 80       	ld	r10, Z
    139c:	b1 80       	ldd	r11, Z+1	; 0x01
    139e:	26 ff       	sbrs	r18, 6
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <vfprintf+0x17e>
    13a2:	65 2d       	mov	r22, r5
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <vfprintf+0x182>
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	7f ef       	ldi	r23, 0xFF	; 255
    13ac:	c5 01       	movw	r24, r10
    13ae:	2c 87       	std	Y+12, r18	; 0x0c
    13b0:	2a d1       	rcall	.+596    	; 0x1606 <strnlen_P>
    13b2:	2c 01       	movw	r4, r24
    13b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    13b6:	20 68       	ori	r18, 0x80	; 128
    13b8:	22 2e       	mov	r2, r18
    13ba:	83 01       	movw	r16, r6
    13bc:	23 fc       	sbrc	r2, 3
    13be:	19 c0       	rjmp	.+50     	; 0x13f2 <vfprintf+0x1c8>
    13c0:	83 2d       	mov	r24, r3
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	48 16       	cp	r4, r24
    13c6:	59 06       	cpc	r5, r25
    13c8:	a0 f4       	brcc	.+40     	; 0x13f2 <vfprintf+0x1c8>
    13ca:	b7 01       	movw	r22, r14
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	30 d1       	rcall	.+608    	; 0x1632 <fputc>
    13d2:	3a 94       	dec	r3
    13d4:	f5 cf       	rjmp	.-22     	; 0x13c0 <vfprintf+0x196>
    13d6:	f5 01       	movw	r30, r10
    13d8:	27 fc       	sbrc	r2, 7
    13da:	85 91       	lpm	r24, Z+
    13dc:	27 fe       	sbrs	r2, 7
    13de:	81 91       	ld	r24, Z+
    13e0:	5f 01       	movw	r10, r30
    13e2:	b7 01       	movw	r22, r14
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	25 d1       	rcall	.+586    	; 0x1632 <fputc>
    13e8:	31 10       	cpse	r3, r1
    13ea:	3a 94       	dec	r3
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	4f 1a       	sub	r4, r31
    13f0:	51 08       	sbc	r5, r1
    13f2:	41 14       	cp	r4, r1
    13f4:	51 04       	cpc	r5, r1
    13f6:	79 f7       	brne	.-34     	; 0x13d6 <vfprintf+0x1ac>
    13f8:	de c0       	rjmp	.+444    	; 0x15b6 <vfprintf+0x38c>
    13fa:	84 36       	cpi	r24, 0x64	; 100
    13fc:	11 f0       	breq	.+4      	; 0x1402 <vfprintf+0x1d8>
    13fe:	89 36       	cpi	r24, 0x69	; 105
    1400:	31 f5       	brne	.+76     	; 0x144e <vfprintf+0x224>
    1402:	f8 01       	movw	r30, r16
    1404:	27 ff       	sbrs	r18, 7
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <vfprintf+0x1ec>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	0c 5f       	subi	r16, 0xFC	; 252
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <vfprintf+0x1fc>
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	07 2e       	mov	r0, r23
    141c:	00 0c       	add	r0, r0
    141e:	88 0b       	sbc	r24, r24
    1420:	99 0b       	sbc	r25, r25
    1422:	0e 5f       	subi	r16, 0xFE	; 254
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	2f 76       	andi	r18, 0x6F	; 111
    1428:	72 2e       	mov	r7, r18
    142a:	97 ff       	sbrs	r25, 7
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <vfprintf+0x216>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	20 68       	ori	r18, 0x80	; 128
    143e:	72 2e       	mov	r7, r18
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	a4 01       	movw	r20, r8
    1446:	2d d1       	rcall	.+602    	; 0x16a2 <__ultoa_invert>
    1448:	a8 2e       	mov	r10, r24
    144a:	a8 18       	sub	r10, r8
    144c:	43 c0       	rjmp	.+134    	; 0x14d4 <vfprintf+0x2aa>
    144e:	85 37       	cpi	r24, 0x75	; 117
    1450:	29 f4       	brne	.+10     	; 0x145c <vfprintf+0x232>
    1452:	2f 7e       	andi	r18, 0xEF	; 239
    1454:	b2 2e       	mov	r11, r18
    1456:	2a e0       	ldi	r18, 0x0A	; 10
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	25 c0       	rjmp	.+74     	; 0x14a6 <vfprintf+0x27c>
    145c:	f2 2f       	mov	r31, r18
    145e:	f9 7f       	andi	r31, 0xF9	; 249
    1460:	bf 2e       	mov	r11, r31
    1462:	8f 36       	cpi	r24, 0x6F	; 111
    1464:	c1 f0       	breq	.+48     	; 0x1496 <vfprintf+0x26c>
    1466:	18 f4       	brcc	.+6      	; 0x146e <vfprintf+0x244>
    1468:	88 35       	cpi	r24, 0x58	; 88
    146a:	79 f0       	breq	.+30     	; 0x148a <vfprintf+0x260>
    146c:	ad c0       	rjmp	.+346    	; 0x15c8 <vfprintf+0x39e>
    146e:	80 37       	cpi	r24, 0x70	; 112
    1470:	19 f0       	breq	.+6      	; 0x1478 <vfprintf+0x24e>
    1472:	88 37       	cpi	r24, 0x78	; 120
    1474:	21 f0       	breq	.+8      	; 0x147e <vfprintf+0x254>
    1476:	a8 c0       	rjmp	.+336    	; 0x15c8 <vfprintf+0x39e>
    1478:	2f 2f       	mov	r18, r31
    147a:	20 61       	ori	r18, 0x10	; 16
    147c:	b2 2e       	mov	r11, r18
    147e:	b4 fe       	sbrs	r11, 4
    1480:	0d c0       	rjmp	.+26     	; 0x149c <vfprintf+0x272>
    1482:	8b 2d       	mov	r24, r11
    1484:	84 60       	ori	r24, 0x04	; 4
    1486:	b8 2e       	mov	r11, r24
    1488:	09 c0       	rjmp	.+18     	; 0x149c <vfprintf+0x272>
    148a:	24 ff       	sbrs	r18, 4
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <vfprintf+0x278>
    148e:	9f 2f       	mov	r25, r31
    1490:	96 60       	ori	r25, 0x06	; 6
    1492:	b9 2e       	mov	r11, r25
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <vfprintf+0x278>
    1496:	28 e0       	ldi	r18, 0x08	; 8
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <vfprintf+0x27c>
    149c:	20 e1       	ldi	r18, 0x10	; 16
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfprintf+0x27c>
    14a2:	20 e1       	ldi	r18, 0x10	; 16
    14a4:	32 e0       	ldi	r19, 0x02	; 2
    14a6:	f8 01       	movw	r30, r16
    14a8:	b7 fe       	sbrs	r11, 7
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <vfprintf+0x290>
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	0c 5f       	subi	r16, 0xFC	; 252
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <vfprintf+0x29c>
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 5f       	subi	r16, 0xFE	; 254
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	a4 01       	movw	r20, r8
    14c8:	ec d0       	rcall	.+472    	; 0x16a2 <__ultoa_invert>
    14ca:	a8 2e       	mov	r10, r24
    14cc:	a8 18       	sub	r10, r8
    14ce:	fb 2d       	mov	r31, r11
    14d0:	ff 77       	andi	r31, 0x7F	; 127
    14d2:	7f 2e       	mov	r7, r31
    14d4:	76 fe       	sbrs	r7, 6
    14d6:	0b c0       	rjmp	.+22     	; 0x14ee <vfprintf+0x2c4>
    14d8:	37 2d       	mov	r19, r7
    14da:	3e 7f       	andi	r19, 0xFE	; 254
    14dc:	a5 14       	cp	r10, r5
    14de:	50 f4       	brcc	.+20     	; 0x14f4 <vfprintf+0x2ca>
    14e0:	74 fe       	sbrs	r7, 4
    14e2:	0a c0       	rjmp	.+20     	; 0x14f8 <vfprintf+0x2ce>
    14e4:	72 fc       	sbrc	r7, 2
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <vfprintf+0x2ce>
    14e8:	37 2d       	mov	r19, r7
    14ea:	3e 7e       	andi	r19, 0xEE	; 238
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <vfprintf+0x2ce>
    14ee:	ba 2c       	mov	r11, r10
    14f0:	37 2d       	mov	r19, r7
    14f2:	03 c0       	rjmp	.+6      	; 0x14fa <vfprintf+0x2d0>
    14f4:	ba 2c       	mov	r11, r10
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <vfprintf+0x2d0>
    14f8:	b5 2c       	mov	r11, r5
    14fa:	34 ff       	sbrs	r19, 4
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x2ee>
    14fe:	fe 01       	movw	r30, r28
    1500:	ea 0d       	add	r30, r10
    1502:	f1 1d       	adc	r31, r1
    1504:	80 81       	ld	r24, Z
    1506:	80 33       	cpi	r24, 0x30	; 48
    1508:	11 f4       	brne	.+4      	; 0x150e <vfprintf+0x2e4>
    150a:	39 7e       	andi	r19, 0xE9	; 233
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <vfprintf+0x2f6>
    150e:	32 ff       	sbrs	r19, 2
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0x2f4>
    1512:	b3 94       	inc	r11
    1514:	b3 94       	inc	r11
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <vfprintf+0x2f6>
    1518:	83 2f       	mov	r24, r19
    151a:	86 78       	andi	r24, 0x86	; 134
    151c:	09 f0       	breq	.+2      	; 0x1520 <vfprintf+0x2f6>
    151e:	b3 94       	inc	r11
    1520:	33 fd       	sbrc	r19, 3
    1522:	12 c0       	rjmp	.+36     	; 0x1548 <vfprintf+0x31e>
    1524:	30 ff       	sbrs	r19, 0
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x30a>
    1528:	5a 2c       	mov	r5, r10
    152a:	b3 14       	cp	r11, r3
    152c:	18 f4       	brcc	.+6      	; 0x1534 <vfprintf+0x30a>
    152e:	53 0c       	add	r5, r3
    1530:	5b 18       	sub	r5, r11
    1532:	b3 2c       	mov	r11, r3
    1534:	b3 14       	cp	r11, r3
    1536:	60 f4       	brcc	.+24     	; 0x1550 <vfprintf+0x326>
    1538:	b7 01       	movw	r22, r14
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	3c 87       	std	Y+12, r19	; 0x0c
    1540:	78 d0       	rcall	.+240    	; 0x1632 <fputc>
    1542:	b3 94       	inc	r11
    1544:	3c 85       	ldd	r19, Y+12	; 0x0c
    1546:	f6 cf       	rjmp	.-20     	; 0x1534 <vfprintf+0x30a>
    1548:	b3 14       	cp	r11, r3
    154a:	10 f4       	brcc	.+4      	; 0x1550 <vfprintf+0x326>
    154c:	3b 18       	sub	r3, r11
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <vfprintf+0x328>
    1550:	31 2c       	mov	r3, r1
    1552:	34 ff       	sbrs	r19, 4
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <vfprintf+0x34e>
    1556:	b7 01       	movw	r22, r14
    1558:	80 e3       	ldi	r24, 0x30	; 48
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	3c 87       	std	Y+12, r19	; 0x0c
    155e:	69 d0       	rcall	.+210    	; 0x1632 <fputc>
    1560:	3c 85       	ldd	r19, Y+12	; 0x0c
    1562:	32 ff       	sbrs	r19, 2
    1564:	16 c0       	rjmp	.+44     	; 0x1592 <vfprintf+0x368>
    1566:	31 fd       	sbrc	r19, 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <vfprintf+0x346>
    156a:	88 e7       	ldi	r24, 0x78	; 120
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x34a>
    1570:	88 e5       	ldi	r24, 0x58	; 88
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b7 01       	movw	r22, r14
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <vfprintf+0x366>
    1578:	83 2f       	mov	r24, r19
    157a:	86 78       	andi	r24, 0x86	; 134
    157c:	51 f0       	breq	.+20     	; 0x1592 <vfprintf+0x368>
    157e:	31 ff       	sbrs	r19, 1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x35c>
    1582:	8b e2       	ldi	r24, 0x2B	; 43
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <vfprintf+0x35e>
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	37 fd       	sbrc	r19, 7
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	b7 01       	movw	r22, r14
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	50 d0       	rcall	.+160    	; 0x1632 <fputc>
    1592:	a5 14       	cp	r10, r5
    1594:	30 f4       	brcc	.+12     	; 0x15a2 <vfprintf+0x378>
    1596:	b7 01       	movw	r22, r14
    1598:	80 e3       	ldi	r24, 0x30	; 48
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	4a d0       	rcall	.+148    	; 0x1632 <fputc>
    159e:	5a 94       	dec	r5
    15a0:	f8 cf       	rjmp	.-16     	; 0x1592 <vfprintf+0x368>
    15a2:	aa 94       	dec	r10
    15a4:	f4 01       	movw	r30, r8
    15a6:	ea 0d       	add	r30, r10
    15a8:	f1 1d       	adc	r31, r1
    15aa:	80 81       	ld	r24, Z
    15ac:	b7 01       	movw	r22, r14
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	40 d0       	rcall	.+128    	; 0x1632 <fputc>
    15b2:	a1 10       	cpse	r10, r1
    15b4:	f6 cf       	rjmp	.-20     	; 0x15a2 <vfprintf+0x378>
    15b6:	33 20       	and	r3, r3
    15b8:	09 f4       	brne	.+2      	; 0x15bc <vfprintf+0x392>
    15ba:	5d ce       	rjmp	.-838    	; 0x1276 <vfprintf+0x4c>
    15bc:	b7 01       	movw	r22, r14
    15be:	80 e2       	ldi	r24, 0x20	; 32
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	37 d0       	rcall	.+110    	; 0x1632 <fputc>
    15c4:	3a 94       	dec	r3
    15c6:	f7 cf       	rjmp	.-18     	; 0x15b6 <vfprintf+0x38c>
    15c8:	f7 01       	movw	r30, r14
    15ca:	86 81       	ldd	r24, Z+6	; 0x06
    15cc:	97 81       	ldd	r25, Z+7	; 0x07
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x3aa>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	2c 96       	adiw	r28, 0x0c	; 12
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	7f 90       	pop	r7
    15fa:	6f 90       	pop	r6
    15fc:	5f 90       	pop	r5
    15fe:	4f 90       	pop	r4
    1600:	3f 90       	pop	r3
    1602:	2f 90       	pop	r2
    1604:	08 95       	ret

00001606 <strnlen_P>:
    1606:	fc 01       	movw	r30, r24
    1608:	05 90       	lpm	r0, Z+
    160a:	61 50       	subi	r22, 0x01	; 1
    160c:	70 40       	sbci	r23, 0x00	; 0
    160e:	01 10       	cpse	r0, r1
    1610:	d8 f7       	brcc	.-10     	; 0x1608 <strnlen_P+0x2>
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	8e 0f       	add	r24, r30
    1618:	9f 1f       	adc	r25, r31
    161a:	08 95       	ret

0000161c <strnlen>:
    161c:	fc 01       	movw	r30, r24
    161e:	61 50       	subi	r22, 0x01	; 1
    1620:	70 40       	sbci	r23, 0x00	; 0
    1622:	01 90       	ld	r0, Z+
    1624:	01 10       	cpse	r0, r1
    1626:	d8 f7       	brcc	.-10     	; 0x161e <strnlen+0x2>
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	8e 0f       	add	r24, r30
    162e:	9f 1f       	adc	r25, r31
    1630:	08 95       	ret

00001632 <fputc>:
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	fb 01       	movw	r30, r22
    163c:	23 81       	ldd	r18, Z+3	; 0x03
    163e:	21 fd       	sbrc	r18, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <fputc+0x16>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	28 c0       	rjmp	.+80     	; 0x1698 <fputc+0x66>
    1648:	22 ff       	sbrs	r18, 2
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <fputc+0x46>
    164c:	46 81       	ldd	r20, Z+6	; 0x06
    164e:	57 81       	ldd	r21, Z+7	; 0x07
    1650:	24 81       	ldd	r18, Z+4	; 0x04
    1652:	35 81       	ldd	r19, Z+5	; 0x05
    1654:	42 17       	cp	r20, r18
    1656:	53 07       	cpc	r21, r19
    1658:	44 f4       	brge	.+16     	; 0x166a <fputc+0x38>
    165a:	a0 81       	ld	r26, Z
    165c:	b1 81       	ldd	r27, Z+1	; 0x01
    165e:	9d 01       	movw	r18, r26
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	31 83       	std	Z+1, r19	; 0x01
    1666:	20 83       	st	Z, r18
    1668:	8c 93       	st	X, r24
    166a:	26 81       	ldd	r18, Z+6	; 0x06
    166c:	37 81       	ldd	r19, Z+7	; 0x07
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	37 83       	std	Z+7, r19	; 0x07
    1674:	26 83       	std	Z+6, r18	; 0x06
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <fputc+0x66>
    1678:	eb 01       	movw	r28, r22
    167a:	09 2f       	mov	r16, r25
    167c:	18 2f       	mov	r17, r24
    167e:	00 84       	ldd	r0, Z+8	; 0x08
    1680:	f1 85       	ldd	r31, Z+9	; 0x09
    1682:	e0 2d       	mov	r30, r0
    1684:	19 95       	eicall
    1686:	89 2b       	or	r24, r25
    1688:	e1 f6       	brne	.-72     	; 0x1642 <fputc+0x10>
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	9f 83       	std	Y+7, r25	; 0x07
    1692:	8e 83       	std	Y+6, r24	; 0x06
    1694:	81 2f       	mov	r24, r17
    1696:	90 2f       	mov	r25, r16
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <__ultoa_invert>:
    16a2:	fa 01       	movw	r30, r20
    16a4:	aa 27       	eor	r26, r26
    16a6:	28 30       	cpi	r18, 0x08	; 8
    16a8:	51 f1       	breq	.+84     	; 0x16fe <__ultoa_invert+0x5c>
    16aa:	20 31       	cpi	r18, 0x10	; 16
    16ac:	81 f1       	breq	.+96     	; 0x170e <__ultoa_invert+0x6c>
    16ae:	e8 94       	clt
    16b0:	6f 93       	push	r22
    16b2:	6e 7f       	andi	r22, 0xFE	; 254
    16b4:	6e 5f       	subi	r22, 0xFE	; 254
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	af 4f       	sbci	r26, 0xFF	; 255
    16be:	b1 e0       	ldi	r27, 0x01	; 1
    16c0:	3e d0       	rcall	.+124    	; 0x173e <__ultoa_invert+0x9c>
    16c2:	b4 e0       	ldi	r27, 0x04	; 4
    16c4:	3c d0       	rcall	.+120    	; 0x173e <__ultoa_invert+0x9c>
    16c6:	67 0f       	add	r22, r23
    16c8:	78 1f       	adc	r23, r24
    16ca:	89 1f       	adc	r24, r25
    16cc:	9a 1f       	adc	r25, r26
    16ce:	a1 1d       	adc	r26, r1
    16d0:	68 0f       	add	r22, r24
    16d2:	79 1f       	adc	r23, r25
    16d4:	8a 1f       	adc	r24, r26
    16d6:	91 1d       	adc	r25, r1
    16d8:	a1 1d       	adc	r26, r1
    16da:	6a 0f       	add	r22, r26
    16dc:	71 1d       	adc	r23, r1
    16de:	81 1d       	adc	r24, r1
    16e0:	91 1d       	adc	r25, r1
    16e2:	a1 1d       	adc	r26, r1
    16e4:	20 d0       	rcall	.+64     	; 0x1726 <__ultoa_invert+0x84>
    16e6:	09 f4       	brne	.+2      	; 0x16ea <__ultoa_invert+0x48>
    16e8:	68 94       	set
    16ea:	3f 91       	pop	r19
    16ec:	2a e0       	ldi	r18, 0x0A	; 10
    16ee:	26 9f       	mul	r18, r22
    16f0:	11 24       	eor	r1, r1
    16f2:	30 19       	sub	r19, r0
    16f4:	30 5d       	subi	r19, 0xD0	; 208
    16f6:	31 93       	st	Z+, r19
    16f8:	de f6       	brtc	.-74     	; 0x16b0 <__ultoa_invert+0xe>
    16fa:	cf 01       	movw	r24, r30
    16fc:	08 95       	ret
    16fe:	46 2f       	mov	r20, r22
    1700:	47 70       	andi	r20, 0x07	; 7
    1702:	40 5d       	subi	r20, 0xD0	; 208
    1704:	41 93       	st	Z+, r20
    1706:	b3 e0       	ldi	r27, 0x03	; 3
    1708:	0f d0       	rcall	.+30     	; 0x1728 <__ultoa_invert+0x86>
    170a:	c9 f7       	brne	.-14     	; 0x16fe <__ultoa_invert+0x5c>
    170c:	f6 cf       	rjmp	.-20     	; 0x16fa <__ultoa_invert+0x58>
    170e:	46 2f       	mov	r20, r22
    1710:	4f 70       	andi	r20, 0x0F	; 15
    1712:	40 5d       	subi	r20, 0xD0	; 208
    1714:	4a 33       	cpi	r20, 0x3A	; 58
    1716:	18 f0       	brcs	.+6      	; 0x171e <__ultoa_invert+0x7c>
    1718:	49 5d       	subi	r20, 0xD9	; 217
    171a:	31 fd       	sbrc	r19, 1
    171c:	40 52       	subi	r20, 0x20	; 32
    171e:	41 93       	st	Z+, r20
    1720:	02 d0       	rcall	.+4      	; 0x1726 <__ultoa_invert+0x84>
    1722:	a9 f7       	brne	.-22     	; 0x170e <__ultoa_invert+0x6c>
    1724:	ea cf       	rjmp	.-44     	; 0x16fa <__ultoa_invert+0x58>
    1726:	b4 e0       	ldi	r27, 0x04	; 4
    1728:	a6 95       	lsr	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	ba 95       	dec	r27
    1734:	c9 f7       	brne	.-14     	; 0x1728 <__ultoa_invert+0x86>
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	61 05       	cpc	r22, r1
    173a:	71 05       	cpc	r23, r1
    173c:	08 95       	ret
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	0a 2e       	mov	r0, r26
    1744:	06 94       	lsr	r0
    1746:	57 95       	ror	r21
    1748:	47 95       	ror	r20
    174a:	37 95       	ror	r19
    174c:	27 95       	ror	r18
    174e:	ba 95       	dec	r27
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0xa2>
    1752:	62 0f       	add	r22, r18
    1754:	73 1f       	adc	r23, r19
    1756:	84 1f       	adc	r24, r20
    1758:	95 1f       	adc	r25, r21
    175a:	a0 1d       	adc	r26, r0
    175c:	08 95       	ret

0000175e <_exit>:
    175e:	f8 94       	cli

00001760 <__stop_program>:
    1760:	ff cf       	rjmp	.-2      	; 0x1760 <__stop_program>
