
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800200  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a84  00800284  00800284  000010da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001150  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019cb  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  00002d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d6  00000000  00000000  00003751  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a2d  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000072a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	a8 c1       	rjmp	.+848    	; 0x3a6 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	f7 c6       	rjmp	.+3566   	; 0xe54 <__vector_25>
  66:	00 00       	nop
  68:	f1 c5       	rjmp	.+3042   	; 0xc4c <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	0c c7       	rjmp	.+3608   	; 0xeaa <__vector_36>
  92:	00 00       	nop
  94:	1c c6       	rjmp	.+3128   	; 0xcce <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	19 c7       	rjmp	.+3634   	; 0xf00 <__vector_51>
  ce:	00 00       	nop
  d0:	3f c6       	rjmp	.+3198   	; 0xd50 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3e c7       	rjmp	.+3708   	; 0xf56 <__vector_54>
  da:	00 00       	nop
  dc:	7a c6       	rjmp	.+3316   	; 0xdd2 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 38       	cpi	r26, 0x84	; 132
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2d e0       	ldi	r18, 0x0D	; 13
 110:	a4 e8       	ldi	r26, 0x84	; 132
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	cb d2       	rcall	.+1430   	; 0x6b6 <main>
 120:	4e c7       	rjmp	.+3740   	; 0xfbe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
 124:	2f 92       	push	r2
		push  r3
 126:	3f 92       	push	r3
		push  r4
 128:	4f 92       	push	r4
		push  r5
 12a:	5f 92       	push	r5
		push  r6
 12c:	6f 92       	push	r6
		push  r7
 12e:	7f 92       	push	r7
		push  r8
 130:	8f 92       	push	r8
		push  r9
 132:	9f 92       	push	r9
		push  r10
 134:	af 92       	push	r10
		push  r11
 136:	bf 92       	push	r11
		push  r12
 138:	cf 92       	push	r12
		push  r13
 13a:	df 92       	push	r13
		push  r14
 13c:	ef 92       	push	r14
		push  r15
 13e:	ff 92       	push	r15
		push  r16
 140:	0f 93       	push	r16
		push  r17
 142:	1f 93       	push	r17
		push  r28
 144:	cf 93       	push	r28
		push  r29
 146:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
 148:	20 91 91 02 	lds	r18, 0x0291
		lds   r19,x_thread_mask
 14c:	30 91 c5 0a 	lds	r19, 0x0AC5

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
 150:	f8 94       	cli
		in		r14,SPL
 152:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
 154:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
 156:	78 94       	sei


		ldi		r30,lo8(stack)
 158:	e3 e9       	ldi	r30, 0x93	; 147
		ldi		r31,hi8(stack)
 15a:	f2 e0       	ldi	r31, 0x02	; 2
		lsl		r18
 15c:	22 0f       	add	r18, r18
		lsl		r18
 15e:	22 0f       	add	r18, r18
		add		r30,r18
 160:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
 162:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
 164:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
 166:	f0 82       	st	Z, r15

00000168 <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
 168:	20 91 c4 0a 	lds	r18, 0x0AC4
		lds		r19,x_delay_status
 16c:	30 91 92 02 	lds	r19, 0x0292
		lds		r20,x_suspend_status
 170:	40 91 b3 02 	lds	r20, 0x02B3
		or		r18,r19
 174:	23 2b       	or	r18, r19
		or		r18,r20
 176:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
 178:	30 91 91 02 	lds	r19, 0x0291
		lds		r20, x_thread_mask
 17c:	40 91 c5 0a 	lds	r20, 0x0AC5
		ldi		r22,NUM_THREADS		;max number of threads
 180:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
 182:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
 184:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
 186:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
 188:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
 18a:	08 f4       	brcc	.+2      	; 0x18e <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
 18c:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
 18e:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
 190:	42 23       	and	r20, r18
		breq	restore				;break out if READY
 192:	19 f0       	breq	.+6      	; 0x19a <restore>
		dec		r22					;decrement thread count
 194:	6a 95       	dec	r22
		brne	1b					;back to test next thread
 196:	b1 f7       	brne	.-20     	; 0x184 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
 198:	e7 cf       	rjmp	.-50     	; 0x168 <x_schedule>

0000019a <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
 19a:	30 93 91 02 	sts	0x0291, r19
		sts		x_thread_mask,r23
 19e:	70 93 c5 0a 	sts	0x0AC5, r23

		ldi		r30,lo8(stack)
 1a2:	e3 e9       	ldi	r30, 0x93	; 147
		ldi		r31,hi8(stack)
 1a4:	f2 e0       	ldi	r31, 0x02	; 2
		lsl		r19
 1a6:	33 0f       	add	r19, r19
		lsl		r19
 1a8:	33 0f       	add	r19, r19
		add		r30,r19
 1aa:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
 1ac:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
 1ae:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
 1b0:	30 81       	ld	r19, Z
		
		cli
 1b2:	f8 94       	cli
		out		SPL,r18		;restore SP
 1b4:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
 1b6:	3e bf       	out	0x3e, r19	; 62
		sei
 1b8:	78 94       	sei


		// Restore registers
		pop		r29
 1ba:	df 91       	pop	r29
		pop		r28
 1bc:	cf 91       	pop	r28
		pop		r17
 1be:	1f 91       	pop	r17
		pop		r16
 1c0:	0f 91       	pop	r16
		pop		r15
 1c2:	ff 90       	pop	r15
		pop		r14
 1c4:	ef 90       	pop	r14
		pop		r13
 1c6:	df 90       	pop	r13
		pop		r12
 1c8:	cf 90       	pop	r12
		pop		r11
 1ca:	bf 90       	pop	r11
		pop		r10
 1cc:	af 90       	pop	r10
		pop		r9
 1ce:	9f 90       	pop	r9
		pop		r8
 1d0:	8f 90       	pop	r8
		pop		r7
 1d2:	7f 90       	pop	r7
		pop		r6
 1d4:	6f 90       	pop	r6
		pop		r5
 1d6:	5f 90       	pop	r5
		pop		r4
 1d8:	4f 90       	pop	r4
		pop		r3
 1da:	3f 90       	pop	r3
		pop		r2
 1dc:	2f 90       	pop	r2

		// Return to next thread
		ret
 1de:	08 95       	ret

000001e0 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
 1e0:	ec ee       	ldi	r30, 0xEC	; 236
		ldi r31,hi8(bitmask8_table)
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
 1e4:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
 1e6:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
 1e8:	84 91       	lpm	r24, Z
		ret
 1ea:	08 95       	ret

000001ec <bitmask8_table>:
 1ec:	01 02       	muls	r16, r17
 1ee:	04 08       	sbc	r0, r4
 1f0:	10 20       	and	r1, r0
 1f2:	40 80       	ld	r4, Z

000001f4 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
 1f4:	68 2f       	mov	r22, r24
		or  r22,r25
 1f6:	69 2b       	or	r22, r25
		nop
 1f8:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
 1fa:	31 f0       	breq	.+12     	; 0x208 <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
 1fc:	05 d0       	rcall	.+10     	; 0x208 <delay_usec+0x14>
		rjmp	3f      // 2 cycles
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <delay_usec+0xc>
3:	
		nop		// 1 cycle
 200:	00 00       	nop
		sbiw	r24,1   // 2 cycles
 202:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
 204:	d9 f7       	brne	.-10     	; 0x1fc <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
 206:	00 00       	nop
1:
 208:	08 95       	ret

0000020a <x_new>:
   long val;
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
      val = x_system_counter;
   }
   return val;
}
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	c8 2f       	mov	r28, r24
 210:	d4 2f       	mov	r29, r20
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	dc 01       	movw	r26, r24
 216:	aa 0f       	add	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	aa 0f       	add	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	ad 01       	movw	r20, r26
 220:	4d 56       	subi	r20, 0x6D	; 109
 222:	5d 4f       	sbci	r21, 0xFD	; 253
 224:	da 01       	movw	r26, r20
 226:	12 96       	adiw	r26, 0x02	; 2
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	13 97       	sbiw	r26, 0x03	; 3
 22e:	60 83       	st	Z, r22
 230:	9f 01       	movw	r18, r30
 232:	21 50       	subi	r18, 0x01	; 1
 234:	31 09       	sbc	r19, r1
 236:	d9 01       	movw	r26, r18
 238:	7c 93       	st	X, r23
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	31 09       	sbc	r19, r1
 23e:	d9 01       	movw	r26, r18
 240:	1c 92       	st	X, r1
 242:	75 97       	sbiw	r30, 0x15	; 21
 244:	da 01       	movw	r26, r20
 246:	ed 93       	st	X+, r30
 248:	fc 93       	st	X, r31
 24a:	ca df       	rcall	.-108    	; 0x1e0 <bit2mask8>
 24c:	dd 23       	and	r29, r29
 24e:	41 f0       	breq	.+16     	; 0x260 <x_new+0x56>
 250:	98 2f       	mov	r25, r24
 252:	90 95       	com	r25
 254:	80 91 c4 0a 	lds	r24, 0x0AC4
 258:	98 23       	and	r25, r24
 25a:	90 93 c4 0a 	sts	0x0AC4, r25
 25e:	05 c0       	rjmp	.+10     	; 0x26a <x_new+0x60>
 260:	90 91 c4 0a 	lds	r25, 0x0AC4
 264:	98 2b       	or	r25, r24
 266:	90 93 c4 0a 	sts	0x0AC4, r25
 26a:	80 91 91 02 	lds	r24, 0x0291
 26e:	c8 13       	cpse	r28, r24
 270:	01 c0       	rjmp	.+2      	; 0x274 <x_new+0x6a>
 272:	7a df       	rcall	.-268    	; 0x168 <x_schedule>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <init_System_Timer>:
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	84 bd       	out	0x24, r24	; 36
 27e:	9a ef       	ldi	r25, 0xFA	; 250
 280:	97 bd       	out	0x27, r25	; 39
 282:	80 93 6e 00 	sts	0x006E, r24
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	85 bd       	out	0x25, r24	; 37
 28a:	08 95       	ret

0000028c <x_init>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	f8 94       	cli
 292:	8e ef       	ldi	r24, 0xFE	; 254
 294:	80 93 c4 0a 	sts	0x0AC4, r24
 298:	10 92 b3 02 	sts	0x02B3, r1
 29c:	10 92 92 02 	sts	0x0292, r1
 2a0:	10 92 91 02 	sts	0x0291, r1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 c5 0a 	sts	0x0AC5, r24
 2aa:	c3 e9       	ldi	r28, 0x93	; 147
 2ac:	d2 e0       	ldi	r29, 0x02	; 2
 2ae:	83 eb       	ldi	r24, 0xB3	; 179
 2b0:	93 e0       	ldi	r25, 0x03	; 3
 2b2:	99 83       	std	Y+1, r25	; 0x01
 2b4:	88 83       	st	Y, r24
 2b6:	9b 83       	std	Y+3, r25	; 0x03
 2b8:	8a 83       	std	Y+2, r24	; 0x02
 2ba:	83 eb       	ldi	r24, 0xB3	; 179
 2bc:	94 e0       	ldi	r25, 0x04	; 4
 2be:	9d 83       	std	Y+5, r25	; 0x05
 2c0:	8c 83       	std	Y+4, r24	; 0x04
 2c2:	9f 83       	std	Y+7, r25	; 0x07
 2c4:	8e 83       	std	Y+6, r24	; 0x06
 2c6:	83 eb       	ldi	r24, 0xB3	; 179
 2c8:	95 e0       	ldi	r25, 0x05	; 5
 2ca:	99 87       	std	Y+9, r25	; 0x09
 2cc:	88 87       	std	Y+8, r24	; 0x08
 2ce:	9b 87       	std	Y+11, r25	; 0x0b
 2d0:	8a 87       	std	Y+10, r24	; 0x0a
 2d2:	83 eb       	ldi	r24, 0xB3	; 179
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	9d 87       	std	Y+13, r25	; 0x0d
 2d8:	8c 87       	std	Y+12, r24	; 0x0c
 2da:	9f 87       	std	Y+15, r25	; 0x0f
 2dc:	8e 87       	std	Y+14, r24	; 0x0e
 2de:	83 eb       	ldi	r24, 0xB3	; 179
 2e0:	97 e0       	ldi	r25, 0x07	; 7
 2e2:	99 8b       	std	Y+17, r25	; 0x11
 2e4:	88 8b       	std	Y+16, r24	; 0x10
 2e6:	9b 8b       	std	Y+19, r25	; 0x13
 2e8:	8a 8b       	std	Y+18, r24	; 0x12
 2ea:	83 eb       	ldi	r24, 0xB3	; 179
 2ec:	98 e0       	ldi	r25, 0x08	; 8
 2ee:	9d 8b       	std	Y+21, r25	; 0x15
 2f0:	8c 8b       	std	Y+20, r24	; 0x14
 2f2:	9f 8b       	std	Y+23, r25	; 0x17
 2f4:	8e 8b       	std	Y+22, r24	; 0x16
 2f6:	83 eb       	ldi	r24, 0xB3	; 179
 2f8:	99 e0       	ldi	r25, 0x09	; 9
 2fa:	99 8f       	std	Y+25, r25	; 0x19
 2fc:	88 8f       	std	Y+24, r24	; 0x18
 2fe:	9b 8f       	std	Y+27, r25	; 0x1b
 300:	8a 8f       	std	Y+26, r24	; 0x1a
 302:	83 eb       	ldi	r24, 0xB3	; 179
 304:	9a e0       	ldi	r25, 0x0A	; 10
 306:	9d 8f       	std	Y+29, r25	; 0x1d
 308:	8c 8f       	std	Y+28, r24	; 0x1c
 30a:	9f 8f       	std	Y+31, r25	; 0x1f
 30c:	8e 8f       	std	Y+30, r24	; 0x1e
 30e:	8a ea       	ldi	r24, 0xAA	; 170
 310:	80 93 b4 02 	sts	0x02B4, r24
 314:	80 93 b4 03 	sts	0x03B4, r24
 318:	80 93 b4 04 	sts	0x04B4, r24
 31c:	80 93 b4 05 	sts	0x05B4, r24
 320:	80 93 b4 06 	sts	0x06B4, r24
 324:	80 93 b4 07 	sts	0x07B4, r24
 328:	80 93 b4 08 	sts	0x08B4, r24
 32c:	80 93 b4 09 	sts	0x09B4, r24
 330:	a4 df       	rcall	.-184    	; 0x27a <init_System_Timer>
 332:	ed b7       	in	r30, 0x3d	; 61
 334:	fe b7       	in	r31, 0x3e	; 62
 336:	a8 81       	ld	r26, Y
 338:	b9 81       	ldd	r27, Y+1	; 0x01
 33a:	85 81       	ldd	r24, Z+5	; 0x05
 33c:	8c 93       	st	X, r24
 33e:	a8 81       	ld	r26, Y
 340:	b9 81       	ldd	r27, Y+1	; 0x01
 342:	84 81       	ldd	r24, Z+4	; 0x04
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	8c 93       	st	X, r24
 348:	a8 81       	ld	r26, Y
 34a:	b9 81       	ldd	r27, Y+1	; 0x01
 34c:	83 81       	ldd	r24, Z+3	; 0x03
 34e:	12 97       	sbiw	r26, 0x02	; 2
 350:	8c 93       	st	X, r24
 352:	a8 81       	ld	r26, Y
 354:	b9 81       	ldd	r27, Y+1	; 0x01
 356:	82 81       	ldd	r24, Z+2	; 0x02
 358:	13 97       	sbiw	r26, 0x03	; 3
 35a:	8c 93       	st	X, r24
 35c:	88 81       	ld	r24, Y
 35e:	99 81       	ldd	r25, Y+1	; 0x01
 360:	21 81       	ldd	r18, Z+1	; 0x01
 362:	fc 01       	movw	r30, r24
 364:	34 97       	sbiw	r30, 0x04	; 4
 366:	20 83       	st	Z, r18
 368:	88 81       	ld	r24, Y
 36a:	99 81       	ldd	r25, Y+1	; 0x01
 36c:	05 97       	sbiw	r24, 0x05	; 5
 36e:	9e bf       	out	0x3e, r25	; 62
 370:	8d bf       	out	0x3d, r24	; 61
 372:	78 94       	sei
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <x_delay>:
 37a:	9c 01       	movw	r18, r24
 37c:	9f b7       	in	r25, 0x3f	; 63
 37e:	f8 94       	cli
 380:	e0 91 91 02 	lds	r30, 0x0291
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ec 54       	subi	r30, 0x4C	; 76
 38c:	f5 4f       	sbci	r31, 0xF5	; 245
 38e:	31 83       	std	Z+1, r19	; 0x01
 390:	20 83       	st	Z, r18
 392:	20 91 92 02 	lds	r18, 0x0292
 396:	80 91 c5 0a 	lds	r24, 0x0AC5
 39a:	82 2b       	or	r24, r18
 39c:	80 93 92 02 	sts	0x0292, r24
 3a0:	9f bf       	out	0x3f, r25	; 63
 3a2:	c0 ce       	rjmp	.-640    	; 0x124 <x_yield>
 3a4:	08 95       	ret

000003a6 <__vector_21>:
                zero. If a thread is delayed and its counter reaches zero, then it
                is made READY and may be scheduled to run.

----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	0b b6       	in	r0, 0x3b	; 59
 3b2:	0f 92       	push	r0
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31

   // Increment system counter
   x_system_counter++;
 3c8:	80 91 84 02 	lds	r24, 0x0284
 3cc:	90 91 85 02 	lds	r25, 0x0285
 3d0:	a0 91 86 02 	lds	r26, 0x0286
 3d4:	b0 91 87 02 	lds	r27, 0x0287
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	a1 1d       	adc	r26, r1
 3dc:	b1 1d       	adc	r27, r1
 3de:	80 93 84 02 	sts	0x0284, r24
 3e2:	90 93 85 02 	sts	0x0285, r25
 3e6:	a0 93 86 02 	sts	0x0286, r26
 3ea:	b0 93 87 02 	sts	0x0287, r27
 3ee:	30 91 92 02 	lds	r19, 0x0292
 3f2:	e4 eb       	ldi	r30, 0xB4	; 180
 3f4:	fa e0       	ldi	r31, 0x0A	; 10
 3f6:	44 ec       	ldi	r20, 0xC4	; 196
 3f8:	5a e0       	ldi	r21, 0x0A	; 10

   char msk = 0x01;  // start with thread 0
 3fa:	21 e0       	ldi	r18, 0x01	; 1

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
      (*pdelay)--;
 3fc:	80 81       	ld	r24, Z
 3fe:	91 81       	ldd	r25, Z+1	; 0x01
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	81 93       	st	Z+, r24
 404:	91 93       	st	Z+, r25
      if(*pdelay == 0){
 406:	89 2b       	or	r24, r25
 408:	19 f4       	brne	.+6      	; 0x410 <__vector_21+0x6a>
         x_delay_status &= ~msk;
 40a:	82 2f       	mov	r24, r18
 40c:	80 95       	com	r24
 40e:	38 23       	and	r19, r24
      }
      msk <<= 1;
 410:	22 0f       	add	r18, r18

   char msk = 0x01;  // start with thread 0

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
 412:	e4 17       	cp	r30, r20
 414:	f5 07       	cpc	r31, r21
 416:	91 f7       	brne	.-28     	; 0x3fc <__vector_21+0x56>
 418:	30 93 92 02 	sts	0x0292, r19
      }
      msk <<= 1;
      pdelay++;
   }
   
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0b be       	out	0x3b, r0	; 59
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
 43e:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
 440:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
 442:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
 444:	8f ed       	ldi	r24, 0xDF	; 223
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	d5 de       	rcall	.-598    	; 0x1f4 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
 44a:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 44c:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
 44e:	85 e4       	ldi	r24, 0x45	; 69
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	d0 de       	rcall	.-608    	; 0x1f4 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
 454:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
 456:	85 ee       	ldi	r24, 0xE5	; 229
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	cc de       	rcall	.-616    	; 0x1f4 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
 45c:	c2 95       	swap	r28
 45e:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	8c 27       	eor	r24, r28
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
 468:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
 46a:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
 46c:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 46e:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
 470:	8e e0       	ldi	r24, 0x0E	; 14
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	bf de       	rcall	.-642    	; 0x1f4 <delay_usec>
	
	return(PINE & (1 << PE4));
 476:	8c b1       	in	r24, 0x0c	; 12
}
 478:	80 71       	andi	r24, 0x10	; 16
 47a:	08 95       	ret

0000047c <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
 47c:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
 47e:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	09 f4       	brne	.+2      	; 0x486 <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
 484:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
 486:	8b e3       	ldi	r24, 0x3B	; 59
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	b4 de       	rcall	.-664    	; 0x1f4 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
 48c:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
 48e:	6c 98       	cbi	0x0d, 4	; 13
 490:	08 95       	ret

00000492 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	c0 e0       	ldi	r28, 0x00	; 0
 49e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
 4a0:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
 4a2:	ee 24       	eor	r14, r14
 4a4:	e3 94       	inc	r14
 4a6:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
 4a8:	df df       	rcall	.-66     	; 0x468 <ow_read_bit>
 4aa:	88 23       	and	r24, r24
 4ac:	41 f0       	breq	.+16     	; 0x4be <ow_read_byte+0x2c>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
 4ae:	c7 01       	movw	r24, r14
 4b0:	0c 2e       	mov	r0, r28
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <ow_read_byte+0x26>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <ow_read_byte+0x22>
 4bc:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
 4be:	83 e1       	ldi	r24, 0x13	; 19
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	98 de       	rcall	.-720    	; 0x1f4 <delay_usec>
 4c4:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
 4c6:	c8 30       	cpi	r28, 0x08	; 8
 4c8:	d1 05       	cpc	r29, r1
 4ca:	71 f7       	brne	.-36     	; 0x4a8 <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
 4cc:	81 2f       	mov	r24, r17
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	08 95       	ret

000004da <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
 4e4:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
 4e6:	08 2f       	mov	r16, r24
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	c8 01       	movw	r24, r16
 4ec:	0c 2e       	mov	r0, r28
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <ow_write_byte+0x1a>
 4f0:	95 95       	asr	r25
 4f2:	87 95       	ror	r24
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
 4f8:	81 70       	andi	r24, 0x01	; 1
 4fa:	c0 df       	rcall	.-128    	; 0x47c <ow_write_bit>
 4fc:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
 4fe:	c8 30       	cpi	r28, 0x08	; 8
 500:	d1 05       	cpc	r29, r1
 502:	99 f7       	brne	.-26     	; 0x4ea <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
 504:	87 e7       	ldi	r24, 0x77	; 119
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	75 de       	rcall	.-790    	; 0x1f4 <delay_usec>
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
 514:	ef 92       	push	r14
 516:	ff 92       	push	r15
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	2a 97       	sbiw	r28, 0x0a	; 10
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
	char get[10];
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	//char temp_f;
	ow_reset();
 530:	86 df       	rcall	.-244    	; 0x43e <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
 532:	8c ec       	ldi	r24, 0xCC	; 204
 534:	d2 df       	rcall	.-92     	; 0x4da <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
 536:	84 e4       	ldi	r24, 0x44	; 68
 538:	d0 df       	rcall	.-96     	; 0x4da <ow_write_byte>
	delay_usec(119); //wait 120us
 53a:	87 e7       	ldi	r24, 0x77	; 119
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	5a de       	rcall	.-844    	; 0x1f4 <delay_usec>
	ow_reset();
 540:	7e df       	rcall	.-260    	; 0x43e <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
 542:	8c ec       	ldi	r24, 0xCC	; 204
 544:	ca df       	rcall	.-108    	; 0x4da <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
 546:	8e eb       	ldi	r24, 0xBE	; 190
 548:	c8 df       	rcall	.-112    	; 0x4da <ow_write_byte>
 54a:	8e 01       	movw	r16, r28
 54c:	0f 5f       	subi	r16, 0xFF	; 255
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	7e 01       	movw	r14, r28
 552:	8a e0       	ldi	r24, 0x0A	; 10
 554:	e8 0e       	add	r14, r24
 556:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
 558:	9c df       	rcall	.-200    	; 0x492 <ow_read_byte>
 55a:	f8 01       	movw	r30, r16
 55c:	81 93       	st	Z+, r24
 55e:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
 560:	ee 15       	cp	r30, r14
 562:	ff 05       	cpc	r31, r15
 564:	c9 f7       	brne	.-14     	; 0x558 <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
 566:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
 568:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
 56a:	91 38       	cpi	r25, 0x81	; 129
 56c:	40 f4       	brcc	.+16     	; 0x57e <ow_read_temperature+0x6a>
 56e:	86 95       	lsr	r24
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
 570:	99 23       	and	r25, r25
 572:	1c f4       	brge	.+6      	; 0x57a <ow_read_temperature+0x66>
 574:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
 576:	86 95       	lsr	r24
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
 578:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	03 c0       	rjmp	.+6      	; 0x584 <ow_read_temperature+0x70>
	}
	temp_msb = get[1]; // Sign byte + lsbit
	temp_lsb = get[0]; // Temp data plus lsb
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
 57e:	99 23       	and	r25, r25
 580:	e4 f7       	brge	.-8      	; 0x57a <ow_read_temperature+0x66>
 582:	f8 cf       	rjmp	.-16     	; 0x574 <ow_read_temperature+0x60>
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
 584:	2a 96       	adiw	r28, 0x0a	; 10
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	08 95       	ret

0000059e <io_controller>:
volatile char service_mode;

/*
 * Handles serial I/O
 */
void io_controller(void) {
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	27 97       	sbiw	r28, 0x07	; 7
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
	Serial_open(0,19200,SERIAL_8N1);
 5b2:	26 e0       	ldi	r18, 0x06	; 6
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	5b e4       	ldi	r21, 0x4B	; 75
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	aa d1       	rcall	.+852    	; 0x918 <Serial_open>
			if(!strcmp(opcode,"SM")) {//set service mode to true;
				str = "Entering Service Mode\n\r";
				Serial_write_string(0,str,strlen(str));
				service_mode = 1;
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
				service_mode = !service_mode;
 5c4:	11 e0       	ldi	r17, 0x01	; 1
	char opcode[opcode_len];
	char message[64];
	char * str = message;
	while(1) {
		//if we are able to read a command
		if(Serial_read_string(0,command,command_len)) {
 5c6:	44 e0       	ldi	r20, 0x04	; 4
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	be 01       	movw	r22, r28
 5cc:	6f 5f       	subi	r22, 0xFF	; 255
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	c6 d2       	rcall	.+1420   	; 0xb62 <Serial_read_string>
 5d6:	89 2b       	or	r24, r25
 5d8:	09 f4       	brne	.+2      	; 0x5dc <io_controller+0x3e>
 5da:	4a c0       	rjmp	.+148    	; 0x670 <io_controller+0xd2>
			opcode[0] = command[0];
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	8d 83       	std	Y+5, r24	; 0x05
			opcode[1] = command[1];
 5e0:	8a 81       	ldd	r24, Y+2	; 0x02
 5e2:	8e 83       	std	Y+6, r24	; 0x06
			if(!strcmp(opcode,"SM")) {//set service mode to true;
 5e4:	60 e3       	ldi	r22, 0x30	; 48
 5e6:	72 e0       	ldi	r23, 0x02	; 2
 5e8:	ce 01       	movw	r24, r28
 5ea:	05 96       	adiw	r24, 0x05	; 5
 5ec:	df d4       	rcall	.+2494   	; 0xfac <strcmp>
 5ee:	89 2b       	or	r24, r25
 5f0:	51 f4       	brne	.+20     	; 0x606 <io_controller+0x68>
				str = "Entering Service Mode\n\r";
				Serial_write_string(0,str,strlen(str));
 5f2:	47 e1       	ldi	r20, 0x17	; 23
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	63 e3       	ldi	r22, 0x33	; 51
 5f8:	72 e0       	ldi	r23, 0x02	; 2
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	09 d3       	rcall	.+1554   	; 0xc12 <Serial_write_string>
				service_mode = 1;
 600:	10 93 c7 0a 	sts	0x0AC7, r17
 604:	32 c0       	rjmp	.+100    	; 0x66a <io_controller+0xcc>
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
 606:	6b e4       	ldi	r22, 0x4B	; 75
 608:	72 e0       	ldi	r23, 0x02	; 2
 60a:	ce 01       	movw	r24, r28
 60c:	05 96       	adiw	r24, 0x05	; 5
 60e:	ce d4       	rcall	.+2460   	; 0xfac <strcmp>
 610:	89 2b       	or	r24, r25
 612:	d9 f4       	brne	.+54     	; 0x64a <io_controller+0xac>
				service_mode = !service_mode;
 614:	90 91 c7 0a 	lds	r25, 0x0AC7
 618:	81 2f       	mov	r24, r17
 61a:	91 11       	cpse	r25, r1
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	80 93 c7 0a 	sts	0x0AC7, r24
				if (service_mode) {
 622:	80 91 c7 0a 	lds	r24, 0x0AC7
 626:	88 23       	and	r24, r24
 628:	41 f0       	breq	.+16     	; 0x63a <io_controller+0x9c>
					str = "Entering Service Mode\n\r";
					Serial_write_string(0,str,strlen(str));
 62a:	47 e1       	ldi	r20, 0x17	; 23
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	63 e3       	ldi	r22, 0x33	; 51
 630:	72 e0       	ldi	r23, 0x02	; 2
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	ed d2       	rcall	.+1498   	; 0xc12 <Serial_write_string>
 638:	18 c0       	rjmp	.+48     	; 0x66a <io_controller+0xcc>
				} else {
					str = "Entering Operating Mode\n\r";
					Serial_write_string(0,str,strlen(str));
 63a:	49 e1       	ldi	r20, 0x19	; 25
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	6e e4       	ldi	r22, 0x4E	; 78
 640:	72 e0       	ldi	r23, 0x02	; 2
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	e5 d2       	rcall	.+1482   	; 0xc12 <Serial_write_string>
 648:	10 c0       	rjmp	.+32     	; 0x66a <io_controller+0xcc>
				}
			} else if (!strcmp(opcode, "OM")) {//set service mode to false
 64a:	68 e6       	ldi	r22, 0x68	; 104
 64c:	72 e0       	ldi	r23, 0x02	; 2
 64e:	ce 01       	movw	r24, r28
 650:	05 96       	adiw	r24, 0x05	; 5
 652:	ac d4       	rcall	.+2392   	; 0xfac <strcmp>
 654:	89 2b       	or	r24, r25
 656:	49 f4       	brne	.+18     	; 0x66a <io_controller+0xcc>
				str = "Entering Operating Mode\n\r";
				Serial_write_string(0,str,strlen(str));
 658:	49 e1       	ldi	r20, 0x19	; 25
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	6e e4       	ldi	r22, 0x4E	; 78
 65e:	72 e0       	ldi	r23, 0x02	; 2
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	d6 d2       	rcall	.+1452   	; 0xc12 <Serial_write_string>
				service_mode = 0;
 666:	10 92 c7 0a 	sts	0x0AC7, r1
			}
			
			if(service_mode) {
 66a:	80 91 c7 0a 	lds	r24, 0x0AC7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <io_controller+0xe0>
				//do non-service mode things
				
			}
		} else {
			str = "Error reading command\n\r";
			Serial_write_string(0,str,strlen(str));
 670:	47 e1       	ldi	r20, 0x17	; 23
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	6b e6       	ldi	r22, 0x6B	; 107
 676:	72 e0       	ldi	r23, 0x02	; 2
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	ca d2       	rcall	.+1428   	; 0xc12 <Serial_write_string>
		}
		x_delay(1000);
 67e:	88 ee       	ldi	r24, 0xE8	; 232
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	7b de       	rcall	.-778    	; 0x37a <x_delay>
	}
 684:	a0 cf       	rjmp	.-192    	; 0x5c6 <io_controller+0x28>

00000686 <box_controller>:
/*
 * Controller for the box
 */
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
 686:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(1000);
		//_delay_ms(1000);
		PORTB ^= 0x10;
 688:	c0 e1       	ldi	r28, 0x10	; 16
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(1000);
 68a:	88 ee       	ldi	r24, 0xE8	; 232
 68c:	93 e0       	ldi	r25, 0x03	; 3
 68e:	75 de       	rcall	.-790    	; 0x37a <x_delay>
		//_delay_ms(1000);
		PORTB ^= 0x10;
 690:	85 b1       	in	r24, 0x05	; 5
 692:	8c 27       	eor	r24, r28
 694:	85 b9       	out	0x05, r24	; 5
		//x_yield();
	}
 696:	f9 cf       	rjmp	.-14     	; 0x68a <box_controller+0x4>

00000698 <sensor_controller>:
/*
 * Polls sensor for temperature every second
 */
void sensor_controller(void) {
	//Check for sensor presence
	char presence = ow_reset();
 698:	d2 de       	rcall	.-604    	; 0x43e <ow_reset>
	//keep checking until we detect a sensor
	while (! presence) {
 69a:	81 11       	cpse	r24, r1
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <sensor_controller+0x10>
		presence = ow_reset();
 69e:	cf de       	rcall	.-610    	; 0x43e <ow_reset>
 6a0:	c8 2f       	mov	r28, r24
		//give other threads a chance to act during this process
		x_yield();
 6a2:	40 dd       	rcall	.-1408   	; 0x124 <x_yield>
 */
void sensor_controller(void) {
	//Check for sensor presence
	char presence = ow_reset();
	//keep checking until we detect a sensor
	while (! presence) {
 6a4:	cc 23       	and	r28, r28
 6a6:	d9 f3       	breq	.-10     	; 0x69e <sensor_controller+0x6>
		//give other threads a chance to act during this process
		x_yield();
	}
	//monitor temperature
	while(1) {
		last_temp = ow_read_temperature();
 6a8:	35 df       	rcall	.-406    	; 0x514 <ow_read_temperature>
 6aa:	80 93 88 02 	sts	0x0288, r24
		x_delay(250);
 6ae:	8a ef       	ldi	r24, 0xFA	; 250
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	63 de       	rcall	.-826    	; 0x37a <x_delay>
	}
 6b4:	f9 cf       	rjmp	.-14     	; 0x6a8 <sensor_controller+0x10>

000006b6 <main>:
}

int main(void)
{
	x_init();
 6b6:	ea dd       	rcall	.-1068   	; 0x28c <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	6f ec       	ldi	r22, 0xCF	; 207
 6bc:	72 e0       	ldi	r23, 0x02	; 2
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	a4 dd       	rcall	.-1208   	; 0x20a <x_new>
	x_new(1, sensor_controller, 1);
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	6c e4       	ldi	r22, 0x4C	; 76
 6c6:	73 e0       	ldi	r23, 0x03	; 3
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	9f dd       	rcall	.-1218   	; 0x20a <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	63 e4       	ldi	r22, 0x43	; 67
 6d0:	73 e0       	ldi	r23, 0x03	; 3
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	9a dd       	rcall	.-1228   	; 0x20a <x_new>
}
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	08 95       	ret

000006dc <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 6e0:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 1)
 6e2:	fc 01       	movw	r30, r24
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	e8 53       	subi	r30, 0x38	; 56
 6f2:	f5 4f       	sbci	r31, 0xF5	; 245
 6f4:	23 81       	ldd	r18, Z+3	; 0x03
 6f6:	21 30       	cpi	r18, 0x01	; 1
 6f8:	09 f4       	brne	.+2      	; 0x6fc <Q_putc+0x20>
 6fa:	58 c0       	rjmp	.+176    	; 0x7ac <Q_putc+0xd0>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 6fc:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6fe:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
 700:	fc 01       	movw	r30, r24
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	e8 53       	subi	r30, 0x38	; 56
 710:	f5 4f       	sbci	r31, 0xF5	; 245
 712:	20 81       	ld	r18, Z
 714:	c6 81       	ldd	r28, Z+6	; 0x06
 716:	d7 81       	ldd	r29, Z+7	; 0x07
 718:	c2 0f       	add	r28, r18
 71a:	d1 1d       	adc	r29, r1
 71c:	68 83       	st	Y, r22
			qcb->available += 1;
 71e:	24 81       	ldd	r18, Z+4	; 0x04
 720:	35 81       	ldd	r19, Z+5	; 0x05
 722:	2f 5f       	subi	r18, 0xFF	; 255
 724:	3f 4f       	sbci	r19, 0xFF	; 255
 726:	35 83       	std	Z+5, r19	; 0x05
 728:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 2)
 72a:	23 81       	ldd	r18, Z+3	; 0x03
 72c:	22 30       	cpi	r18, 0x02	; 2
 72e:	51 f4       	brne	.+20     	; 0x744 <Q_putc+0x68>
			{
				qcb->flags = 0;
 730:	fc 01       	movw	r30, r24
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	e8 53       	subi	r30, 0x38	; 56
 740:	f5 4f       	sbci	r31, 0xF5	; 245
 742:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
 744:	fc 01       	movw	r30, r24
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	e8 53       	subi	r30, 0x38	; 56
 754:	f5 4f       	sbci	r31, 0xF5	; 245
 756:	30 81       	ld	r19, Z
 758:	22 81       	ldd	r18, Z+2	; 0x02
 75a:	63 2f       	mov	r22, r19
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	42 2f       	mov	r20, r18
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	64 23       	and	r22, r20
 768:	75 23       	and	r23, r21
 76a:	41 81       	ldd	r20, Z+1	; 0x01
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	64 17       	cp	r22, r20
 770:	75 07       	cpc	r23, r21
 772:	69 f0       	breq	.+26     	; 0x78e <Q_putc+0xb2>
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	fc 01       	movw	r30, r24
 782:	e8 53       	subi	r30, 0x38	; 56
 784:	f5 4f       	sbci	r31, 0xF5	; 245
 786:	3f 5f       	subi	r19, 0xFF	; 255
 788:	23 23       	and	r18, r19
 78a:	20 83       	st	Z, r18
 78c:	11 c0       	rjmp	.+34     	; 0x7b0 <Q_putc+0xd4>
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	fc 01       	movw	r30, r24
 79c:	e8 53       	subi	r30, 0x38	; 56
 79e:	f5 4f       	sbci	r31, 0xF5	; 245
 7a0:	3f 5f       	subi	r19, 0xFF	; 255
 7a2:	23 23       	and	r18, r19
 7a4:	20 83       	st	Z, r18
				qcb->flags = 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	83 83       	std	Z+3, r24	; 0x03
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <Q_putc+0xd4>
		}
		return 1;
	}
	else
	{
		return 0;
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <Q_putc+0xd8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7b0:	af bf       	out	0x3f, r26	; 63
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
			}
		}
		return 1;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 7be:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 2)
 7c0:	fc 01       	movw	r30, r24
 7c2:	ee 0f       	add	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	e8 53       	subi	r30, 0x38	; 56
 7d0:	f5 4f       	sbci	r31, 0xF5	; 245
 7d2:	23 81       	ldd	r18, Z+3	; 0x03
 7d4:	22 30       	cpi	r18, 0x02	; 2
 7d6:	09 f4       	brne	.+2      	; 0x7da <Q_getc+0x20>
 7d8:	5a c0       	rjmp	.+180    	; 0x88e <Q_getc+0xd4>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 7da:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7dc:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
 7de:	fc 01       	movw	r30, r24
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	e8 53       	subi	r30, 0x38	; 56
 7ee:	f5 4f       	sbci	r31, 0xF5	; 245
 7f0:	21 81       	ldd	r18, Z+1	; 0x01
 7f2:	c6 81       	ldd	r28, Z+6	; 0x06
 7f4:	d7 81       	ldd	r29, Z+7	; 0x07
 7f6:	c2 0f       	add	r28, r18
 7f8:	d1 1d       	adc	r29, r1
 7fa:	28 81       	ld	r18, Y
 7fc:	eb 01       	movw	r28, r22
 7fe:	28 83       	st	Y, r18
			qcb->available -= 1;
 800:	24 81       	ldd	r18, Z+4	; 0x04
 802:	35 81       	ldd	r19, Z+5	; 0x05
 804:	21 50       	subi	r18, 0x01	; 1
 806:	31 09       	sbc	r19, r1
 808:	35 83       	std	Z+5, r19	; 0x05
 80a:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 1)
 80c:	23 81       	ldd	r18, Z+3	; 0x03
 80e:	21 30       	cpi	r18, 0x01	; 1
 810:	51 f4       	brne	.+20     	; 0x826 <Q_getc+0x6c>
			{
				qcb->flags = 0;
 812:	fc 01       	movw	r30, r24
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	e8 53       	subi	r30, 0x38	; 56
 822:	f5 4f       	sbci	r31, 0xF5	; 245
 824:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
 826:	fc 01       	movw	r30, r24
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	ee 0f       	add	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	e8 53       	subi	r30, 0x38	; 56
 836:	f5 4f       	sbci	r31, 0xF5	; 245
 838:	31 81       	ldd	r19, Z+1	; 0x01
 83a:	22 81       	ldd	r18, Z+2	; 0x02
 83c:	63 2f       	mov	r22, r19
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	42 2f       	mov	r20, r18
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	64 23       	and	r22, r20
 84a:	75 23       	and	r23, r21
 84c:	40 81       	ld	r20, Z
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	64 17       	cp	r22, r20
 852:	75 07       	cpc	r23, r21
 854:	69 f0       	breq	.+26     	; 0x870 <Q_getc+0xb6>
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	fc 01       	movw	r30, r24
 864:	e8 53       	subi	r30, 0x38	; 56
 866:	f5 4f       	sbci	r31, 0xF5	; 245
 868:	3f 5f       	subi	r19, 0xFF	; 255
 86a:	23 23       	and	r18, r19
 86c:	21 83       	std	Z+1, r18	; 0x01
 86e:	11 c0       	rjmp	.+34     	; 0x892 <Q_getc+0xd8>
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	fc 01       	movw	r30, r24
 87e:	e8 53       	subi	r30, 0x38	; 56
 880:	f5 4f       	sbci	r31, 0xF5	; 245
 882:	3f 5f       	subi	r19, 0xFF	; 255
 884:	23 23       	and	r18, r19
 886:	21 83       	std	Z+1, r18	; 0x01
				qcb->flags = 2;
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	83 83       	std	Z+3, r24	; 0x03
 88c:	02 c0       	rjmp	.+4      	; 0x892 <Q_getc+0xd8>
			}
		}
		return 1;
	}
	return 0;
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <Q_getc+0xdc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 892:	af bf       	out	0x3f, r26	; 63
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
			}
		}
		return 1;
 894:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
 89c:	9c 01       	movw	r18, r24
 89e:	21 50       	subi	r18, 0x01	; 1
 8a0:	31 09       	sbc	r19, r1
 8a2:	2f 3f       	cpi	r18, 0xFF	; 255
 8a4:	31 05       	cpc	r19, r1
 8a6:	09 f0       	breq	.+2      	; 0x8aa <Q_create+0xe>
 8a8:	98 f5       	brcc	.+102    	; 0x910 <Q_create+0x74>
 8aa:	28 23       	and	r18, r24
 8ac:	39 23       	and	r19, r25
 8ae:	23 2b       	or	r18, r19
 8b0:	89 f5       	brne	.+98     	; 0x914 <Q_create+0x78>
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
 8b2:	20 91 89 02 	lds	r18, 0x0289
 8b6:	22 23       	and	r18, r18
 8b8:	41 f0       	breq	.+16     	; 0x8ca <Q_create+0x2e>
 8ba:	ea e8       	ldi	r30, 0x8A	; 138
 8bc:	f2 e0       	ldi	r31, 0x02	; 2
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (occupied[i] == false)
 8c2:	41 91       	ld	r20, Z+
 8c4:	41 11       	cpse	r20, r1
 8c6:	1d c0       	rjmp	.+58     	; 0x902 <Q_create+0x66>
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <Q_create+0x32>
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
		{
			queues[i].in = 0;
 8ce:	f9 01       	movw	r30, r18
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	ee 0f       	add	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	e8 53       	subi	r30, 0x38	; 56
 8de:	f5 4f       	sbci	r31, 0xF5	; 245
 8e0:	10 82       	st	Z, r1
			queues[i].out = 0;
 8e2:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
 8e4:	81 50       	subi	r24, 0x01	; 1
 8e6:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
 8ec:	15 82       	std	Z+5, r1	; 0x05
 8ee:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
 8f0:	77 83       	std	Z+7, r23	; 0x07
 8f2:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
 8f4:	f9 01       	movw	r30, r18
 8f6:	e7 57       	subi	r30, 0x77	; 119
 8f8:	fd 4f       	sbci	r31, 0xFD	; 253
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	80 83       	st	Z, r24
			return i;
 8fe:	82 2f       	mov	r24, r18
 900:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 902:	2f 5f       	subi	r18, 0xFF	; 255
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	28 30       	cpi	r18, 0x08	; 8
 908:	31 05       	cpc	r19, r1
 90a:	d9 f6       	brne	.-74     	; 0x8c2 <Q_create+0x26>
			queues[i].pQ = pbuffer;
			occupied[i] = true;
			return i;
		}
	}
	return -1;
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	08 95       	ret

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	08 95       	ret
 914:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
 916:	08 95       	ret

00000918 <Serial_open>:
}

int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
}
 918:	6f 92       	push	r6
 91a:	7f 92       	push	r7
 91c:	8f 92       	push	r8
 91e:	9f 92       	push	r9
 920:	af 92       	push	r10
 922:	bf 92       	push	r11
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	1f 93       	push	r17
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	84 30       	cpi	r24, 0x04	; 4
 934:	91 05       	cpc	r25, r1
 936:	08 f0       	brcs	.+2      	; 0x93a <Serial_open+0x22>
 938:	e1 c0       	rjmp	.+450    	; 0xafc <Serial_open+0x1e4>
 93a:	12 2f       	mov	r17, r18
 93c:	6a 01       	movw	r12, r20
 93e:	7b 01       	movw	r14, r22
 940:	3c 01       	movw	r6, r24
 942:	4c 01       	movw	r8, r24
 944:	88 0c       	add	r8, r8
 946:	99 1c       	adc	r9, r9
 948:	5c 01       	movw	r10, r24
 94a:	aa 0c       	add	r10, r10
 94c:	bb 1c       	adc	r11, r11
 94e:	aa 0c       	add	r10, r10
 950:	bb 1c       	adc	r11, r11
 952:	aa 0c       	add	r10, r10
 954:	bb 1c       	adc	r11, r11
 956:	c4 01       	movw	r24, r8
 958:	8a 0d       	add	r24, r10
 95a:	9b 1d       	adc	r25, r11
 95c:	ec 01       	movw	r28, r24
 95e:	c8 5f       	subi	r28, 0xF8	; 248
 960:	dd 4f       	sbci	r29, 0xFD	; 253
 962:	6a 81       	ldd	r22, Y+2	; 0x02
 964:	7b 81       	ldd	r23, Y+3	; 0x03
 966:	8c 81       	ldd	r24, Y+4	; 0x04
 968:	9d 81       	ldd	r25, Y+5	; 0x05
 96a:	98 df       	rcall	.-208    	; 0x89c <Q_create>
 96c:	88 83       	st	Y, r24
 96e:	6e 81       	ldd	r22, Y+6	; 0x06
 970:	7f 81       	ldd	r23, Y+7	; 0x07
 972:	88 85       	ldd	r24, Y+8	; 0x08
 974:	99 85       	ldd	r25, Y+9	; 0x09
 976:	92 df       	rcall	.-220    	; 0x89c <Q_create>
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	f4 01       	movw	r30, r8
 97c:	e0 50       	subi	r30, 0x00	; 0
 97e:	fe 4f       	sbci	r31, 0xFE	; 254
 980:	01 90       	ld	r0, Z+
 982:	f0 81       	ld	r31, Z
 984:	e0 2d       	mov	r30, r0
 986:	80 81       	ld	r24, Z
 988:	82 60       	ori	r24, 0x02	; 2
 98a:	80 83       	st	Z, r24
 98c:	80 e8       	ldi	r24, 0x80	; 128
 98e:	c8 16       	cp	r12, r24
 990:	80 e7       	ldi	r24, 0x70	; 112
 992:	d8 06       	cpc	r13, r24
 994:	e1 04       	cpc	r14, r1
 996:	f1 04       	cpc	r15, r1
 998:	09 f4       	brne	.+2      	; 0x99c <Serial_open+0x84>
 99a:	73 c0       	rjmp	.+230    	; 0xa82 <Serial_open+0x16a>
 99c:	54 f5       	brge	.+84     	; 0x9f2 <Serial_open+0xda>
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	c8 16       	cp	r12, r24
 9a2:	85 e2       	ldi	r24, 0x25	; 37
 9a4:	d8 06       	cpc	r13, r24
 9a6:	e1 04       	cpc	r14, r1
 9a8:	f1 04       	cpc	r15, r1
 9aa:	09 f4       	brne	.+2      	; 0x9ae <Serial_open+0x96>
 9ac:	5b c0       	rjmp	.+182    	; 0xa64 <Serial_open+0x14c>
 9ae:	8c f4       	brge	.+34     	; 0x9d2 <Serial_open+0xba>
 9b0:	80 e6       	ldi	r24, 0x60	; 96
 9b2:	c8 16       	cp	r12, r24
 9b4:	89 e0       	ldi	r24, 0x09	; 9
 9b6:	d8 06       	cpc	r13, r24
 9b8:	e1 04       	cpc	r14, r1
 9ba:	f1 04       	cpc	r15, r1
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <Serial_open+0xa8>
 9be:	48 c0       	rjmp	.+144    	; 0xa50 <Serial_open+0x138>
 9c0:	80 ec       	ldi	r24, 0xC0	; 192
 9c2:	c8 16       	cp	r12, r24
 9c4:	82 e1       	ldi	r24, 0x12	; 18
 9c6:	d8 06       	cpc	r13, r24
 9c8:	e1 04       	cpc	r14, r1
 9ca:	f1 04       	cpc	r15, r1
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <Serial_open+0xb8>
 9ce:	45 c0       	rjmp	.+138    	; 0xa5a <Serial_open+0x142>
 9d0:	7b c0       	rjmp	.+246    	; 0xac8 <Serial_open+0x1b0>
 9d2:	80 e4       	ldi	r24, 0x40	; 64
 9d4:	c8 16       	cp	r12, r24
 9d6:	88 e3       	ldi	r24, 0x38	; 56
 9d8:	d8 06       	cpc	r13, r24
 9da:	e1 04       	cpc	r14, r1
 9dc:	f1 04       	cpc	r15, r1
 9de:	09 f4       	brne	.+2      	; 0x9e2 <Serial_open+0xca>
 9e0:	46 c0       	rjmp	.+140    	; 0xa6e <Serial_open+0x156>
 9e2:	c1 14       	cp	r12, r1
 9e4:	8b e4       	ldi	r24, 0x4B	; 75
 9e6:	d8 06       	cpc	r13, r24
 9e8:	e1 04       	cpc	r14, r1
 9ea:	f1 04       	cpc	r15, r1
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <Serial_open+0xd8>
 9ee:	44 c0       	rjmp	.+136    	; 0xa78 <Serial_open+0x160>
 9f0:	6b c0       	rjmp	.+214    	; 0xac8 <Serial_open+0x1b0>
 9f2:	c1 14       	cp	r12, r1
 9f4:	8c e2       	ldi	r24, 0x2C	; 44
 9f6:	d8 06       	cpc	r13, r24
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	e8 06       	cpc	r14, r24
 9fc:	f1 04       	cpc	r15, r1
 9fe:	09 f4       	brne	.+2      	; 0xa02 <Serial_open+0xea>
 a00:	4f c0       	rjmp	.+158    	; 0xaa0 <Serial_open+0x188>
 a02:	6c f4       	brge	.+26     	; 0xa1e <Serial_open+0x106>
 a04:	c1 14       	cp	r12, r1
 a06:	86 e9       	ldi	r24, 0x96	; 150
 a08:	d8 06       	cpc	r13, r24
 a0a:	e1 04       	cpc	r14, r1
 a0c:	f1 04       	cpc	r15, r1
 a0e:	f1 f1       	breq	.+124    	; 0xa8c <Serial_open+0x174>
 a10:	c1 14       	cp	r12, r1
 a12:	81 ee       	ldi	r24, 0xE1	; 225
 a14:	d8 06       	cpc	r13, r24
 a16:	e1 04       	cpc	r14, r1
 a18:	f1 04       	cpc	r15, r1
 a1a:	e9 f1       	breq	.+122    	; 0xa96 <Serial_open+0x17e>
 a1c:	55 c0       	rjmp	.+170    	; 0xac8 <Serial_open+0x1b0>
 a1e:	c1 14       	cp	r12, r1
 a20:	84 e8       	ldi	r24, 0x84	; 132
 a22:	d8 06       	cpc	r13, r24
 a24:	83 e0       	ldi	r24, 0x03	; 3
 a26:	e8 06       	cpc	r14, r24
 a28:	f1 04       	cpc	r15, r1
 a2a:	09 f4       	brne	.+2      	; 0xa2e <Serial_open+0x116>
 a2c:	43 c0       	rjmp	.+134    	; 0xab4 <Serial_open+0x19c>
 a2e:	80 e9       	ldi	r24, 0x90	; 144
 a30:	c8 16       	cp	r12, r24
 a32:	80 ed       	ldi	r24, 0xD0	; 208
 a34:	d8 06       	cpc	r13, r24
 a36:	83 e0       	ldi	r24, 0x03	; 3
 a38:	e8 06       	cpc	r14, r24
 a3a:	f1 04       	cpc	r15, r1
 a3c:	09 f4       	brne	.+2      	; 0xa40 <Serial_open+0x128>
 a3e:	3f c0       	rjmp	.+126    	; 0xabe <Serial_open+0x1a6>
 a40:	c1 14       	cp	r12, r1
 a42:	82 ec       	ldi	r24, 0xC2	; 194
 a44:	d8 06       	cpc	r13, r24
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	e8 06       	cpc	r14, r24
 a4a:	f1 04       	cpc	r15, r1
 a4c:	e9 f5       	brne	.+122    	; 0xac8 <Serial_open+0x1b0>
 a4e:	2d c0       	rjmp	.+90     	; 0xaaa <Serial_open+0x192>
 a50:	40 e4       	ldi	r20, 0x40	; 64
 a52:	53 e0       	ldi	r21, 0x03	; 3
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	3a c0       	rjmp	.+116    	; 0xace <Serial_open+0x1b6>
 a5a:	40 ea       	ldi	r20, 0xA0	; 160
 a5c:	51 e0       	ldi	r21, 0x01	; 1
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	35 c0       	rjmp	.+106    	; 0xace <Serial_open+0x1b6>
 a64:	4f ec       	ldi	r20, 0xCF	; 207
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	70 e0       	ldi	r23, 0x00	; 0
 a6c:	30 c0       	rjmp	.+96     	; 0xace <Serial_open+0x1b6>
 a6e:	4a e8       	ldi	r20, 0x8A	; 138
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	2b c0       	rjmp	.+86     	; 0xace <Serial_open+0x1b6>
 a78:	47 e6       	ldi	r20, 0x67	; 103
 a7a:	50 e0       	ldi	r21, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	26 c0       	rjmp	.+76     	; 0xace <Serial_open+0x1b6>
 a82:	44 e4       	ldi	r20, 0x44	; 68
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	21 c0       	rjmp	.+66     	; 0xace <Serial_open+0x1b6>
 a8c:	43 e3       	ldi	r20, 0x33	; 51
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	1c c0       	rjmp	.+56     	; 0xace <Serial_open+0x1b6>
 a96:	42 e2       	ldi	r20, 0x22	; 34
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	17 c0       	rjmp	.+46     	; 0xace <Serial_open+0x1b6>
 aa0:	49 e1       	ldi	r20, 0x19	; 25
 aa2:	50 e0       	ldi	r21, 0x00	; 0
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	12 c0       	rjmp	.+36     	; 0xace <Serial_open+0x1b6>
 aaa:	40 e1       	ldi	r20, 0x10	; 16
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	0d c0       	rjmp	.+26     	; 0xace <Serial_open+0x1b6>
 ab4:	48 e0       	ldi	r20, 0x08	; 8
 ab6:	50 e0       	ldi	r21, 0x00	; 0
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	08 c0       	rjmp	.+16     	; 0xace <Serial_open+0x1b6>
 abe:	47 e0       	ldi	r20, 0x07	; 7
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	03 c0       	rjmp	.+6      	; 0xace <Serial_open+0x1b6>
 ac8:	4f ef       	ldi	r20, 0xFF	; 255
 aca:	5f ef       	ldi	r21, 0xFF	; 255
 acc:	ba 01       	movw	r22, r20
 ace:	8f b7       	in	r24, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	e3 01       	movw	r28, r6
 ad4:	cc 0f       	add	r28, r28
 ad6:	dd 1f       	adc	r29, r29
 ad8:	c0 50       	subi	r28, 0x00	; 0
 ada:	de 4f       	sbci	r29, 0xFE	; 254
 adc:	e8 81       	ld	r30, Y
 ade:	f9 81       	ldd	r31, Y+1	; 0x01
 ae0:	55 83       	std	Z+5, r21	; 0x05
 ae2:	44 83       	std	Z+4, r20	; 0x04
 ae4:	e8 81       	ld	r30, Y
 ae6:	f9 81       	ldd	r31, Y+1	; 0x01
 ae8:	12 83       	std	Z+2, r17	; 0x02
 aea:	e8 81       	ld	r30, Y
 aec:	f9 81       	ldd	r31, Y+1	; 0x01
 aee:	98 e9       	ldi	r25, 0x98	; 152
 af0:	91 83       	std	Z+1, r25	; 0x01
 af2:	8f bf       	out	0x3f, r24	; 63
 af4:	78 94       	sei
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <Serial_open+0x1e8>
 afc:	8f ef       	ldi	r24, 0xFF	; 255
 afe:	9f ef       	ldi	r25, 0xFF	; 255
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	ff 90       	pop	r15
 b08:	ef 90       	pop	r14
 b0a:	df 90       	pop	r13
 b0c:	cf 90       	pop	r12
 b0e:	bf 90       	pop	r11
 b10:	af 90       	pop	r10
 b12:	9f 90       	pop	r9
 b14:	8f 90       	pop	r8
 b16:	7f 90       	pop	r7
 b18:	6f 90       	pop	r6
 b1a:	08 95       	ret

00000b1c <Serial_read>:

int Serial_read(int port)
{
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	1f 92       	push	r1
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
	char qdata = 0;
 b26:	19 82       	std	Y+1, r1	; 0x01
	int data;
	
	if (Q_getc(ports[port].rx_qid, &qdata))
 b28:	fc 01       	movw	r30, r24
 b2a:	ee 0f       	add	r30, r30
 b2c:	ff 1f       	adc	r31, r31
 b2e:	88 0f       	add	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	88 0f       	add	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	88 0f       	add	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	e8 0f       	add	r30, r24
 b3c:	f9 1f       	adc	r31, r25
 b3e:	e8 5f       	subi	r30, 0xF8	; 248
 b40:	fd 4f       	sbci	r31, 0xFD	; 253
 b42:	be 01       	movw	r22, r28
 b44:	6f 5f       	subi	r22, 0xFF	; 255
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	80 81       	ld	r24, Z
 b4a:	37 de       	rcall	.-914    	; 0x7ba <Q_getc>
 b4c:	88 23       	and	r24, r24
 b4e:	19 f0       	breq	.+6      	; 0xb56 <Serial_read+0x3a>
	{
		data = qdata;
 b50:	89 81       	ldd	r24, Y+1	; 0x01
 b52:	90 e0       	ldi	r25, 0x00	; 0
		return data;
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <Serial_read+0x3e>
	}
	else
	{
		return -1;
 b56:	8f ef       	ldi	r24, 0xFF	; 255
 b58:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 b5a:	0f 90       	pop	r0
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	08 95       	ret

00000b62 <Serial_read_string>:
		Serial_write(port, data[i]);
	}
	return 1;
}

int Serial_read_string(int port, char * data, int data_length) {
 b62:	cf 92       	push	r12
 b64:	df 92       	push	r13
 b66:	ef 92       	push	r14
 b68:	ff 92       	push	r15
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
	char latest;
	int i = 0;
	
	//loop until end of data
	while (i < data_length) {
 b72:	14 16       	cp	r1, r20
 b74:	15 06       	cpc	r1, r21
 b76:	ec f4       	brge	.+58     	; 0xbb2 <Serial_read_string+0x50>
 b78:	8a 01       	movw	r16, r20
 b7a:	6b 01       	movw	r12, r22
 b7c:	7c 01       	movw	r14, r24
 b7e:	c0 e0       	ldi	r28, 0x00	; 0
 b80:	d0 e0       	ldi	r29, 0x00	; 0
		//get latest character
		latest = Serial_read(port);
 b82:	c7 01       	movw	r24, r14
 b84:	cb df       	rcall	.-106    	; 0xb1c <Serial_read>
		if (latest != 0xFF) {
 b86:	8f 3f       	cpi	r24, 0xFF	; 255
 b88:	69 f0       	breq	.+26     	; 0xba4 <Serial_read_string+0x42>
			if (latest == 0x0D) {
 b8a:	8d 30       	cpi	r24, 0x0D	; 13
 b8c:	31 f4       	brne	.+12     	; 0xb9a <Serial_read_string+0x38>
				//the input has terminated
				data[i] = 0x00;//null terminate string
 b8e:	cc 0d       	add	r28, r12
 b90:	dd 1d       	adc	r29, r13
 b92:	18 82       	st	Y, r1
				return 1;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e c0       	rjmp	.+28     	; 0xbb6 <Serial_read_string+0x54>
			}
			//write the next character into the buffer
			data[i++]=latest;
 b9a:	f6 01       	movw	r30, r12
 b9c:	ec 0f       	add	r30, r28
 b9e:	fd 1f       	adc	r31, r29
 ba0:	80 83       	st	Z, r24
 ba2:	21 96       	adiw	r28, 0x01	; 1
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
 ba4:	bf da       	rcall	.-2690   	; 0x124 <x_yield>
int Serial_read_string(int port, char * data, int data_length) {
	char latest;
	int i = 0;
	
	//loop until end of data
	while (i < data_length) {
 ba6:	c0 17       	cp	r28, r16
 ba8:	d1 07       	cpc	r29, r17
 baa:	5c f3       	brlt	.-42     	; 0xb82 <Serial_read_string+0x20>
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
	}
	//we've used more than the whole array, error
	return 0;
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <Serial_read_string+0x54>
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	90 e0       	ldi	r25, 0x00	; 0
}
 bb6:	df 91       	pop	r29
 bb8:	cf 91       	pop	r28
 bba:	1f 91       	pop	r17
 bbc:	0f 91       	pop	r16
 bbe:	ff 90       	pop	r15
 bc0:	ef 90       	pop	r14
 bc2:	df 90       	pop	r13
 bc4:	cf 90       	pop	r12
 bc6:	08 95       	ret

00000bc8 <Serial_write>:

int Serial_write(int port, char data)
{
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	ec 01       	movw	r28, r24
	if (Q_putc(ports[port].tx_qid, data))
 bce:	fc 01       	movw	r30, r24
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	88 0f       	add	r24, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	88 0f       	add	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	88 0f       	add	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	e8 0f       	add	r30, r24
 be2:	f9 1f       	adc	r31, r25
 be4:	e8 5f       	subi	r30, 0xF8	; 248
 be6:	fd 4f       	sbci	r31, 0xFD	; 253
 be8:	81 81       	ldd	r24, Z+1	; 0x01
 bea:	78 dd       	rcall	.-1296   	; 0x6dc <Q_putc>
 bec:	88 23       	and	r24, r24
 bee:	61 f0       	breq	.+24     	; 0xc08 <Serial_write+0x40>
	{
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line	
		regs[port]->ucsrb |= (1<<UDRIE0); 
 bf0:	cc 0f       	add	r28, r28
 bf2:	dd 1f       	adc	r29, r29
 bf4:	c0 50       	subi	r28, 0x00	; 0
 bf6:	de 4f       	sbci	r29, 0xFE	; 254
 bf8:	e8 81       	ld	r30, Y
 bfa:	f9 81       	ldd	r31, Y+1	; 0x01
 bfc:	81 81       	ldd	r24, Z+1	; 0x01
 bfe:	80 62       	ori	r24, 0x20	; 32
 c00:	81 83       	std	Z+1, r24	; 0x01
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;	
 c02:	81 e0       	ldi	r24, 0x01	; 1
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <Serial_write+0x44>
	}
	return -1;
 c08:	8f ef       	ldi	r24, 0xFF	; 255
 c0a:	9f ef       	ldi	r25, 0xFF	; 255
	
}
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	08 95       	ret

00000c12 <Serial_write_string>:
	{
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
 c12:	ef 92       	push	r14
 c14:	ff 92       	push	r15
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
	for (int i = 0; i < data_length; i++) {
 c1e:	14 16       	cp	r1, r20
 c20:	15 06       	cpc	r1, r21
 c22:	5c f4       	brge	.+22     	; 0xc3a <Serial_write_string+0x28>
 c24:	8b 01       	movw	r16, r22
 c26:	7c 01       	movw	r14, r24
 c28:	eb 01       	movw	r28, r22
 c2a:	04 0f       	add	r16, r20
 c2c:	15 1f       	adc	r17, r21
		Serial_write(port, data[i]);
 c2e:	69 91       	ld	r22, Y+
 c30:	c7 01       	movw	r24, r14
 c32:	ca df       	rcall	.-108    	; 0xbc8 <Serial_write>
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
	for (int i = 0; i < data_length; i++) {
 c34:	c0 17       	cp	r28, r16
 c36:	d1 07       	cpc	r29, r17
 c38:	d1 f7       	brne	.-12     	; 0xc2e <Serial_write_string+0x1c>
		Serial_write(port, data[i]);
	}
	return 1;
}
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	1f 91       	pop	r17
 c44:	0f 91       	pop	r16
 c46:	ff 90       	pop	r15
 c48:	ef 90       	pop	r14
 c4a:	08 95       	ret

00000c4c <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
 c4c:	1f 92       	push	r1
 c4e:	0f 92       	push	r0
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	0f 92       	push	r0
 c54:	11 24       	eor	r1, r1
 c56:	0b b6       	in	r0, 0x3b	; 59
 c58:	0f 92       	push	r0
 c5a:	2f 93       	push	r18
 c5c:	3f 93       	push	r19
 c5e:	4f 93       	push	r20
 c60:	5f 93       	push	r21
 c62:	6f 93       	push	r22
 c64:	7f 93       	push	r23
 c66:	8f 93       	push	r24
 c68:	9f 93       	push	r25
 c6a:	af 93       	push	r26
 c6c:	bf 93       	push	r27
 c6e:	ef 93       	push	r30
 c70:	ff 93       	push	r31
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	1f 92       	push	r1
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
 c7c:	be 01       	movw	r22, r28
 c7e:	6f 5f       	subi	r22, 0xFF	; 255
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	80 91 09 02 	lds	r24, 0x0209
 c86:	99 dd       	rcall	.-1230   	; 0x7ba <Q_getc>
 c88:	88 23       	and	r24, r24
 c8a:	21 f0       	breq	.+8      	; 0xc94 <__vector_26+0x48>
	{
		UDR0 = data;
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	80 93 c6 00 	sts	0x00C6, r24
 c92:	07 c0       	rjmp	.+14     	; 0xca2 <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
 c94:	e0 91 00 02 	lds	r30, 0x0200
 c98:	f0 91 01 02 	lds	r31, 0x0201
 c9c:	81 81       	ldd	r24, Z+1	; 0x01
 c9e:	8f 7d       	andi	r24, 0xDF	; 223
 ca0:	81 83       	std	Z+1, r24	; 0x01
	}
}
 ca2:	0f 90       	pop	r0
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
 ca8:	ff 91       	pop	r31
 caa:	ef 91       	pop	r30
 cac:	bf 91       	pop	r27
 cae:	af 91       	pop	r26
 cb0:	9f 91       	pop	r25
 cb2:	8f 91       	pop	r24
 cb4:	7f 91       	pop	r23
 cb6:	6f 91       	pop	r22
 cb8:	5f 91       	pop	r21
 cba:	4f 91       	pop	r20
 cbc:	3f 91       	pop	r19
 cbe:	2f 91       	pop	r18
 cc0:	0f 90       	pop	r0
 cc2:	0b be       	out	0x3b, r0	; 59
 cc4:	0f 90       	pop	r0
 cc6:	0f be       	out	0x3f, r0	; 63
 cc8:	0f 90       	pop	r0
 cca:	1f 90       	pop	r1
 ccc:	18 95       	reti

00000cce <__vector_37>:


ISR(USART1_UDRE_vect)
{
 cce:	1f 92       	push	r1
 cd0:	0f 92       	push	r0
 cd2:	0f b6       	in	r0, 0x3f	; 63
 cd4:	0f 92       	push	r0
 cd6:	11 24       	eor	r1, r1
 cd8:	0b b6       	in	r0, 0x3b	; 59
 cda:	0f 92       	push	r0
 cdc:	2f 93       	push	r18
 cde:	3f 93       	push	r19
 ce0:	4f 93       	push	r20
 ce2:	5f 93       	push	r21
 ce4:	6f 93       	push	r22
 ce6:	7f 93       	push	r23
 ce8:	8f 93       	push	r24
 cea:	9f 93       	push	r25
 cec:	af 93       	push	r26
 cee:	bf 93       	push	r27
 cf0:	ef 93       	push	r30
 cf2:	ff 93       	push	r31
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	1f 92       	push	r1
 cfa:	cd b7       	in	r28, 0x3d	; 61
 cfc:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
 cfe:	be 01       	movw	r22, r28
 d00:	6f 5f       	subi	r22, 0xFF	; 255
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	80 91 13 02 	lds	r24, 0x0213
 d08:	58 dd       	rcall	.-1360   	; 0x7ba <Q_getc>
 d0a:	88 23       	and	r24, r24
 d0c:	21 f0       	breq	.+8      	; 0xd16 <__vector_37+0x48>
	{
		UDR1 = data;
 d0e:	89 81       	ldd	r24, Y+1	; 0x01
 d10:	80 93 ce 00 	sts	0x00CE, r24
 d14:	07 c0       	rjmp	.+14     	; 0xd24 <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
 d16:	e0 91 02 02 	lds	r30, 0x0202
 d1a:	f0 91 03 02 	lds	r31, 0x0203
 d1e:	81 81       	ldd	r24, Z+1	; 0x01
 d20:	8f 7d       	andi	r24, 0xDF	; 223
 d22:	81 83       	std	Z+1, r24	; 0x01
	}
}
 d24:	0f 90       	pop	r0
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	ff 91       	pop	r31
 d2c:	ef 91       	pop	r30
 d2e:	bf 91       	pop	r27
 d30:	af 91       	pop	r26
 d32:	9f 91       	pop	r25
 d34:	8f 91       	pop	r24
 d36:	7f 91       	pop	r23
 d38:	6f 91       	pop	r22
 d3a:	5f 91       	pop	r21
 d3c:	4f 91       	pop	r20
 d3e:	3f 91       	pop	r19
 d40:	2f 91       	pop	r18
 d42:	0f 90       	pop	r0
 d44:	0b be       	out	0x3b, r0	; 59
 d46:	0f 90       	pop	r0
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	0f 90       	pop	r0
 d4c:	1f 90       	pop	r1
 d4e:	18 95       	reti

00000d50 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 d50:	1f 92       	push	r1
 d52:	0f 92       	push	r0
 d54:	0f b6       	in	r0, 0x3f	; 63
 d56:	0f 92       	push	r0
 d58:	11 24       	eor	r1, r1
 d5a:	0b b6       	in	r0, 0x3b	; 59
 d5c:	0f 92       	push	r0
 d5e:	2f 93       	push	r18
 d60:	3f 93       	push	r19
 d62:	4f 93       	push	r20
 d64:	5f 93       	push	r21
 d66:	6f 93       	push	r22
 d68:	7f 93       	push	r23
 d6a:	8f 93       	push	r24
 d6c:	9f 93       	push	r25
 d6e:	af 93       	push	r26
 d70:	bf 93       	push	r27
 d72:	ef 93       	push	r30
 d74:	ff 93       	push	r31
 d76:	cf 93       	push	r28
 d78:	df 93       	push	r29
 d7a:	1f 92       	push	r1
 d7c:	cd b7       	in	r28, 0x3d	; 61
 d7e:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
 d80:	be 01       	movw	r22, r28
 d82:	6f 5f       	subi	r22, 0xFF	; 255
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	80 91 1d 02 	lds	r24, 0x021D
 d8a:	17 dd       	rcall	.-1490   	; 0x7ba <Q_getc>
 d8c:	88 23       	and	r24, r24
 d8e:	21 f0       	breq	.+8      	; 0xd98 <__vector_52+0x48>
	{
		UDR2 = data;
 d90:	89 81       	ldd	r24, Y+1	; 0x01
 d92:	80 93 d6 00 	sts	0x00D6, r24
 d96:	07 c0       	rjmp	.+14     	; 0xda6 <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
 d98:	e0 91 04 02 	lds	r30, 0x0204
 d9c:	f0 91 05 02 	lds	r31, 0x0205
 da0:	81 81       	ldd	r24, Z+1	; 0x01
 da2:	8f 7d       	andi	r24, 0xDF	; 223
 da4:	81 83       	std	Z+1, r24	; 0x01
	}
}
 da6:	0f 90       	pop	r0
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	ff 91       	pop	r31
 dae:	ef 91       	pop	r30
 db0:	bf 91       	pop	r27
 db2:	af 91       	pop	r26
 db4:	9f 91       	pop	r25
 db6:	8f 91       	pop	r24
 db8:	7f 91       	pop	r23
 dba:	6f 91       	pop	r22
 dbc:	5f 91       	pop	r21
 dbe:	4f 91       	pop	r20
 dc0:	3f 91       	pop	r19
 dc2:	2f 91       	pop	r18
 dc4:	0f 90       	pop	r0
 dc6:	0b be       	out	0x3b, r0	; 59
 dc8:	0f 90       	pop	r0
 dca:	0f be       	out	0x3f, r0	; 63
 dcc:	0f 90       	pop	r0
 dce:	1f 90       	pop	r1
 dd0:	18 95       	reti

00000dd2 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 dd2:	1f 92       	push	r1
 dd4:	0f 92       	push	r0
 dd6:	0f b6       	in	r0, 0x3f	; 63
 dd8:	0f 92       	push	r0
 dda:	11 24       	eor	r1, r1
 ddc:	0b b6       	in	r0, 0x3b	; 59
 dde:	0f 92       	push	r0
 de0:	2f 93       	push	r18
 de2:	3f 93       	push	r19
 de4:	4f 93       	push	r20
 de6:	5f 93       	push	r21
 de8:	6f 93       	push	r22
 dea:	7f 93       	push	r23
 dec:	8f 93       	push	r24
 dee:	9f 93       	push	r25
 df0:	af 93       	push	r26
 df2:	bf 93       	push	r27
 df4:	ef 93       	push	r30
 df6:	ff 93       	push	r31
 df8:	cf 93       	push	r28
 dfa:	df 93       	push	r29
 dfc:	1f 92       	push	r1
 dfe:	cd b7       	in	r28, 0x3d	; 61
 e00:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
 e02:	be 01       	movw	r22, r28
 e04:	6f 5f       	subi	r22, 0xFF	; 255
 e06:	7f 4f       	sbci	r23, 0xFF	; 255
 e08:	80 91 27 02 	lds	r24, 0x0227
 e0c:	d6 dc       	rcall	.-1620   	; 0x7ba <Q_getc>
 e0e:	88 23       	and	r24, r24
 e10:	21 f0       	breq	.+8      	; 0xe1a <__vector_55+0x48>
	{
		UDR3 = data;
 e12:	89 81       	ldd	r24, Y+1	; 0x01
 e14:	80 93 36 01 	sts	0x0136, r24
 e18:	07 c0       	rjmp	.+14     	; 0xe28 <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
 e1a:	e0 91 06 02 	lds	r30, 0x0206
 e1e:	f0 91 07 02 	lds	r31, 0x0207
 e22:	81 81       	ldd	r24, Z+1	; 0x01
 e24:	8f 7d       	andi	r24, 0xDF	; 223
 e26:	81 83       	std	Z+1, r24	; 0x01
	}
}
 e28:	0f 90       	pop	r0
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	ff 91       	pop	r31
 e30:	ef 91       	pop	r30
 e32:	bf 91       	pop	r27
 e34:	af 91       	pop	r26
 e36:	9f 91       	pop	r25
 e38:	8f 91       	pop	r24
 e3a:	7f 91       	pop	r23
 e3c:	6f 91       	pop	r22
 e3e:	5f 91       	pop	r21
 e40:	4f 91       	pop	r20
 e42:	3f 91       	pop	r19
 e44:	2f 91       	pop	r18
 e46:	0f 90       	pop	r0
 e48:	0b be       	out	0x3b, r0	; 59
 e4a:	0f 90       	pop	r0
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	0f 90       	pop	r0
 e50:	1f 90       	pop	r1
 e52:	18 95       	reti

00000e54 <__vector_25>:

ISR(USART0_RX_vect)
{
 e54:	1f 92       	push	r1
 e56:	0f 92       	push	r0
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	0f 92       	push	r0
 e5c:	11 24       	eor	r1, r1
 e5e:	0b b6       	in	r0, 0x3b	; 59
 e60:	0f 92       	push	r0
 e62:	2f 93       	push	r18
 e64:	3f 93       	push	r19
 e66:	4f 93       	push	r20
 e68:	5f 93       	push	r21
 e6a:	6f 93       	push	r22
 e6c:	7f 93       	push	r23
 e6e:	8f 93       	push	r24
 e70:	9f 93       	push	r25
 e72:	af 93       	push	r26
 e74:	bf 93       	push	r27
 e76:	ef 93       	push	r30
 e78:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
 e7a:	60 91 c6 00 	lds	r22, 0x00C6
 e7e:	80 91 08 02 	lds	r24, 0x0208
 e82:	2c dc       	rcall	.-1960   	; 0x6dc <Q_putc>
}
 e84:	ff 91       	pop	r31
 e86:	ef 91       	pop	r30
 e88:	bf 91       	pop	r27
 e8a:	af 91       	pop	r26
 e8c:	9f 91       	pop	r25
 e8e:	8f 91       	pop	r24
 e90:	7f 91       	pop	r23
 e92:	6f 91       	pop	r22
 e94:	5f 91       	pop	r21
 e96:	4f 91       	pop	r20
 e98:	3f 91       	pop	r19
 e9a:	2f 91       	pop	r18
 e9c:	0f 90       	pop	r0
 e9e:	0b be       	out	0x3b, r0	; 59
 ea0:	0f 90       	pop	r0
 ea2:	0f be       	out	0x3f, r0	; 63
 ea4:	0f 90       	pop	r0
 ea6:	1f 90       	pop	r1
 ea8:	18 95       	reti

00000eaa <__vector_36>:

ISR(USART1_RX_vect)
{
 eaa:	1f 92       	push	r1
 eac:	0f 92       	push	r0
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	0f 92       	push	r0
 eb2:	11 24       	eor	r1, r1
 eb4:	0b b6       	in	r0, 0x3b	; 59
 eb6:	0f 92       	push	r0
 eb8:	2f 93       	push	r18
 eba:	3f 93       	push	r19
 ebc:	4f 93       	push	r20
 ebe:	5f 93       	push	r21
 ec0:	6f 93       	push	r22
 ec2:	7f 93       	push	r23
 ec4:	8f 93       	push	r24
 ec6:	9f 93       	push	r25
 ec8:	af 93       	push	r26
 eca:	bf 93       	push	r27
 ecc:	ef 93       	push	r30
 ece:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
 ed0:	60 91 ce 00 	lds	r22, 0x00CE
 ed4:	80 91 12 02 	lds	r24, 0x0212
 ed8:	01 dc       	rcall	.-2046   	; 0x6dc <Q_putc>
}
 eda:	ff 91       	pop	r31
 edc:	ef 91       	pop	r30
 ede:	bf 91       	pop	r27
 ee0:	af 91       	pop	r26
 ee2:	9f 91       	pop	r25
 ee4:	8f 91       	pop	r24
 ee6:	7f 91       	pop	r23
 ee8:	6f 91       	pop	r22
 eea:	5f 91       	pop	r21
 eec:	4f 91       	pop	r20
 eee:	3f 91       	pop	r19
 ef0:	2f 91       	pop	r18
 ef2:	0f 90       	pop	r0
 ef4:	0b be       	out	0x3b, r0	; 59
 ef6:	0f 90       	pop	r0
 ef8:	0f be       	out	0x3f, r0	; 63
 efa:	0f 90       	pop	r0
 efc:	1f 90       	pop	r1
 efe:	18 95       	reti

00000f00 <__vector_51>:

ISR(USART2_RX_vect)
{
 f00:	1f 92       	push	r1
 f02:	0f 92       	push	r0
 f04:	0f b6       	in	r0, 0x3f	; 63
 f06:	0f 92       	push	r0
 f08:	11 24       	eor	r1, r1
 f0a:	0b b6       	in	r0, 0x3b	; 59
 f0c:	0f 92       	push	r0
 f0e:	2f 93       	push	r18
 f10:	3f 93       	push	r19
 f12:	4f 93       	push	r20
 f14:	5f 93       	push	r21
 f16:	6f 93       	push	r22
 f18:	7f 93       	push	r23
 f1a:	8f 93       	push	r24
 f1c:	9f 93       	push	r25
 f1e:	af 93       	push	r26
 f20:	bf 93       	push	r27
 f22:	ef 93       	push	r30
 f24:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
 f26:	60 91 d6 00 	lds	r22, 0x00D6
 f2a:	80 91 1c 02 	lds	r24, 0x021C
 f2e:	d6 db       	rcall	.-2132   	; 0x6dc <Q_putc>
}
 f30:	ff 91       	pop	r31
 f32:	ef 91       	pop	r30
 f34:	bf 91       	pop	r27
 f36:	af 91       	pop	r26
 f38:	9f 91       	pop	r25
 f3a:	8f 91       	pop	r24
 f3c:	7f 91       	pop	r23
 f3e:	6f 91       	pop	r22
 f40:	5f 91       	pop	r21
 f42:	4f 91       	pop	r20
 f44:	3f 91       	pop	r19
 f46:	2f 91       	pop	r18
 f48:	0f 90       	pop	r0
 f4a:	0b be       	out	0x3b, r0	; 59
 f4c:	0f 90       	pop	r0
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	0f 90       	pop	r0
 f52:	1f 90       	pop	r1
 f54:	18 95       	reti

00000f56 <__vector_54>:

ISR(USART3_RX_vect)
{
 f56:	1f 92       	push	r1
 f58:	0f 92       	push	r0
 f5a:	0f b6       	in	r0, 0x3f	; 63
 f5c:	0f 92       	push	r0
 f5e:	11 24       	eor	r1, r1
 f60:	0b b6       	in	r0, 0x3b	; 59
 f62:	0f 92       	push	r0
 f64:	2f 93       	push	r18
 f66:	3f 93       	push	r19
 f68:	4f 93       	push	r20
 f6a:	5f 93       	push	r21
 f6c:	6f 93       	push	r22
 f6e:	7f 93       	push	r23
 f70:	8f 93       	push	r24
 f72:	9f 93       	push	r25
 f74:	af 93       	push	r26
 f76:	bf 93       	push	r27
 f78:	ef 93       	push	r30
 f7a:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
 f7c:	60 91 36 01 	lds	r22, 0x0136
 f80:	80 91 26 02 	lds	r24, 0x0226
 f84:	ab db       	rcall	.-2218   	; 0x6dc <Q_putc>
}
 f86:	ff 91       	pop	r31
 f88:	ef 91       	pop	r30
 f8a:	bf 91       	pop	r27
 f8c:	af 91       	pop	r26
 f8e:	9f 91       	pop	r25
 f90:	8f 91       	pop	r24
 f92:	7f 91       	pop	r23
 f94:	6f 91       	pop	r22
 f96:	5f 91       	pop	r21
 f98:	4f 91       	pop	r20
 f9a:	3f 91       	pop	r19
 f9c:	2f 91       	pop	r18
 f9e:	0f 90       	pop	r0
 fa0:	0b be       	out	0x3b, r0	; 59
 fa2:	0f 90       	pop	r0
 fa4:	0f be       	out	0x3f, r0	; 63
 fa6:	0f 90       	pop	r0
 fa8:	1f 90       	pop	r1
 faa:	18 95       	reti

00000fac <strcmp>:
 fac:	fb 01       	movw	r30, r22
 fae:	dc 01       	movw	r26, r24
 fb0:	8d 91       	ld	r24, X+
 fb2:	01 90       	ld	r0, Z+
 fb4:	80 19       	sub	r24, r0
 fb6:	01 10       	cpse	r0, r1
 fb8:	d9 f3       	breq	.-10     	; 0xfb0 <strcmp+0x4>
 fba:	99 0b       	sbc	r25, r25
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
