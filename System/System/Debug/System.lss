
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a81  00800230  00800230  00000d38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ba  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc6  00000000  00000000  000029f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  000039b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ee  00000000  00000000  000044e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000059d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	9d c1       	rjmp	.+826    	; 0x390 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	59 c5       	rjmp	.+2738   	; 0xb18 <__vector_25>
  66:	00 00       	nop
  68:	53 c4       	rjmp	.+2214   	; 0x910 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6e c5       	rjmp	.+2780   	; 0xb6e <__vector_36>
  92:	00 00       	nop
  94:	7e c4       	rjmp	.+2300   	; 0x992 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c5       	rjmp	.+2806   	; 0xbc4 <__vector_51>
  ce:	00 00       	nop
  d0:	a1 c4       	rjmp	.+2370   	; 0xa14 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a0 c5       	rjmp	.+2880   	; 0xc1a <__vector_54>
  da:	00 00       	nop
  dc:	dc c4       	rjmp	.+2488   	; 0xa96 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 33       	cpi	r26, 0x30	; 48
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2c e0       	ldi	r18, 0x0C	; 12
 110:	a0 e3       	ldi	r26, 0x30	; 48
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 3b       	cpi	r26, 0xB1	; 177
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a0 d1       	rcall	.+832    	; 0x460 <main>
 120:	a7 c5       	rjmp	.+2894   	; 0xc70 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
 124:	2f 92       	push	r2
		push  r3
 126:	3f 92       	push	r3
		push  r4
 128:	4f 92       	push	r4
		push  r5
 12a:	5f 92       	push	r5
		push  r6
 12c:	6f 92       	push	r6
		push  r7
 12e:	7f 92       	push	r7
		push  r8
 130:	8f 92       	push	r8
		push  r9
 132:	9f 92       	push	r9
		push  r10
 134:	af 92       	push	r10
		push  r11
 136:	bf 92       	push	r11
		push  r12
 138:	cf 92       	push	r12
		push  r13
 13a:	df 92       	push	r13
		push  r14
 13c:	ef 92       	push	r14
		push  r15
 13e:	ff 92       	push	r15
		push  r16
 140:	0f 93       	push	r16
		push  r17
 142:	1f 93       	push	r17
		push  r28
 144:	cf 93       	push	r28
		push  r29
 146:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
 148:	20 91 3c 02 	lds	r18, 0x023C
		lds   r19,x_thread_mask
 14c:	30 91 70 0a 	lds	r19, 0x0A70

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
 150:	f8 94       	cli
		in		r14,SPL
 152:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
 154:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
 156:	78 94       	sei


		ldi		r30,lo8(stack)
 158:	ee e3       	ldi	r30, 0x3E	; 62
		ldi		r31,hi8(stack)
 15a:	f2 e0       	ldi	r31, 0x02	; 2
		lsl		r18
 15c:	22 0f       	add	r18, r18
		lsl		r18
 15e:	22 0f       	add	r18, r18
		add		r30,r18
 160:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
 162:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
 164:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
 166:	f0 82       	st	Z, r15

00000168 <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
 168:	20 91 6f 0a 	lds	r18, 0x0A6F
		lds		r19,x_delay_status
 16c:	30 91 3d 02 	lds	r19, 0x023D
		lds		r20,x_suspend_status
 170:	40 91 5e 02 	lds	r20, 0x025E
		or		r18,r19
 174:	23 2b       	or	r18, r19
		or		r18,r20
 176:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
 178:	30 91 3c 02 	lds	r19, 0x023C
		lds		r20, x_thread_mask
 17c:	40 91 70 0a 	lds	r20, 0x0A70
		ldi		r22,NUM_THREADS		;max number of threads
 180:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
 182:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
 184:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
 186:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
 188:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
 18a:	08 f4       	brcc	.+2      	; 0x18e <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
 18c:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
 18e:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
 190:	42 23       	and	r20, r18
		breq	restore				;break out if READY
 192:	19 f0       	breq	.+6      	; 0x19a <restore>
		dec		r22					;decrement thread count
 194:	6a 95       	dec	r22
		brne	1b					;back to test next thread
 196:	b1 f7       	brne	.-20     	; 0x184 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
 198:	e7 cf       	rjmp	.-50     	; 0x168 <x_schedule>

0000019a <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
 19a:	30 93 3c 02 	sts	0x023C, r19
		sts		x_thread_mask,r23
 19e:	70 93 70 0a 	sts	0x0A70, r23

		ldi		r30,lo8(stack)
 1a2:	ee e3       	ldi	r30, 0x3E	; 62
		ldi		r31,hi8(stack)
 1a4:	f2 e0       	ldi	r31, 0x02	; 2
		lsl		r19
 1a6:	33 0f       	add	r19, r19
		lsl		r19
 1a8:	33 0f       	add	r19, r19
		add		r30,r19
 1aa:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
 1ac:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
 1ae:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
 1b0:	30 81       	ld	r19, Z
		
		cli
 1b2:	f8 94       	cli
		out		SPL,r18		;restore SP
 1b4:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
 1b6:	3e bf       	out	0x3e, r19	; 62
		sei
 1b8:	78 94       	sei


		// Restore registers
		pop		r29
 1ba:	df 91       	pop	r29
		pop		r28
 1bc:	cf 91       	pop	r28
		pop		r17
 1be:	1f 91       	pop	r17
		pop		r16
 1c0:	0f 91       	pop	r16
		pop		r15
 1c2:	ff 90       	pop	r15
		pop		r14
 1c4:	ef 90       	pop	r14
		pop		r13
 1c6:	df 90       	pop	r13
		pop		r12
 1c8:	cf 90       	pop	r12
		pop		r11
 1ca:	bf 90       	pop	r11
		pop		r10
 1cc:	af 90       	pop	r10
		pop		r9
 1ce:	9f 90       	pop	r9
		pop		r8
 1d0:	8f 90       	pop	r8
		pop		r7
 1d2:	7f 90       	pop	r7
		pop		r6
 1d4:	6f 90       	pop	r6
		pop		r5
 1d6:	5f 90       	pop	r5
		pop		r4
 1d8:	4f 90       	pop	r4
		pop		r3
 1da:	3f 90       	pop	r3
		pop		r2
 1dc:	2f 90       	pop	r2

		// Return to next thread
		ret
 1de:	08 95       	ret

000001e0 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
 1e0:	ec ee       	ldi	r30, 0xEC	; 236
		ldi r31,hi8(bitmask8_table)
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
 1e4:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
 1e6:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
 1e8:	84 91       	lpm	r24, Z
		ret
 1ea:	08 95       	ret

000001ec <bitmask8_table>:
 1ec:	01 02       	muls	r16, r17
 1ee:	04 08       	sbc	r0, r4
 1f0:	10 20       	and	r1, r0
 1f2:	40 80       	ld	r4, Z

000001f4 <x_new>:
   long val;
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
      val = x_system_counter;
   }
   return val;
}
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	c8 2f       	mov	r28, r24
 1fa:	d4 2f       	mov	r29, r20
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	dc 01       	movw	r26, r24
 200:	aa 0f       	add	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	aa 0f       	add	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	ad 01       	movw	r20, r26
 20a:	42 5c       	subi	r20, 0xC2	; 194
 20c:	5d 4f       	sbci	r21, 0xFD	; 253
 20e:	da 01       	movw	r26, r20
 210:	12 96       	adiw	r26, 0x02	; 2
 212:	ed 91       	ld	r30, X+
 214:	fc 91       	ld	r31, X
 216:	13 97       	sbiw	r26, 0x03	; 3
 218:	60 83       	st	Z, r22
 21a:	9f 01       	movw	r18, r30
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1
 220:	d9 01       	movw	r26, r18
 222:	7c 93       	st	X, r23
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	d9 01       	movw	r26, r18
 22a:	1c 92       	st	X, r1
 22c:	75 97       	sbiw	r30, 0x15	; 21
 22e:	da 01       	movw	r26, r20
 230:	ed 93       	st	X+, r30
 232:	fc 93       	st	X, r31
 234:	d5 df       	rcall	.-86     	; 0x1e0 <bit2mask8>
 236:	dd 23       	and	r29, r29
 238:	41 f0       	breq	.+16     	; 0x24a <x_new+0x56>
 23a:	98 2f       	mov	r25, r24
 23c:	90 95       	com	r25
 23e:	80 91 6f 0a 	lds	r24, 0x0A6F
 242:	98 23       	and	r25, r24
 244:	90 93 6f 0a 	sts	0x0A6F, r25
 248:	05 c0       	rjmp	.+10     	; 0x254 <x_new+0x60>
 24a:	90 91 6f 0a 	lds	r25, 0x0A6F
 24e:	98 2b       	or	r25, r24
 250:	90 93 6f 0a 	sts	0x0A6F, r25
 254:	80 91 3c 02 	lds	r24, 0x023C
 258:	c8 13       	cpse	r28, r24
 25a:	01 c0       	rjmp	.+2      	; 0x25e <x_new+0x6a>
 25c:	85 df       	rcall	.-246    	; 0x168 <x_schedule>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <init_System_Timer>:
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	84 bd       	out	0x24, r24	; 36
 268:	9a ef       	ldi	r25, 0xFA	; 250
 26a:	97 bd       	out	0x27, r25	; 39
 26c:	80 93 6e 00 	sts	0x006E, r24
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	85 bd       	out	0x25, r24	; 37
 274:	08 95       	ret

00000276 <x_init>:
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	f8 94       	cli
 27c:	8e ef       	ldi	r24, 0xFE	; 254
 27e:	80 93 6f 0a 	sts	0x0A6F, r24
 282:	10 92 5e 02 	sts	0x025E, r1
 286:	10 92 3d 02 	sts	0x023D, r1
 28a:	10 92 3c 02 	sts	0x023C, r1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 70 0a 	sts	0x0A70, r24
 294:	ce e3       	ldi	r28, 0x3E	; 62
 296:	d2 e0       	ldi	r29, 0x02	; 2
 298:	8e e5       	ldi	r24, 0x5E	; 94
 29a:	93 e0       	ldi	r25, 0x03	; 3
 29c:	99 83       	std	Y+1, r25	; 0x01
 29e:	88 83       	st	Y, r24
 2a0:	9b 83       	std	Y+3, r25	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
 2a4:	8e e5       	ldi	r24, 0x5E	; 94
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	9d 83       	std	Y+5, r25	; 0x05
 2aa:	8c 83       	std	Y+4, r24	; 0x04
 2ac:	9f 83       	std	Y+7, r25	; 0x07
 2ae:	8e 83       	std	Y+6, r24	; 0x06
 2b0:	8e e5       	ldi	r24, 0x5E	; 94
 2b2:	95 e0       	ldi	r25, 0x05	; 5
 2b4:	99 87       	std	Y+9, r25	; 0x09
 2b6:	88 87       	std	Y+8, r24	; 0x08
 2b8:	9b 87       	std	Y+11, r25	; 0x0b
 2ba:	8a 87       	std	Y+10, r24	; 0x0a
 2bc:	8e e5       	ldi	r24, 0x5E	; 94
 2be:	96 e0       	ldi	r25, 0x06	; 6
 2c0:	9d 87       	std	Y+13, r25	; 0x0d
 2c2:	8c 87       	std	Y+12, r24	; 0x0c
 2c4:	9f 87       	std	Y+15, r25	; 0x0f
 2c6:	8e 87       	std	Y+14, r24	; 0x0e
 2c8:	8e e5       	ldi	r24, 0x5E	; 94
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	99 8b       	std	Y+17, r25	; 0x11
 2ce:	88 8b       	std	Y+16, r24	; 0x10
 2d0:	9b 8b       	std	Y+19, r25	; 0x13
 2d2:	8a 8b       	std	Y+18, r24	; 0x12
 2d4:	8e e5       	ldi	r24, 0x5E	; 94
 2d6:	98 e0       	ldi	r25, 0x08	; 8
 2d8:	9d 8b       	std	Y+21, r25	; 0x15
 2da:	8c 8b       	std	Y+20, r24	; 0x14
 2dc:	9f 8b       	std	Y+23, r25	; 0x17
 2de:	8e 8b       	std	Y+22, r24	; 0x16
 2e0:	8e e5       	ldi	r24, 0x5E	; 94
 2e2:	99 e0       	ldi	r25, 0x09	; 9
 2e4:	99 8f       	std	Y+25, r25	; 0x19
 2e6:	88 8f       	std	Y+24, r24	; 0x18
 2e8:	9b 8f       	std	Y+27, r25	; 0x1b
 2ea:	8a 8f       	std	Y+26, r24	; 0x1a
 2ec:	8e e5       	ldi	r24, 0x5E	; 94
 2ee:	9a e0       	ldi	r25, 0x0A	; 10
 2f0:	9d 8f       	std	Y+29, r25	; 0x1d
 2f2:	8c 8f       	std	Y+28, r24	; 0x1c
 2f4:	9f 8f       	std	Y+31, r25	; 0x1f
 2f6:	8e 8f       	std	Y+30, r24	; 0x1e
 2f8:	8a ea       	ldi	r24, 0xAA	; 170
 2fa:	80 93 5f 02 	sts	0x025F, r24
 2fe:	80 93 5f 03 	sts	0x035F, r24
 302:	80 93 5f 04 	sts	0x045F, r24
 306:	80 93 5f 05 	sts	0x055F, r24
 30a:	80 93 5f 06 	sts	0x065F, r24
 30e:	80 93 5f 07 	sts	0x075F, r24
 312:	80 93 5f 08 	sts	0x085F, r24
 316:	80 93 5f 09 	sts	0x095F, r24
 31a:	a4 df       	rcall	.-184    	; 0x264 <init_System_Timer>
 31c:	ed b7       	in	r30, 0x3d	; 61
 31e:	fe b7       	in	r31, 0x3e	; 62
 320:	a8 81       	ld	r26, Y
 322:	b9 81       	ldd	r27, Y+1	; 0x01
 324:	85 81       	ldd	r24, Z+5	; 0x05
 326:	8c 93       	st	X, r24
 328:	a8 81       	ld	r26, Y
 32a:	b9 81       	ldd	r27, Y+1	; 0x01
 32c:	84 81       	ldd	r24, Z+4	; 0x04
 32e:	11 97       	sbiw	r26, 0x01	; 1
 330:	8c 93       	st	X, r24
 332:	a8 81       	ld	r26, Y
 334:	b9 81       	ldd	r27, Y+1	; 0x01
 336:	83 81       	ldd	r24, Z+3	; 0x03
 338:	12 97       	sbiw	r26, 0x02	; 2
 33a:	8c 93       	st	X, r24
 33c:	a8 81       	ld	r26, Y
 33e:	b9 81       	ldd	r27, Y+1	; 0x01
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	13 97       	sbiw	r26, 0x03	; 3
 344:	8c 93       	st	X, r24
 346:	88 81       	ld	r24, Y
 348:	99 81       	ldd	r25, Y+1	; 0x01
 34a:	21 81       	ldd	r18, Z+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	34 97       	sbiw	r30, 0x04	; 4
 350:	20 83       	st	Z, r18
 352:	88 81       	ld	r24, Y
 354:	99 81       	ldd	r25, Y+1	; 0x01
 356:	05 97       	sbiw	r24, 0x05	; 5
 358:	9e bf       	out	0x3e, r25	; 62
 35a:	8d bf       	out	0x3d, r24	; 61
 35c:	78 94       	sei
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <x_delay>:
 364:	9c 01       	movw	r18, r24
 366:	9f b7       	in	r25, 0x3f	; 63
 368:	f8 94       	cli
 36a:	e0 91 3c 02 	lds	r30, 0x023C
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	e1 5a       	subi	r30, 0xA1	; 161
 376:	f5 4f       	sbci	r31, 0xF5	; 245
 378:	31 83       	std	Z+1, r19	; 0x01
 37a:	20 83       	st	Z, r18
 37c:	20 91 3d 02 	lds	r18, 0x023D
 380:	80 91 70 0a 	lds	r24, 0x0A70
 384:	82 2b       	or	r24, r18
 386:	80 93 3d 02 	sts	0x023D, r24
 38a:	9f bf       	out	0x3f, r25	; 63
 38c:	cb ce       	rjmp	.-618    	; 0x124 <x_yield>
 38e:	08 95       	ret

00000390 <__vector_21>:
                zero. If a thread is delayed and its counter reaches zero, then it
                is made READY and may be scheduled to run.

----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	0b b6       	in	r0, 0x3b	; 59
 39c:	0f 92       	push	r0
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31

   // Increment system counter
   x_system_counter++;
 3b2:	80 91 30 02 	lds	r24, 0x0230
 3b6:	90 91 31 02 	lds	r25, 0x0231
 3ba:	a0 91 32 02 	lds	r26, 0x0232
 3be:	b0 91 33 02 	lds	r27, 0x0233
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	a1 1d       	adc	r26, r1
 3c6:	b1 1d       	adc	r27, r1
 3c8:	80 93 30 02 	sts	0x0230, r24
 3cc:	90 93 31 02 	sts	0x0231, r25
 3d0:	a0 93 32 02 	sts	0x0232, r26
 3d4:	b0 93 33 02 	sts	0x0233, r27
 3d8:	30 91 3d 02 	lds	r19, 0x023D
 3dc:	ef e5       	ldi	r30, 0x5F	; 95
 3de:	fa e0       	ldi	r31, 0x0A	; 10
 3e0:	4f e6       	ldi	r20, 0x6F	; 111
 3e2:	5a e0       	ldi	r21, 0x0A	; 10

   char msk = 0x01;  // start with thread 0
 3e4:	21 e0       	ldi	r18, 0x01	; 1

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
      (*pdelay)--;
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	81 93       	st	Z+, r24
 3ee:	91 93       	st	Z+, r25
      if(*pdelay == 0){
 3f0:	89 2b       	or	r24, r25
 3f2:	19 f4       	brne	.+6      	; 0x3fa <__vector_21+0x6a>
         x_delay_status &= ~msk;
 3f4:	82 2f       	mov	r24, r18
 3f6:	80 95       	com	r24
 3f8:	38 23       	and	r19, r24
      }
      msk <<= 1;
 3fa:	22 0f       	add	r18, r18

   char msk = 0x01;  // start with thread 0

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
 3fc:	e4 17       	cp	r30, r20
 3fe:	f5 07       	cpc	r31, r21
 400:	91 f7       	brne	.-28     	; 0x3e6 <__vector_21+0x56>
 402:	30 93 3d 02 	sts	0x023D, r19
      }
      msk <<= 1;
      pdelay++;
   }
   
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0b be       	out	0x3b, r0	; 59
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <io_controller>:

/*
 * Handles serial I/O
 */
void io_controller(void) {
	Serial_open(0,19200,SERIAL_8N1);
 428:	26 e0       	ldi	r18, 0x06	; 6
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	5b e4       	ldi	r21, 0x4B	; 75
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	44 d1       	rcall	.+648    	; 0x6c2 <Serial_open>
	//char * message = "H";
	while(1) {
		Serial_write(0, 'h');
 43a:	68 e6       	ldi	r22, 0x68	; 104
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	42 d2       	rcall	.+1156   	; 0x8c6 <Serial_write>
		//Serial_read(0);
		//x_yield();
		x_delay(1000);
 442:	88 ee       	ldi	r24, 0xE8	; 232
 444:	93 e0       	ldi	r25, 0x03	; 3
 446:	8e df       	rcall	.-228    	; 0x364 <x_delay>
	}
 448:	f8 cf       	rjmp	.-16     	; 0x43a <io_controller+0x12>

0000044a <box_controller>:
/*
 * Controller for the box
 */
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
 44a:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(1000);
		//_delay_ms(1000);
		PORTB ^= 0x10;
 44c:	c0 e1       	ldi	r28, 0x10	; 16
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(1000);
 44e:	88 ee       	ldi	r24, 0xE8	; 232
 450:	93 e0       	ldi	r25, 0x03	; 3
 452:	88 df       	rcall	.-240    	; 0x364 <x_delay>
		//_delay_ms(1000);
		PORTB ^= 0x10;
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8c 27       	eor	r24, r28
 458:	85 b9       	out	0x05, r24	; 5
		//x_yield();
	}
 45a:	f9 cf       	rjmp	.-14     	; 0x44e <box_controller+0x4>

0000045c <sensor_controller>:
 * Polls sensor for temperature every second
 */
void sensor_controller(void) {
	
	while(1) {
		x_yield();
 45c:	63 de       	rcall	.-826    	; 0x124 <x_yield>
	}
 45e:	fe cf       	rjmp	.-4      	; 0x45c <sensor_controller>

00000460 <main>:
}

int main(void)
{
	x_init();
 460:	0a df       	rcall	.-492    	; 0x276 <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e1       	ldi	r22, 0x14	; 20
 466:	72 e0       	ldi	r23, 0x02	; 2
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	c4 de       	rcall	.-632    	; 0x1f4 <x_new>
	x_new(1, sensor_controller, 1);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	6e e2       	ldi	r22, 0x2E	; 46
 470:	72 e0       	ldi	r23, 0x02	; 2
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	bf de       	rcall	.-642    	; 0x1f4 <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	65 e2       	ldi	r22, 0x25	; 37
 47a:	72 e0       	ldi	r23, 0x02	; 2
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	ba de       	rcall	.-652    	; 0x1f4 <x_new>
}
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	08 95       	ret

00000486 <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 48a:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 1)
 48c:	fc 01       	movw	r30, r24
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ef 58       	subi	r30, 0x8F	; 143
 49c:	f5 4f       	sbci	r31, 0xF5	; 245
 49e:	23 81       	ldd	r18, Z+3	; 0x03
 4a0:	21 30       	cpi	r18, 0x01	; 1
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <Q_putc+0x20>
 4a4:	58 c0       	rjmp	.+176    	; 0x556 <Q_putc+0xd0>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4a6:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4a8:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
 4aa:	fc 01       	movw	r30, r24
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	ef 58       	subi	r30, 0x8F	; 143
 4ba:	f5 4f       	sbci	r31, 0xF5	; 245
 4bc:	20 81       	ld	r18, Z
 4be:	c6 81       	ldd	r28, Z+6	; 0x06
 4c0:	d7 81       	ldd	r29, Z+7	; 0x07
 4c2:	c2 0f       	add	r28, r18
 4c4:	d1 1d       	adc	r29, r1
 4c6:	68 83       	st	Y, r22
			qcb->available += 1;
 4c8:	24 81       	ldd	r18, Z+4	; 0x04
 4ca:	35 81       	ldd	r19, Z+5	; 0x05
 4cc:	2f 5f       	subi	r18, 0xFF	; 255
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	35 83       	std	Z+5, r19	; 0x05
 4d2:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 2)
 4d4:	23 81       	ldd	r18, Z+3	; 0x03
 4d6:	22 30       	cpi	r18, 0x02	; 2
 4d8:	51 f4       	brne	.+20     	; 0x4ee <Q_putc+0x68>
			{
				qcb->flags = 0;
 4da:	fc 01       	movw	r30, r24
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	ef 58       	subi	r30, 0x8F	; 143
 4ea:	f5 4f       	sbci	r31, 0xF5	; 245
 4ec:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
 4ee:	fc 01       	movw	r30, r24
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	ef 58       	subi	r30, 0x8F	; 143
 4fe:	f5 4f       	sbci	r31, 0xF5	; 245
 500:	30 81       	ld	r19, Z
 502:	22 81       	ldd	r18, Z+2	; 0x02
 504:	63 2f       	mov	r22, r19
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	42 2f       	mov	r20, r18
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	64 23       	and	r22, r20
 512:	75 23       	and	r23, r21
 514:	41 81       	ldd	r20, Z+1	; 0x01
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	64 17       	cp	r22, r20
 51a:	75 07       	cpc	r23, r21
 51c:	69 f0       	breq	.+26     	; 0x538 <Q_putc+0xb2>
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	fc 01       	movw	r30, r24
 52c:	ef 58       	subi	r30, 0x8F	; 143
 52e:	f5 4f       	sbci	r31, 0xF5	; 245
 530:	3f 5f       	subi	r19, 0xFF	; 255
 532:	23 23       	and	r18, r19
 534:	20 83       	st	Z, r18
 536:	11 c0       	rjmp	.+34     	; 0x55a <Q_putc+0xd4>
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	fc 01       	movw	r30, r24
 546:	ef 58       	subi	r30, 0x8F	; 143
 548:	f5 4f       	sbci	r31, 0xF5	; 245
 54a:	3f 5f       	subi	r19, 0xFF	; 255
 54c:	23 23       	and	r18, r19
 54e:	20 83       	st	Z, r18
				qcb->flags = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	83 83       	std	Z+3, r24	; 0x03
 554:	02 c0       	rjmp	.+4      	; 0x55a <Q_putc+0xd4>
		}
		return 1;
	}
	else
	{
		return 0;
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <Q_putc+0xd8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 55a:	af bf       	out	0x3f, r26	; 63
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
			}
		}
		return 1;
 55c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 568:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 2)
 56a:	fc 01       	movw	r30, r24
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	ef 58       	subi	r30, 0x8F	; 143
 57a:	f5 4f       	sbci	r31, 0xF5	; 245
 57c:	23 81       	ldd	r18, Z+3	; 0x03
 57e:	22 30       	cpi	r18, 0x02	; 2
 580:	09 f4       	brne	.+2      	; 0x584 <Q_getc+0x20>
 582:	5a c0       	rjmp	.+180    	; 0x638 <Q_getc+0xd4>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 584:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 586:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
 588:	fc 01       	movw	r30, r24
 58a:	ee 0f       	add	r30, r30
 58c:	ff 1f       	adc	r31, r31
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	ef 58       	subi	r30, 0x8F	; 143
 598:	f5 4f       	sbci	r31, 0xF5	; 245
 59a:	21 81       	ldd	r18, Z+1	; 0x01
 59c:	c6 81       	ldd	r28, Z+6	; 0x06
 59e:	d7 81       	ldd	r29, Z+7	; 0x07
 5a0:	c2 0f       	add	r28, r18
 5a2:	d1 1d       	adc	r29, r1
 5a4:	28 81       	ld	r18, Y
 5a6:	eb 01       	movw	r28, r22
 5a8:	28 83       	st	Y, r18
			qcb->available -= 1;
 5aa:	24 81       	ldd	r18, Z+4	; 0x04
 5ac:	35 81       	ldd	r19, Z+5	; 0x05
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	31 09       	sbc	r19, r1
 5b2:	35 83       	std	Z+5, r19	; 0x05
 5b4:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 1)
 5b6:	23 81       	ldd	r18, Z+3	; 0x03
 5b8:	21 30       	cpi	r18, 0x01	; 1
 5ba:	51 f4       	brne	.+20     	; 0x5d0 <Q_getc+0x6c>
			{
				qcb->flags = 0;
 5bc:	fc 01       	movw	r30, r24
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	ef 58       	subi	r30, 0x8F	; 143
 5cc:	f5 4f       	sbci	r31, 0xF5	; 245
 5ce:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
 5d0:	fc 01       	movw	r30, r24
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	ef 58       	subi	r30, 0x8F	; 143
 5e0:	f5 4f       	sbci	r31, 0xF5	; 245
 5e2:	31 81       	ldd	r19, Z+1	; 0x01
 5e4:	22 81       	ldd	r18, Z+2	; 0x02
 5e6:	63 2f       	mov	r22, r19
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	42 2f       	mov	r20, r18
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	64 23       	and	r22, r20
 5f4:	75 23       	and	r23, r21
 5f6:	40 81       	ld	r20, Z
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	64 17       	cp	r22, r20
 5fc:	75 07       	cpc	r23, r21
 5fe:	69 f0       	breq	.+26     	; 0x61a <Q_getc+0xb6>
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	fc 01       	movw	r30, r24
 60e:	ef 58       	subi	r30, 0x8F	; 143
 610:	f5 4f       	sbci	r31, 0xF5	; 245
 612:	3f 5f       	subi	r19, 0xFF	; 255
 614:	23 23       	and	r18, r19
 616:	21 83       	std	Z+1, r18	; 0x01
 618:	11 c0       	rjmp	.+34     	; 0x63c <Q_getc+0xd8>
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	fc 01       	movw	r30, r24
 628:	ef 58       	subi	r30, 0x8F	; 143
 62a:	f5 4f       	sbci	r31, 0xF5	; 245
 62c:	3f 5f       	subi	r19, 0xFF	; 255
 62e:	23 23       	and	r18, r19
 630:	21 83       	std	Z+1, r18	; 0x01
				qcb->flags = 2;
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	83 83       	std	Z+3, r24	; 0x03
 636:	02 c0       	rjmp	.+4      	; 0x63c <Q_getc+0xd8>
			}
		}
		return 1;
	}
	return 0;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <Q_getc+0xdc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 63c:	af bf       	out	0x3f, r26	; 63
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
			}
		}
		return 1;
 63e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
 646:	9c 01       	movw	r18, r24
 648:	21 50       	subi	r18, 0x01	; 1
 64a:	31 09       	sbc	r19, r1
 64c:	2f 3f       	cpi	r18, 0xFF	; 255
 64e:	31 05       	cpc	r19, r1
 650:	09 f0       	breq	.+2      	; 0x654 <Q_create+0xe>
 652:	98 f5       	brcc	.+102    	; 0x6ba <Q_create+0x74>
 654:	28 23       	and	r18, r24
 656:	39 23       	and	r19, r25
 658:	23 2b       	or	r18, r19
 65a:	89 f5       	brne	.+98     	; 0x6be <Q_create+0x78>
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
 65c:	20 91 34 02 	lds	r18, 0x0234
 660:	22 23       	and	r18, r18
 662:	41 f0       	breq	.+16     	; 0x674 <Q_create+0x2e>
 664:	e5 e3       	ldi	r30, 0x35	; 53
 666:	f2 e0       	ldi	r31, 0x02	; 2
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (occupied[i] == false)
 66c:	41 91       	ld	r20, Z+
 66e:	41 11       	cpse	r20, r1
 670:	1d c0       	rjmp	.+58     	; 0x6ac <Q_create+0x66>
 672:	02 c0       	rjmp	.+4      	; 0x678 <Q_create+0x32>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
		{
			queues[i].in = 0;
 678:	f9 01       	movw	r30, r18
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	ef 58       	subi	r30, 0x8F	; 143
 688:	f5 4f       	sbci	r31, 0xF5	; 245
 68a:	10 82       	st	Z, r1
			queues[i].out = 0;
 68c:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
 68e:	81 50       	subi	r24, 0x01	; 1
 690:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
 692:	82 e0       	ldi	r24, 0x02	; 2
 694:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
 696:	15 82       	std	Z+5, r1	; 0x05
 698:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
 69a:	77 83       	std	Z+7, r23	; 0x07
 69c:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
 69e:	f9 01       	movw	r30, r18
 6a0:	ec 5c       	subi	r30, 0xCC	; 204
 6a2:	fd 4f       	sbci	r31, 0xFD	; 253
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 83       	st	Z, r24
			return i;
 6a8:	82 2f       	mov	r24, r18
 6aa:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	28 30       	cpi	r18, 0x08	; 8
 6b2:	31 05       	cpc	r19, r1
 6b4:	d9 f6       	brne	.-74     	; 0x66c <Q_create+0x26>
			queues[i].pQ = pbuffer;
			occupied[i] = true;
			return i;
		}
	}
	return -1;
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	08 95       	ret

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	08 95       	ret
 6be:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
 6c0:	08 95       	ret

000006c2 <Serial_open>:
int Serial_write_string(int port, char * data, int data_length) {
	for (int i = 0; i < data_length; i++) {
		Serial_write(port, data[i]);
	}
	return 1;
}
 6c2:	6f 92       	push	r6
 6c4:	7f 92       	push	r7
 6c6:	8f 92       	push	r8
 6c8:	9f 92       	push	r9
 6ca:	af 92       	push	r10
 6cc:	bf 92       	push	r11
 6ce:	cf 92       	push	r12
 6d0:	df 92       	push	r13
 6d2:	ef 92       	push	r14
 6d4:	ff 92       	push	r15
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	91 05       	cpc	r25, r1
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <Serial_open+0x22>
 6e2:	e1 c0       	rjmp	.+450    	; 0x8a6 <Serial_open+0x1e4>
 6e4:	12 2f       	mov	r17, r18
 6e6:	6a 01       	movw	r12, r20
 6e8:	7b 01       	movw	r14, r22
 6ea:	3c 01       	movw	r6, r24
 6ec:	4c 01       	movw	r8, r24
 6ee:	88 0c       	add	r8, r8
 6f0:	99 1c       	adc	r9, r9
 6f2:	5c 01       	movw	r10, r24
 6f4:	aa 0c       	add	r10, r10
 6f6:	bb 1c       	adc	r11, r11
 6f8:	aa 0c       	add	r10, r10
 6fa:	bb 1c       	adc	r11, r11
 6fc:	aa 0c       	add	r10, r10
 6fe:	bb 1c       	adc	r11, r11
 700:	c4 01       	movw	r24, r8
 702:	8a 0d       	add	r24, r10
 704:	9b 1d       	adc	r25, r11
 706:	ec 01       	movw	r28, r24
 708:	c8 5f       	subi	r28, 0xF8	; 248
 70a:	dd 4f       	sbci	r29, 0xFD	; 253
 70c:	6a 81       	ldd	r22, Y+2	; 0x02
 70e:	7b 81       	ldd	r23, Y+3	; 0x03
 710:	8c 81       	ldd	r24, Y+4	; 0x04
 712:	9d 81       	ldd	r25, Y+5	; 0x05
 714:	98 df       	rcall	.-208    	; 0x646 <Q_create>
 716:	88 83       	st	Y, r24
 718:	6e 81       	ldd	r22, Y+6	; 0x06
 71a:	7f 81       	ldd	r23, Y+7	; 0x07
 71c:	88 85       	ldd	r24, Y+8	; 0x08
 71e:	99 85       	ldd	r25, Y+9	; 0x09
 720:	92 df       	rcall	.-220    	; 0x646 <Q_create>
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	f4 01       	movw	r30, r8
 726:	e0 50       	subi	r30, 0x00	; 0
 728:	fe 4f       	sbci	r31, 0xFE	; 254
 72a:	01 90       	ld	r0, Z+
 72c:	f0 81       	ld	r31, Z
 72e:	e0 2d       	mov	r30, r0
 730:	80 81       	ld	r24, Z
 732:	82 60       	ori	r24, 0x02	; 2
 734:	80 83       	st	Z, r24
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	c8 16       	cp	r12, r24
 73a:	80 e7       	ldi	r24, 0x70	; 112
 73c:	d8 06       	cpc	r13, r24
 73e:	e1 04       	cpc	r14, r1
 740:	f1 04       	cpc	r15, r1
 742:	09 f4       	brne	.+2      	; 0x746 <Serial_open+0x84>
 744:	73 c0       	rjmp	.+230    	; 0x82c <Serial_open+0x16a>
 746:	54 f5       	brge	.+84     	; 0x79c <Serial_open+0xda>
 748:	80 e8       	ldi	r24, 0x80	; 128
 74a:	c8 16       	cp	r12, r24
 74c:	85 e2       	ldi	r24, 0x25	; 37
 74e:	d8 06       	cpc	r13, r24
 750:	e1 04       	cpc	r14, r1
 752:	f1 04       	cpc	r15, r1
 754:	09 f4       	brne	.+2      	; 0x758 <Serial_open+0x96>
 756:	5b c0       	rjmp	.+182    	; 0x80e <Serial_open+0x14c>
 758:	8c f4       	brge	.+34     	; 0x77c <Serial_open+0xba>
 75a:	80 e6       	ldi	r24, 0x60	; 96
 75c:	c8 16       	cp	r12, r24
 75e:	89 e0       	ldi	r24, 0x09	; 9
 760:	d8 06       	cpc	r13, r24
 762:	e1 04       	cpc	r14, r1
 764:	f1 04       	cpc	r15, r1
 766:	09 f4       	brne	.+2      	; 0x76a <Serial_open+0xa8>
 768:	48 c0       	rjmp	.+144    	; 0x7fa <Serial_open+0x138>
 76a:	80 ec       	ldi	r24, 0xC0	; 192
 76c:	c8 16       	cp	r12, r24
 76e:	82 e1       	ldi	r24, 0x12	; 18
 770:	d8 06       	cpc	r13, r24
 772:	e1 04       	cpc	r14, r1
 774:	f1 04       	cpc	r15, r1
 776:	09 f4       	brne	.+2      	; 0x77a <Serial_open+0xb8>
 778:	45 c0       	rjmp	.+138    	; 0x804 <Serial_open+0x142>
 77a:	7b c0       	rjmp	.+246    	; 0x872 <Serial_open+0x1b0>
 77c:	80 e4       	ldi	r24, 0x40	; 64
 77e:	c8 16       	cp	r12, r24
 780:	88 e3       	ldi	r24, 0x38	; 56
 782:	d8 06       	cpc	r13, r24
 784:	e1 04       	cpc	r14, r1
 786:	f1 04       	cpc	r15, r1
 788:	09 f4       	brne	.+2      	; 0x78c <Serial_open+0xca>
 78a:	46 c0       	rjmp	.+140    	; 0x818 <Serial_open+0x156>
 78c:	c1 14       	cp	r12, r1
 78e:	8b e4       	ldi	r24, 0x4B	; 75
 790:	d8 06       	cpc	r13, r24
 792:	e1 04       	cpc	r14, r1
 794:	f1 04       	cpc	r15, r1
 796:	09 f4       	brne	.+2      	; 0x79a <Serial_open+0xd8>
 798:	44 c0       	rjmp	.+136    	; 0x822 <Serial_open+0x160>
 79a:	6b c0       	rjmp	.+214    	; 0x872 <Serial_open+0x1b0>
 79c:	c1 14       	cp	r12, r1
 79e:	8c e2       	ldi	r24, 0x2C	; 44
 7a0:	d8 06       	cpc	r13, r24
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	e8 06       	cpc	r14, r24
 7a6:	f1 04       	cpc	r15, r1
 7a8:	09 f4       	brne	.+2      	; 0x7ac <Serial_open+0xea>
 7aa:	4f c0       	rjmp	.+158    	; 0x84a <Serial_open+0x188>
 7ac:	6c f4       	brge	.+26     	; 0x7c8 <Serial_open+0x106>
 7ae:	c1 14       	cp	r12, r1
 7b0:	86 e9       	ldi	r24, 0x96	; 150
 7b2:	d8 06       	cpc	r13, r24
 7b4:	e1 04       	cpc	r14, r1
 7b6:	f1 04       	cpc	r15, r1
 7b8:	f1 f1       	breq	.+124    	; 0x836 <Serial_open+0x174>
 7ba:	c1 14       	cp	r12, r1
 7bc:	81 ee       	ldi	r24, 0xE1	; 225
 7be:	d8 06       	cpc	r13, r24
 7c0:	e1 04       	cpc	r14, r1
 7c2:	f1 04       	cpc	r15, r1
 7c4:	e9 f1       	breq	.+122    	; 0x840 <Serial_open+0x17e>
 7c6:	55 c0       	rjmp	.+170    	; 0x872 <Serial_open+0x1b0>
 7c8:	c1 14       	cp	r12, r1
 7ca:	84 e8       	ldi	r24, 0x84	; 132
 7cc:	d8 06       	cpc	r13, r24
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	e8 06       	cpc	r14, r24
 7d2:	f1 04       	cpc	r15, r1
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <Serial_open+0x116>
 7d6:	43 c0       	rjmp	.+134    	; 0x85e <Serial_open+0x19c>
 7d8:	80 e9       	ldi	r24, 0x90	; 144
 7da:	c8 16       	cp	r12, r24
 7dc:	80 ed       	ldi	r24, 0xD0	; 208
 7de:	d8 06       	cpc	r13, r24
 7e0:	83 e0       	ldi	r24, 0x03	; 3
 7e2:	e8 06       	cpc	r14, r24
 7e4:	f1 04       	cpc	r15, r1
 7e6:	09 f4       	brne	.+2      	; 0x7ea <Serial_open+0x128>
 7e8:	3f c0       	rjmp	.+126    	; 0x868 <Serial_open+0x1a6>
 7ea:	c1 14       	cp	r12, r1
 7ec:	82 ec       	ldi	r24, 0xC2	; 194
 7ee:	d8 06       	cpc	r13, r24
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	e8 06       	cpc	r14, r24
 7f4:	f1 04       	cpc	r15, r1
 7f6:	e9 f5       	brne	.+122    	; 0x872 <Serial_open+0x1b0>
 7f8:	2d c0       	rjmp	.+90     	; 0x854 <Serial_open+0x192>
 7fa:	40 e4       	ldi	r20, 0x40	; 64
 7fc:	53 e0       	ldi	r21, 0x03	; 3
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	3a c0       	rjmp	.+116    	; 0x878 <Serial_open+0x1b6>
 804:	40 ea       	ldi	r20, 0xA0	; 160
 806:	51 e0       	ldi	r21, 0x01	; 1
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	35 c0       	rjmp	.+106    	; 0x878 <Serial_open+0x1b6>
 80e:	4f ec       	ldi	r20, 0xCF	; 207
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	30 c0       	rjmp	.+96     	; 0x878 <Serial_open+0x1b6>
 818:	4a e8       	ldi	r20, 0x8A	; 138
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	2b c0       	rjmp	.+86     	; 0x878 <Serial_open+0x1b6>
 822:	47 e6       	ldi	r20, 0x67	; 103
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	70 e0       	ldi	r23, 0x00	; 0
 82a:	26 c0       	rjmp	.+76     	; 0x878 <Serial_open+0x1b6>
 82c:	44 e4       	ldi	r20, 0x44	; 68
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	21 c0       	rjmp	.+66     	; 0x878 <Serial_open+0x1b6>
 836:	43 e3       	ldi	r20, 0x33	; 51
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	1c c0       	rjmp	.+56     	; 0x878 <Serial_open+0x1b6>
 840:	42 e2       	ldi	r20, 0x22	; 34
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	17 c0       	rjmp	.+46     	; 0x878 <Serial_open+0x1b6>
 84a:	49 e1       	ldi	r20, 0x19	; 25
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	12 c0       	rjmp	.+36     	; 0x878 <Serial_open+0x1b6>
 854:	40 e1       	ldi	r20, 0x10	; 16
 856:	50 e0       	ldi	r21, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	0d c0       	rjmp	.+26     	; 0x878 <Serial_open+0x1b6>
 85e:	48 e0       	ldi	r20, 0x08	; 8
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	08 c0       	rjmp	.+16     	; 0x878 <Serial_open+0x1b6>
 868:	47 e0       	ldi	r20, 0x07	; 7
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	03 c0       	rjmp	.+6      	; 0x878 <Serial_open+0x1b6>
 872:	4f ef       	ldi	r20, 0xFF	; 255
 874:	5f ef       	ldi	r21, 0xFF	; 255
 876:	ba 01       	movw	r22, r20
 878:	8f b7       	in	r24, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	e3 01       	movw	r28, r6
 87e:	cc 0f       	add	r28, r28
 880:	dd 1f       	adc	r29, r29
 882:	c0 50       	subi	r28, 0x00	; 0
 884:	de 4f       	sbci	r29, 0xFE	; 254
 886:	e8 81       	ld	r30, Y
 888:	f9 81       	ldd	r31, Y+1	; 0x01
 88a:	55 83       	std	Z+5, r21	; 0x05
 88c:	44 83       	std	Z+4, r20	; 0x04
 88e:	e8 81       	ld	r30, Y
 890:	f9 81       	ldd	r31, Y+1	; 0x01
 892:	12 83       	std	Z+2, r17	; 0x02
 894:	e8 81       	ld	r30, Y
 896:	f9 81       	ldd	r31, Y+1	; 0x01
 898:	98 e9       	ldi	r25, 0x98	; 152
 89a:	91 83       	std	Z+1, r25	; 0x01
 89c:	8f bf       	out	0x3f, r24	; 63
 89e:	78 94       	sei
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <Serial_open+0x1e8>
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	9f ef       	ldi	r25, 0xFF	; 255
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	bf 90       	pop	r11
 8ba:	af 90       	pop	r10
 8bc:	9f 90       	pop	r9
 8be:	8f 90       	pop	r8
 8c0:	7f 90       	pop	r7
 8c2:	6f 90       	pop	r6
 8c4:	08 95       	ret

000008c6 <Serial_write>:
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	ec 01       	movw	r28, r24
 8cc:	fc 01       	movw	r30, r24
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	e8 0f       	add	r30, r24
 8e0:	f9 1f       	adc	r31, r25
 8e2:	e8 5f       	subi	r30, 0xF8	; 248
 8e4:	fd 4f       	sbci	r31, 0xFD	; 253
 8e6:	81 81       	ldd	r24, Z+1	; 0x01
 8e8:	ce dd       	rcall	.-1124   	; 0x486 <Q_putc>
 8ea:	88 23       	and	r24, r24
 8ec:	61 f0       	breq	.+24     	; 0x906 <Serial_write+0x40>
 8ee:	cc 0f       	add	r28, r28
 8f0:	dd 1f       	adc	r29, r29
 8f2:	c0 50       	subi	r28, 0x00	; 0
 8f4:	de 4f       	sbci	r29, 0xFE	; 254
 8f6:	e8 81       	ld	r30, Y
 8f8:	f9 81       	ldd	r31, Y+1	; 0x01
 8fa:	81 81       	ldd	r24, Z+1	; 0x01
 8fc:	80 62       	ori	r24, 0x20	; 32
 8fe:	81 83       	std	Z+1, r24	; 0x01
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <Serial_write+0x44>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	df 91       	pop	r29
 90c:	cf 91       	pop	r28
 90e:	08 95       	ret

00000910 <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	0b b6       	in	r0, 0x3b	; 59
 91c:	0f 92       	push	r0
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	1f 92       	push	r1
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
 940:	be 01       	movw	r22, r28
 942:	6f 5f       	subi	r22, 0xFF	; 255
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	80 91 09 02 	lds	r24, 0x0209
 94a:	0c de       	rcall	.-1000   	; 0x564 <Q_getc>
 94c:	88 23       	and	r24, r24
 94e:	21 f0       	breq	.+8      	; 0x958 <__vector_26+0x48>
	{
		UDR0 = data;
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	80 93 c6 00 	sts	0x00C6, r24
 956:	07 c0       	rjmp	.+14     	; 0x966 <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
 958:	e0 91 00 02 	lds	r30, 0x0200
 95c:	f0 91 01 02 	lds	r31, 0x0201
 960:	81 81       	ldd	r24, Z+1	; 0x01
 962:	8f 7d       	andi	r24, 0xDF	; 223
 964:	81 83       	std	Z+1, r24	; 0x01
	}
}
 966:	0f 90       	pop	r0
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	ff 91       	pop	r31
 96e:	ef 91       	pop	r30
 970:	bf 91       	pop	r27
 972:	af 91       	pop	r26
 974:	9f 91       	pop	r25
 976:	8f 91       	pop	r24
 978:	7f 91       	pop	r23
 97a:	6f 91       	pop	r22
 97c:	5f 91       	pop	r21
 97e:	4f 91       	pop	r20
 980:	3f 91       	pop	r19
 982:	2f 91       	pop	r18
 984:	0f 90       	pop	r0
 986:	0b be       	out	0x3b, r0	; 59
 988:	0f 90       	pop	r0
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	0f 90       	pop	r0
 98e:	1f 90       	pop	r1
 990:	18 95       	reti

00000992 <__vector_37>:


ISR(USART1_UDRE_vect)
{
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	0b b6       	in	r0, 0x3b	; 59
 99e:	0f 92       	push	r0
 9a0:	2f 93       	push	r18
 9a2:	3f 93       	push	r19
 9a4:	4f 93       	push	r20
 9a6:	5f 93       	push	r21
 9a8:	6f 93       	push	r22
 9aa:	7f 93       	push	r23
 9ac:	8f 93       	push	r24
 9ae:	9f 93       	push	r25
 9b0:	af 93       	push	r26
 9b2:	bf 93       	push	r27
 9b4:	ef 93       	push	r30
 9b6:	ff 93       	push	r31
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	1f 92       	push	r1
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
 9c2:	be 01       	movw	r22, r28
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	80 91 13 02 	lds	r24, 0x0213
 9cc:	cb dd       	rcall	.-1130   	; 0x564 <Q_getc>
 9ce:	88 23       	and	r24, r24
 9d0:	21 f0       	breq	.+8      	; 0x9da <__vector_37+0x48>
	{
		UDR1 = data;
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	80 93 ce 00 	sts	0x00CE, r24
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
 9da:	e0 91 02 02 	lds	r30, 0x0202
 9de:	f0 91 03 02 	lds	r31, 0x0203
 9e2:	81 81       	ldd	r24, Z+1	; 0x01
 9e4:	8f 7d       	andi	r24, 0xDF	; 223
 9e6:	81 83       	std	Z+1, r24	; 0x01
	}
}
 9e8:	0f 90       	pop	r0
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0b be       	out	0x3b, r0	; 59
 a0a:	0f 90       	pop	r0
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	0f 90       	pop	r0
 a10:	1f 90       	pop	r1
 a12:	18 95       	reti

00000a14 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 a14:	1f 92       	push	r1
 a16:	0f 92       	push	r0
 a18:	0f b6       	in	r0, 0x3f	; 63
 a1a:	0f 92       	push	r0
 a1c:	11 24       	eor	r1, r1
 a1e:	0b b6       	in	r0, 0x3b	; 59
 a20:	0f 92       	push	r0
 a22:	2f 93       	push	r18
 a24:	3f 93       	push	r19
 a26:	4f 93       	push	r20
 a28:	5f 93       	push	r21
 a2a:	6f 93       	push	r22
 a2c:	7f 93       	push	r23
 a2e:	8f 93       	push	r24
 a30:	9f 93       	push	r25
 a32:	af 93       	push	r26
 a34:	bf 93       	push	r27
 a36:	ef 93       	push	r30
 a38:	ff 93       	push	r31
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	1f 92       	push	r1
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
 a44:	be 01       	movw	r22, r28
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	80 91 1d 02 	lds	r24, 0x021D
 a4e:	8a dd       	rcall	.-1260   	; 0x564 <Q_getc>
 a50:	88 23       	and	r24, r24
 a52:	21 f0       	breq	.+8      	; 0xa5c <__vector_52+0x48>
	{
		UDR2 = data;
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	80 93 d6 00 	sts	0x00D6, r24
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
 a5c:	e0 91 04 02 	lds	r30, 0x0204
 a60:	f0 91 05 02 	lds	r31, 0x0205
 a64:	81 81       	ldd	r24, Z+1	; 0x01
 a66:	8f 7d       	andi	r24, 0xDF	; 223
 a68:	81 83       	std	Z+1, r24	; 0x01
	}
}
 a6a:	0f 90       	pop	r0
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	ff 91       	pop	r31
 a72:	ef 91       	pop	r30
 a74:	bf 91       	pop	r27
 a76:	af 91       	pop	r26
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	7f 91       	pop	r23
 a7e:	6f 91       	pop	r22
 a80:	5f 91       	pop	r21
 a82:	4f 91       	pop	r20
 a84:	3f 91       	pop	r19
 a86:	2f 91       	pop	r18
 a88:	0f 90       	pop	r0
 a8a:	0b be       	out	0x3b, r0	; 59
 a8c:	0f 90       	pop	r0
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	0f 90       	pop	r0
 a92:	1f 90       	pop	r1
 a94:	18 95       	reti

00000a96 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 a96:	1f 92       	push	r1
 a98:	0f 92       	push	r0
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	0f 92       	push	r0
 a9e:	11 24       	eor	r1, r1
 aa0:	0b b6       	in	r0, 0x3b	; 59
 aa2:	0f 92       	push	r0
 aa4:	2f 93       	push	r18
 aa6:	3f 93       	push	r19
 aa8:	4f 93       	push	r20
 aaa:	5f 93       	push	r21
 aac:	6f 93       	push	r22
 aae:	7f 93       	push	r23
 ab0:	8f 93       	push	r24
 ab2:	9f 93       	push	r25
 ab4:	af 93       	push	r26
 ab6:	bf 93       	push	r27
 ab8:	ef 93       	push	r30
 aba:	ff 93       	push	r31
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	1f 92       	push	r1
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
 ac6:	be 01       	movw	r22, r28
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	80 91 27 02 	lds	r24, 0x0227
 ad0:	49 dd       	rcall	.-1390   	; 0x564 <Q_getc>
 ad2:	88 23       	and	r24, r24
 ad4:	21 f0       	breq	.+8      	; 0xade <__vector_55+0x48>
	{
		UDR3 = data;
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	80 93 36 01 	sts	0x0136, r24
 adc:	07 c0       	rjmp	.+14     	; 0xaec <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
 ade:	e0 91 06 02 	lds	r30, 0x0206
 ae2:	f0 91 07 02 	lds	r31, 0x0207
 ae6:	81 81       	ldd	r24, Z+1	; 0x01
 ae8:	8f 7d       	andi	r24, 0xDF	; 223
 aea:	81 83       	std	Z+1, r24	; 0x01
	}
}
 aec:	0f 90       	pop	r0
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	ff 91       	pop	r31
 af4:	ef 91       	pop	r30
 af6:	bf 91       	pop	r27
 af8:	af 91       	pop	r26
 afa:	9f 91       	pop	r25
 afc:	8f 91       	pop	r24
 afe:	7f 91       	pop	r23
 b00:	6f 91       	pop	r22
 b02:	5f 91       	pop	r21
 b04:	4f 91       	pop	r20
 b06:	3f 91       	pop	r19
 b08:	2f 91       	pop	r18
 b0a:	0f 90       	pop	r0
 b0c:	0b be       	out	0x3b, r0	; 59
 b0e:	0f 90       	pop	r0
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	0f 90       	pop	r0
 b14:	1f 90       	pop	r1
 b16:	18 95       	reti

00000b18 <__vector_25>:

ISR(USART0_RX_vect)
{
 b18:	1f 92       	push	r1
 b1a:	0f 92       	push	r0
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	0f 92       	push	r0
 b20:	11 24       	eor	r1, r1
 b22:	0b b6       	in	r0, 0x3b	; 59
 b24:	0f 92       	push	r0
 b26:	2f 93       	push	r18
 b28:	3f 93       	push	r19
 b2a:	4f 93       	push	r20
 b2c:	5f 93       	push	r21
 b2e:	6f 93       	push	r22
 b30:	7f 93       	push	r23
 b32:	8f 93       	push	r24
 b34:	9f 93       	push	r25
 b36:	af 93       	push	r26
 b38:	bf 93       	push	r27
 b3a:	ef 93       	push	r30
 b3c:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
 b3e:	60 91 c6 00 	lds	r22, 0x00C6
 b42:	80 91 08 02 	lds	r24, 0x0208
 b46:	9f dc       	rcall	.-1730   	; 0x486 <Q_putc>
}
 b48:	ff 91       	pop	r31
 b4a:	ef 91       	pop	r30
 b4c:	bf 91       	pop	r27
 b4e:	af 91       	pop	r26
 b50:	9f 91       	pop	r25
 b52:	8f 91       	pop	r24
 b54:	7f 91       	pop	r23
 b56:	6f 91       	pop	r22
 b58:	5f 91       	pop	r21
 b5a:	4f 91       	pop	r20
 b5c:	3f 91       	pop	r19
 b5e:	2f 91       	pop	r18
 b60:	0f 90       	pop	r0
 b62:	0b be       	out	0x3b, r0	; 59
 b64:	0f 90       	pop	r0
 b66:	0f be       	out	0x3f, r0	; 63
 b68:	0f 90       	pop	r0
 b6a:	1f 90       	pop	r1
 b6c:	18 95       	reti

00000b6e <__vector_36>:

ISR(USART1_RX_vect)
{
 b6e:	1f 92       	push	r1
 b70:	0f 92       	push	r0
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	0f 92       	push	r0
 b76:	11 24       	eor	r1, r1
 b78:	0b b6       	in	r0, 0x3b	; 59
 b7a:	0f 92       	push	r0
 b7c:	2f 93       	push	r18
 b7e:	3f 93       	push	r19
 b80:	4f 93       	push	r20
 b82:	5f 93       	push	r21
 b84:	6f 93       	push	r22
 b86:	7f 93       	push	r23
 b88:	8f 93       	push	r24
 b8a:	9f 93       	push	r25
 b8c:	af 93       	push	r26
 b8e:	bf 93       	push	r27
 b90:	ef 93       	push	r30
 b92:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
 b94:	60 91 ce 00 	lds	r22, 0x00CE
 b98:	80 91 12 02 	lds	r24, 0x0212
 b9c:	74 dc       	rcall	.-1816   	; 0x486 <Q_putc>
}
 b9e:	ff 91       	pop	r31
 ba0:	ef 91       	pop	r30
 ba2:	bf 91       	pop	r27
 ba4:	af 91       	pop	r26
 ba6:	9f 91       	pop	r25
 ba8:	8f 91       	pop	r24
 baa:	7f 91       	pop	r23
 bac:	6f 91       	pop	r22
 bae:	5f 91       	pop	r21
 bb0:	4f 91       	pop	r20
 bb2:	3f 91       	pop	r19
 bb4:	2f 91       	pop	r18
 bb6:	0f 90       	pop	r0
 bb8:	0b be       	out	0x3b, r0	; 59
 bba:	0f 90       	pop	r0
 bbc:	0f be       	out	0x3f, r0	; 63
 bbe:	0f 90       	pop	r0
 bc0:	1f 90       	pop	r1
 bc2:	18 95       	reti

00000bc4 <__vector_51>:

ISR(USART2_RX_vect)
{
 bc4:	1f 92       	push	r1
 bc6:	0f 92       	push	r0
 bc8:	0f b6       	in	r0, 0x3f	; 63
 bca:	0f 92       	push	r0
 bcc:	11 24       	eor	r1, r1
 bce:	0b b6       	in	r0, 0x3b	; 59
 bd0:	0f 92       	push	r0
 bd2:	2f 93       	push	r18
 bd4:	3f 93       	push	r19
 bd6:	4f 93       	push	r20
 bd8:	5f 93       	push	r21
 bda:	6f 93       	push	r22
 bdc:	7f 93       	push	r23
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	af 93       	push	r26
 be4:	bf 93       	push	r27
 be6:	ef 93       	push	r30
 be8:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
 bea:	60 91 d6 00 	lds	r22, 0x00D6
 bee:	80 91 1c 02 	lds	r24, 0x021C
 bf2:	49 dc       	rcall	.-1902   	; 0x486 <Q_putc>
}
 bf4:	ff 91       	pop	r31
 bf6:	ef 91       	pop	r30
 bf8:	bf 91       	pop	r27
 bfa:	af 91       	pop	r26
 bfc:	9f 91       	pop	r25
 bfe:	8f 91       	pop	r24
 c00:	7f 91       	pop	r23
 c02:	6f 91       	pop	r22
 c04:	5f 91       	pop	r21
 c06:	4f 91       	pop	r20
 c08:	3f 91       	pop	r19
 c0a:	2f 91       	pop	r18
 c0c:	0f 90       	pop	r0
 c0e:	0b be       	out	0x3b, r0	; 59
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	0f 90       	pop	r0
 c16:	1f 90       	pop	r1
 c18:	18 95       	reti

00000c1a <__vector_54>:

ISR(USART3_RX_vect)
{
 c1a:	1f 92       	push	r1
 c1c:	0f 92       	push	r0
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	0f 92       	push	r0
 c22:	11 24       	eor	r1, r1
 c24:	0b b6       	in	r0, 0x3b	; 59
 c26:	0f 92       	push	r0
 c28:	2f 93       	push	r18
 c2a:	3f 93       	push	r19
 c2c:	4f 93       	push	r20
 c2e:	5f 93       	push	r21
 c30:	6f 93       	push	r22
 c32:	7f 93       	push	r23
 c34:	8f 93       	push	r24
 c36:	9f 93       	push	r25
 c38:	af 93       	push	r26
 c3a:	bf 93       	push	r27
 c3c:	ef 93       	push	r30
 c3e:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
 c40:	60 91 36 01 	lds	r22, 0x0136
 c44:	80 91 26 02 	lds	r24, 0x0226
 c48:	1e dc       	rcall	.-1988   	; 0x486 <Q_putc>
}
 c4a:	ff 91       	pop	r31
 c4c:	ef 91       	pop	r30
 c4e:	bf 91       	pop	r27
 c50:	af 91       	pop	r26
 c52:	9f 91       	pop	r25
 c54:	8f 91       	pop	r24
 c56:	7f 91       	pop	r23
 c58:	6f 91       	pop	r22
 c5a:	5f 91       	pop	r21
 c5c:	4f 91       	pop	r20
 c5e:	3f 91       	pop	r19
 c60:	2f 91       	pop	r18
 c62:	0f 90       	pop	r0
 c64:	0b be       	out	0x3b, r0	; 59
 c66:	0f 90       	pop	r0
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	0f 90       	pop	r0
 c6c:	1f 90       	pop	r1
 c6e:	18 95       	reti

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
