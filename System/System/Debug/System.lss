
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a6  00800200  00001930  000019c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a86  008004a6  008004a6  00001c6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5e  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa9  00000000  00000000  00003d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a7  00000000  00000000  0000483f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000075c  00000000  00000000  00005de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  00006544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001921  00000000  00000000  00006c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c1       	rjmp	.+880    	; 0x3c6 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_25>
      68:	93 c7       	rjmp	.+3878   	; 0xf90 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_36>
      94:	be c7       	rjmp	.+3964   	; 0x1012 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_51>
      d0:	e1 c7       	rjmp	.+4034   	; 0x1094 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_54>
      dc:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_55>
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e3       	ldi	r30, 0x30	; 48
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 3a       	cpi	r26, 0xA6	; 166
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2f e0       	ldi	r18, 0x0F	; 15
     110:	a6 ea       	ldi	r26, 0xA6	; 166
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 32       	cpi	r26, 0x2C	; 44
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	f5 d4       	rcall	.+2538   	; 0xb0a <main>
     120:	0c 94 96 0c 	jmp	0x192c	; 0x192c <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
     126:	2f 92       	push	r2
		push  r3
     128:	3f 92       	push	r3
		push  r4
     12a:	4f 92       	push	r4
		push  r5
     12c:	5f 92       	push	r5
		push  r6
     12e:	6f 92       	push	r6
		push  r7
     130:	7f 92       	push	r7
		push  r8
     132:	8f 92       	push	r8
		push  r9
     134:	9f 92       	push	r9
		push  r10
     136:	af 92       	push	r10
		push  r11
     138:	bf 92       	push	r11
		push  r12
     13a:	cf 92       	push	r12
		push  r13
     13c:	df 92       	push	r13
		push  r14
     13e:	ef 92       	push	r14
		push  r15
     140:	ff 92       	push	r15
		push  r16
     142:	0f 93       	push	r16
		push  r17
     144:	1f 93       	push	r17
		push  r28
     146:	cf 93       	push	r28
		push  r29
     148:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
     14a:	20 91 b7 04 	lds	r18, 0x04B7
		lds   r19,x_thread_mask
     14e:	30 91 eb 0c 	lds	r19, 0x0CEB

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
     152:	f8 94       	cli
		in		r14,SPL
     154:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
     156:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
     158:	78 94       	sei


		ldi		r30,lo8(stack)
     15a:	e9 eb       	ldi	r30, 0xB9	; 185
		ldi		r31,hi8(stack)
     15c:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r18
     15e:	22 0f       	add	r18, r18
		lsl		r18
     160:	22 0f       	add	r18, r18
		add		r30,r18
     162:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
     164:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
     166:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
     168:	f0 82       	st	Z, r15

0000016a <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
     16a:	20 91 ea 0c 	lds	r18, 0x0CEA
		lds		r19,x_delay_status
     16e:	30 91 b8 04 	lds	r19, 0x04B8
		lds		r20,x_suspend_status
     172:	40 91 d9 04 	lds	r20, 0x04D9
		or		r18,r19
     176:	23 2b       	or	r18, r19
		or		r18,r20
     178:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
     17a:	30 91 b7 04 	lds	r19, 0x04B7
		lds		r20, x_thread_mask
     17e:	40 91 eb 0c 	lds	r20, 0x0CEB
		ldi		r22,NUM_THREADS		;max number of threads
     182:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
     184:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
     186:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
     188:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
     18a:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
     18c:	08 f4       	brcc	.+2      	; 0x190 <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
     18e:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
     190:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
     192:	42 23       	and	r20, r18
		breq	restore				;break out if READY
     194:	19 f0       	breq	.+6      	; 0x19c <restore>
		dec		r22					;decrement thread count
     196:	6a 95       	dec	r22
		brne	1b					;back to test next thread
     198:	b1 f7       	brne	.-20     	; 0x186 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <x_schedule>

0000019c <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
     19c:	30 93 b7 04 	sts	0x04B7, r19
		sts		x_thread_mask,r23
     1a0:	70 93 eb 0c 	sts	0x0CEB, r23

		ldi		r30,lo8(stack)
     1a4:	e9 eb       	ldi	r30, 0xB9	; 185
		ldi		r31,hi8(stack)
     1a6:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r19
     1a8:	33 0f       	add	r19, r19
		lsl		r19
     1aa:	33 0f       	add	r19, r19
		add		r30,r19
     1ac:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
     1ae:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
     1b0:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
     1b2:	30 81       	ld	r19, Z
		
		cli
     1b4:	f8 94       	cli
		out		SPL,r18		;restore SP
     1b6:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
     1b8:	3e bf       	out	0x3e, r19	; 62
		sei
     1ba:	78 94       	sei


		// Restore registers
		pop		r29
     1bc:	df 91       	pop	r29
		pop		r28
     1be:	cf 91       	pop	r28
		pop		r17
     1c0:	1f 91       	pop	r17
		pop		r16
     1c2:	0f 91       	pop	r16
		pop		r15
     1c4:	ff 90       	pop	r15
		pop		r14
     1c6:	ef 90       	pop	r14
		pop		r13
     1c8:	df 90       	pop	r13
		pop		r12
     1ca:	cf 90       	pop	r12
		pop		r11
     1cc:	bf 90       	pop	r11
		pop		r10
     1ce:	af 90       	pop	r10
		pop		r9
     1d0:	9f 90       	pop	r9
		pop		r8
     1d2:	8f 90       	pop	r8
		pop		r7
     1d4:	7f 90       	pop	r7
		pop		r6
     1d6:	6f 90       	pop	r6
		pop		r5
     1d8:	5f 90       	pop	r5
		pop		r4
     1da:	4f 90       	pop	r4
		pop		r3
     1dc:	3f 90       	pop	r3
		pop		r2
     1de:	2f 90       	pop	r2

		// Return to next thread
		ret
     1e0:	08 95       	ret

000001e2 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
		ldi r31,hi8(bitmask8_table)
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
     1e6:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
     1e8:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
     1ea:	84 91       	lpm	r24, Z
		ret
     1ec:	08 95       	ret

000001ee <bitmask8_table>:
     1ee:	01 02       	muls	r16, r17
     1f0:	04 08       	sbc	r0, r4
     1f2:	10 20       	and	r1, r0
     1f4:	40 80       	ld	r4, Z

000001f6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
     1f6:	68 2f       	mov	r22, r24
		or  r22,r25
     1f8:	69 2b       	or	r22, r25
		nop
     1fa:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
     1fc:	31 f0       	breq	.+12     	; 0x20a <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
     1fe:	05 d0       	rcall	.+10     	; 0x20a <delay_usec+0x14>
		rjmp	3f      // 2 cycles
     200:	00 c0       	rjmp	.+0      	; 0x202 <delay_usec+0xc>
3:	
		nop		// 1 cycle
     202:	00 00       	nop
		sbiw	r24,1   // 2 cycles
     204:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
     206:	d9 f7       	brne	.-10     	; 0x1fe <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
     208:	00 00       	nop
1:
     20a:	08 95       	ret

0000020c <x_new>:
   

---------------------------------------------------------------------------------------*/
void x_resume(byte tid)
{
	x_suspend_status &= ~(1 << tid);
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	18 2f       	mov	r17, r24
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	dc 01       	movw	r26, r24
     222:	aa 0f       	add	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	aa 0f       	add	r26, r26
     228:	bb 1f       	adc	r27, r27
     22a:	9d 01       	movw	r18, r26
     22c:	27 54       	subi	r18, 0x47	; 71
     22e:	3b 4f       	sbci	r19, 0xFB	; 251
     230:	79 01       	movw	r14, r18
     232:	d9 01       	movw	r26, r18
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	60 83       	st	Z, r22
     23e:	9f 01       	movw	r18, r30
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	d9 01       	movw	r26, r18
     246:	7c 93       	st	X, r23
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	31 09       	sbc	r19, r1
     24c:	d9 01       	movw	r26, r18
     24e:	1c 92       	st	X, r1
     250:	75 97       	sbiw	r30, 0x15	; 21
     252:	d7 01       	movw	r26, r14
     254:	ed 93       	st	X+, r30
     256:	fc 93       	st	X, r31
     258:	49 83       	std	Y+1, r20	; 0x01
     25a:	c3 df       	rcall	.-122    	; 0x1e2 <bit2mask8>
     25c:	98 2f       	mov	r25, r24
     25e:	80 91 ea 0c 	lds	r24, 0x0CEA
     262:	49 81       	ldd	r20, Y+1	; 0x01
     264:	44 23       	and	r20, r20
     266:	29 f0       	breq	.+10     	; 0x272 <x_new+0x66>
     268:	29 2f       	mov	r18, r25
     26a:	20 95       	com	r18
     26c:	98 2f       	mov	r25, r24
     26e:	92 23       	and	r25, r18
     270:	01 c0       	rjmp	.+2      	; 0x274 <x_new+0x68>
     272:	98 2b       	or	r25, r24
     274:	90 93 ea 0c 	sts	0x0CEA, r25
     278:	80 91 b7 04 	lds	r24, 0x04B7
     27c:	18 13       	cpse	r17, r24
     27e:	07 c0       	rjmp	.+14     	; 0x28e <x_new+0x82>
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	6e cf       	rjmp	.-292    	; 0x16a <x_schedule>
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	08 95       	ret

0000029c <init_System_Timer>:
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	84 bd       	out	0x24, r24	; 36
     2a0:	9a ef       	ldi	r25, 0xFA	; 250
     2a2:	97 bd       	out	0x27, r25	; 39
     2a4:	80 93 6e 00 	sts	0x006E, r24
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	85 bd       	out	0x25, r24	; 37
     2ac:	08 95       	ret

000002ae <x_init>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	f8 94       	cli
     2b4:	8e ef       	ldi	r24, 0xFE	; 254
     2b6:	80 93 ea 0c 	sts	0x0CEA, r24
     2ba:	10 92 d9 04 	sts	0x04D9, r1
     2be:	10 92 b8 04 	sts	0x04B8, r1
     2c2:	10 92 b7 04 	sts	0x04B7, r1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 eb 0c 	sts	0x0CEB, r24
     2cc:	c9 eb       	ldi	r28, 0xB9	; 185
     2ce:	d4 e0       	ldi	r29, 0x04	; 4
     2d0:	89 ed       	ldi	r24, 0xD9	; 217
     2d2:	95 e0       	ldi	r25, 0x05	; 5
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
     2dc:	89 ed       	ldi	r24, 0xD9	; 217
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	9d 83       	std	Y+5, r25	; 0x05
     2e2:	8c 83       	std	Y+4, r24	; 0x04
     2e4:	9f 83       	std	Y+7, r25	; 0x07
     2e6:	8e 83       	std	Y+6, r24	; 0x06
     2e8:	89 ed       	ldi	r24, 0xD9	; 217
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	99 87       	std	Y+9, r25	; 0x09
     2ee:	88 87       	std	Y+8, r24	; 0x08
     2f0:	9b 87       	std	Y+11, r25	; 0x0b
     2f2:	8a 87       	std	Y+10, r24	; 0x0a
     2f4:	89 ed       	ldi	r24, 0xD9	; 217
     2f6:	98 e0       	ldi	r25, 0x08	; 8
     2f8:	9d 87       	std	Y+13, r25	; 0x0d
     2fa:	8c 87       	std	Y+12, r24	; 0x0c
     2fc:	9f 87       	std	Y+15, r25	; 0x0f
     2fe:	8e 87       	std	Y+14, r24	; 0x0e
     300:	89 ed       	ldi	r24, 0xD9	; 217
     302:	99 e0       	ldi	r25, 0x09	; 9
     304:	99 8b       	std	Y+17, r25	; 0x11
     306:	88 8b       	std	Y+16, r24	; 0x10
     308:	9b 8b       	std	Y+19, r25	; 0x13
     30a:	8a 8b       	std	Y+18, r24	; 0x12
     30c:	89 ed       	ldi	r24, 0xD9	; 217
     30e:	9a e0       	ldi	r25, 0x0A	; 10
     310:	9d 8b       	std	Y+21, r25	; 0x15
     312:	8c 8b       	std	Y+20, r24	; 0x14
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	89 ed       	ldi	r24, 0xD9	; 217
     31a:	9b e0       	ldi	r25, 0x0B	; 11
     31c:	99 8f       	std	Y+25, r25	; 0x19
     31e:	88 8f       	std	Y+24, r24	; 0x18
     320:	9b 8f       	std	Y+27, r25	; 0x1b
     322:	8a 8f       	std	Y+26, r24	; 0x1a
     324:	89 ed       	ldi	r24, 0xD9	; 217
     326:	9c e0       	ldi	r25, 0x0C	; 12
     328:	9d 8f       	std	Y+29, r25	; 0x1d
     32a:	8c 8f       	std	Y+28, r24	; 0x1c
     32c:	9f 8f       	std	Y+31, r25	; 0x1f
     32e:	8e 8f       	std	Y+30, r24	; 0x1e
     330:	8a ea       	ldi	r24, 0xAA	; 170
     332:	80 93 da 04 	sts	0x04DA, r24
     336:	80 93 da 05 	sts	0x05DA, r24
     33a:	80 93 da 06 	sts	0x06DA, r24
     33e:	80 93 da 07 	sts	0x07DA, r24
     342:	80 93 da 08 	sts	0x08DA, r24
     346:	80 93 da 09 	sts	0x09DA, r24
     34a:	80 93 da 0a 	sts	0x0ADA, r24
     34e:	80 93 da 0b 	sts	0x0BDA, r24
     352:	a4 df       	rcall	.-184    	; 0x29c <init_System_Timer>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	a8 81       	ld	r26, Y
     35a:	b9 81       	ldd	r27, Y+1	; 0x01
     35c:	85 81       	ldd	r24, Z+5	; 0x05
     35e:	8c 93       	st	X, r24
     360:	a8 81       	ld	r26, Y
     362:	b9 81       	ldd	r27, Y+1	; 0x01
     364:	84 81       	ldd	r24, Z+4	; 0x04
     366:	11 97       	sbiw	r26, 0x01	; 1
     368:	8c 93       	st	X, r24
     36a:	a8 81       	ld	r26, Y
     36c:	b9 81       	ldd	r27, Y+1	; 0x01
     36e:	83 81       	ldd	r24, Z+3	; 0x03
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	8c 93       	st	X, r24
     374:	a8 81       	ld	r26, Y
     376:	b9 81       	ldd	r27, Y+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	13 97       	sbiw	r26, 0x03	; 3
     37c:	8c 93       	st	X, r24
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	21 81       	ldd	r18, Z+1	; 0x01
     384:	fc 01       	movw	r30, r24
     386:	34 97       	sbiw	r30, 0x04	; 4
     388:	20 83       	st	Z, r18
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	05 97       	sbiw	r24, 0x05	; 5
     390:	9e bf       	out	0x3e, r25	; 62
     392:	8d bf       	out	0x3d, r24	; 61
     394:	78 94       	sei
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <x_delay>:
     39c:	9c 01       	movw	r18, r24
     39e:	9f b7       	in	r25, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	e0 91 b7 04 	lds	r30, 0x04B7
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e6 52       	subi	r30, 0x26	; 38
     3ae:	f3 4f       	sbci	r31, 0xF3	; 243
     3b0:	31 83       	std	Z+1, r19	; 0x01
     3b2:	20 83       	st	Z, r18
     3b4:	20 91 b8 04 	lds	r18, 0x04B8
     3b8:	80 91 eb 0c 	lds	r24, 0x0CEB
     3bc:	82 2b       	or	r24, r18
     3be:	80 93 b8 04 	sts	0x04B8, r24
     3c2:	9f bf       	out	0x3f, r25	; 63
     3c4:	b0 ce       	rjmp	.-672    	; 0x126 <x_yield>

000003c6 <__vector_21>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
     3e4:	80 91 a6 04 	lds	r24, 0x04A6
     3e8:	90 91 a7 04 	lds	r25, 0x04A7
     3ec:	a0 91 a8 04 	lds	r26, 0x04A8
     3f0:	b0 91 a9 04 	lds	r27, 0x04A9
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	a1 1d       	adc	r26, r1
     3f8:	b1 1d       	adc	r27, r1
     3fa:	80 93 a6 04 	sts	0x04A6, r24
     3fe:	90 93 a7 04 	sts	0x04A7, r25
     402:	a0 93 a8 04 	sts	0x04A8, r26
     406:	b0 93 a9 04 	sts	0x04A9, r27
     40a:	20 91 b8 04 	lds	r18, 0x04B8
     40e:	ea ed       	ldi	r30, 0xDA	; 218
     410:	fc e0       	ldi	r31, 0x0C	; 12
     412:	31 e0       	ldi	r19, 0x01	; 1
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	81 93       	st	Z+, r24
     41c:	91 93       	st	Z+, r25
     41e:	89 2b       	or	r24, r25
     420:	19 f4       	brne	.+6      	; 0x428 <__vector_21+0x62>
     422:	83 2f       	mov	r24, r19
     424:	80 95       	com	r24
     426:	28 23       	and	r18, r24
     428:	33 0f       	add	r19, r19
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	ea 3e       	cpi	r30, 0xEA	; 234
     42e:	f8 07       	cpc	r31, r24
     430:	89 f7       	brne	.-30     	; 0x414 <__vector_21+0x4e>
     432:	20 93 b8 04 	sts	0x04B8, r18
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <x_disable>:
   

---------------------------------------------------------------------------------------*/
void x_disable(byte tid)
{
	x_disable_status |= (1 << tid);
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <x_disable+0x8>
     45a:	22 0f       	add	r18, r18
     45c:	8a 95       	dec	r24
     45e:	ea f7       	brpl	.-6      	; 0x45a <x_disable+0x6>
     460:	80 91 ea 0c 	lds	r24, 0x0CEA
     464:	28 2b       	or	r18, r24
     466:	20 93 ea 0c 	sts	0x0CEA, r18
     46a:	08 95       	ret

0000046c <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
     46c:	cf 93       	push	r28
	unsigned char presence;
	
 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
     46e:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
     470:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
     472:	8f ed       	ldi	r24, 0xDF	; 223
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	bf de       	rcall	.-642    	; 0x1f6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
     478:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     47a:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
     47c:	85 e4       	ldi	r24, 0x45	; 69
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	ba de       	rcall	.-652    	; 0x1f6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     482:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
     484:	85 ee       	ldi	r24, 0xE5	; 229
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	b6 de       	rcall	.-660    	; 0x1f6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     48a:	c2 95       	swap	r28
     48c:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	8c 27       	eor	r24, r28
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
     496:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     498:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
     49a:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     49c:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
     49e:	8e e0       	ldi	r24, 0x0E	; 14
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a9 de       	rcall	.-686    	; 0x1f6 <delay_usec>
	
	return(PINE & (1 << PE4));
     4a4:	8c b1       	in	r24, 0x0c	; 12
}
     4a6:	80 71       	andi	r24, 0x10	; 16
     4a8:	08 95       	ret

000004aa <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
     4aa:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     4ac:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
     4b2:	74 9a       	sbi	0x0e, 4	; 14
	}
	delay_usec(59); //wait 60us
     4b4:	8b e3       	ldi	r24, 0x3B	; 59
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9e de       	rcall	.-708    	; 0x1f6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
     4ba:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     4bc:	6c 98       	cbi	0x0d, 4	; 13
     4be:	08 95       	ret

000004c0 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
     4ce:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4d0:	ee 24       	eor	r14, r14
     4d2:	e3 94       	inc	r14
     4d4:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
     4d6:	df df       	rcall	.-66     	; 0x496 <ow_read_bit>
     4d8:	88 23       	and	r24, r24
     4da:	39 f0       	breq	.+14     	; 0x4ea <ow_read_byte+0x2a>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4dc:	c7 01       	movw	r24, r14
     4de:	0c 2e       	mov	r0, r28
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <ow_read_byte+0x24>
     4e2:	88 0f       	add	r24, r24
     4e4:	0a 94       	dec	r0
     4e6:	ea f7       	brpl	.-6      	; 0x4e2 <ow_read_byte+0x22>
     4e8:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
     4ea:	83 e1       	ldi	r24, 0x13	; 19
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	83 de       	rcall	.-762    	; 0x1f6 <delay_usec>
     4f0:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
     4f2:	c8 30       	cpi	r28, 0x08	; 8
     4f4:	d1 05       	cpc	r29, r1
     4f6:	79 f7       	brne	.-34     	; 0x4d6 <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
     4f8:	81 2f       	mov	r24, r17
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
     512:	08 2f       	mov	r16, r24
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	c8 01       	movw	r24, r16
     518:	0c 2e       	mov	r0, r28
     51a:	02 c0       	rjmp	.+4      	; 0x520 <ow_write_byte+0x1a>
     51c:	95 95       	asr	r25
     51e:	87 95       	ror	r24
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
     524:	81 70       	andi	r24, 0x01	; 1
     526:	c1 df       	rcall	.-126    	; 0x4aa <ow_write_bit>
     528:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
     52a:	c8 30       	cpi	r28, 0x08	; 8
     52c:	d1 05       	cpc	r29, r1
     52e:	99 f7       	brne	.-26     	; 0x516 <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	delay_usec(119); //wait 120us
     530:	87 e7       	ldi	r24, 0x77	; 119
     532:	90 e0       	ldi	r25, 0x00	; 0
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
	for (i = 0; i < 8; i++) {
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	delay_usec(119); //wait 120us
     53c:	5c ce       	rjmp	.-840    	; 0x1f6 <delay_usec>

0000053e <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	2a 97       	sbiw	r28, 0x0a	; 10
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	char get[10];
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	char shift_val = 4;
	ow_reset();
     55a:	88 df       	rcall	.-240    	; 0x46c <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
     55c:	8c ec       	ldi	r24, 0xCC	; 204
     55e:	d3 df       	rcall	.-90     	; 0x506 <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
     560:	84 e4       	ldi	r24, 0x44	; 68
     562:	d1 df       	rcall	.-94     	; 0x506 <ow_write_byte>
	delay_usec(119); //wait 120us
     564:	87 e7       	ldi	r24, 0x77	; 119
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	46 de       	rcall	.-884    	; 0x1f6 <delay_usec>
	ow_reset();
     56a:	80 df       	rcall	.-256    	; 0x46c <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
     56c:	8c ec       	ldi	r24, 0xCC	; 204
     56e:	cb df       	rcall	.-106    	; 0x506 <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
     570:	8e eb       	ldi	r24, 0xBE	; 190
     572:	c9 df       	rcall	.-110    	; 0x506 <ow_write_byte>
     574:	8e 01       	movw	r16, r28
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	7e 01       	movw	r14, r28
     57c:	4a e0       	ldi	r20, 0x0A	; 10
     57e:	e4 0e       	add	r14, r20
     580:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
     582:	9e df       	rcall	.-196    	; 0x4c0 <ow_read_byte>
     584:	f8 01       	movw	r30, r16
     586:	81 93       	st	Z+, r24
     588:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
     58a:	ee 15       	cp	r30, r14
     58c:	ff 05       	cpc	r31, r15
     58e:	c9 f7       	brne	.-14     	; 0x582 <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
     590:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
     592:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb>>shift_val) | (temp_msb<<(8-shift_val));} // shift to get whole degree
     594:	91 38       	cpi	r25, 0x81	; 129
     596:	38 f4       	brcc	.+14     	; 0x5a6 <ow_read_temperature+0x68>
     598:	f0 e1       	ldi	r31, 0x10	; 16
     59a:	9f 9f       	mul	r25, r31
     59c:	90 01       	movw	r18, r0
     59e:	11 24       	eor	r1, r1
     5a0:	82 95       	swap	r24
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	82 2b       	or	r24, r18
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     5a6:	97 ff       	sbrs	r25, 7
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <ow_read_temperature+0x76>
     5aa:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb>>shift_val) | ((~temp_msb)<<(8-shift_val));}// shift to get whole degree
     5ac:	82 95       	swap	r24
     5ae:	8f 70       	andi	r24, 0x0F	; 15
     5b0:	80 6f       	ori	r24, 0xF0	; 240
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
     5b2:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	return temp_c;
}
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	2a 96       	adiw	r28, 0x0a	; 10
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <io_controller>:
 * Reverse the effects of shut down.
 */
void start_up(void) {
	PORTB |= ~(0x1 << fans);
	x_enable(0);
	x_enable(1);
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	c0 55       	subi	r28, 0x50	; 80
     5da:	d1 09       	sbc	r29, r1
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	26 e0       	ldi	r18, 0x06	; 6
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	5b e4       	ldi	r21, 0x4B	; 75
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	64 d3       	rcall	.+1736   	; 0xcc0 <Serial_open>
     5f8:	31 e4       	ldi	r19, 0x41	; 65
     5fa:	23 2e       	mov	r2, r19
     5fc:	31 2c       	mov	r3, r1
     5fe:	2c 0e       	add	r2, r28
     600:	3d 1e       	adc	r3, r29
     602:	42 e0       	ldi	r20, 0x02	; 2
     604:	24 0e       	add	r2, r20
     606:	31 1c       	adc	r3, r1
     608:	49 e4       	ldi	r20, 0x49	; 73
     60a:	44 2e       	mov	r4, r20
     60c:	51 2c       	mov	r5, r1
     60e:	4c 0e       	add	r4, r28
     610:	5d 1e       	adc	r5, r29
     612:	56 e0       	ldi	r21, 0x06	; 6
     614:	45 0e       	add	r4, r21
     616:	51 1c       	adc	r5, r1
     618:	56 e7       	ldi	r21, 0x76	; 118
     61a:	65 2e       	mov	r6, r21
     61c:	53 e0       	ldi	r21, 0x03	; 3
     61e:	75 2e       	mov	r7, r21
     620:	6c ee       	ldi	r22, 0xEC	; 236
     622:	a6 2e       	mov	r10, r22
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	b6 2e       	mov	r11, r22
     628:	74 eb       	ldi	r23, 0xB4	; 180
     62a:	87 2e       	mov	r8, r23
     62c:	73 e0       	ldi	r23, 0x03	; 3
     62e:	97 2e       	mov	r9, r23
     630:	eb e5       	ldi	r30, 0x5B	; 91
     632:	ee 2e       	mov	r14, r30
     634:	e3 e0       	ldi	r30, 0x03	; 3
     636:	fe 2e       	mov	r15, r30
     638:	8e 01       	movw	r16, r28
     63a:	0f 5f       	subi	r16, 0xFF	; 255
     63c:	1f 4f       	sbci	r17, 0xFF	; 255
     63e:	f9 e2       	ldi	r31, 0x29	; 41
     640:	cf 2e       	mov	r12, r31
     642:	f3 e0       	ldi	r31, 0x03	; 3
     644:	df 2e       	mov	r13, r31
     646:	48 e0       	ldi	r20, 0x08	; 8
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	be 01       	movw	r22, r28
     64c:	6f 5b       	subi	r22, 0xBF	; 191
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	3e d4       	rcall	.+2172   	; 0xed2 <Serial_read_string>
     656:	89 2b       	or	r24, r25
     658:	09 f4       	brne	.+2      	; 0x65c <io_controller+0x8c>
     65a:	94 c1       	rjmp	.+808    	; 0x984 <io_controller+0x3b4>
     65c:	22 96       	adiw	r28, 0x02	; 2
     65e:	8f ad       	ldd	r24, Y+63	; 0x3f
     660:	22 97       	sbiw	r28, 0x02	; 2
     662:	60 96       	adiw	r28, 0x10	; 16
     664:	8f af       	std	Y+63, r24	; 0x3f
     666:	60 97       	sbiw	r28, 0x10	; 16
     668:	23 96       	adiw	r28, 0x03	; 3
     66a:	8f ad       	ldd	r24, Y+63	; 0x3f
     66c:	23 97       	sbiw	r28, 0x03	; 3
     66e:	61 96       	adiw	r28, 0x11	; 17
     670:	8f af       	std	Y+63, r24	; 0x3f
     672:	61 97       	sbiw	r28, 0x11	; 17
     674:	d1 01       	movw	r26, r2
     676:	fe 01       	movw	r30, r28
     678:	e7 5b       	subi	r30, 0xB7	; 183
     67a:	ff 4f       	sbci	r31, 0xFF	; 255
     67c:	8d 91       	ld	r24, X+
     67e:	88 23       	and	r24, r24
     680:	11 f0       	breq	.+4      	; 0x686 <io_controller+0xb6>
     682:	80 83       	st	Z, r24
     684:	01 c0       	rjmp	.+2      	; 0x688 <io_controller+0xb8>
     686:	10 82       	st	Z, r1
     688:	31 96       	adiw	r30, 0x01	; 1
     68a:	e4 15       	cp	r30, r4
     68c:	f5 05       	cpc	r31, r5
     68e:	b1 f7       	brne	.-20     	; 0x67c <io_controller+0xac>
     690:	69 e3       	ldi	r22, 0x39	; 57
     692:	72 e0       	ldi	r23, 0x02	; 2
     694:	ce 01       	movw	r24, r28
     696:	81 5b       	subi	r24, 0xB1	; 177
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	6e d6       	rcall	.+3292   	; 0x1378 <strcmp>
     69c:	89 2b       	or	r24, r25
     69e:	59 f4       	brne	.+22     	; 0x6b6 <io_controller+0xe6>
     6a0:	47 e1       	ldi	r20, 0x17	; 23
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	6c e3       	ldi	r22, 0x3C	; 60
     6a6:	72 e0       	ldi	r23, 0x02	; 2
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	5e d4       	rcall	.+2236   	; 0xf6a <Serial_write_string>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 aa 04 	sts	0x04AA, r24
     6b4:	6e c1       	rjmp	.+732    	; 0x992 <io_controller+0x3c2>
     6b6:	64 e5       	ldi	r22, 0x54	; 84
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	ce 01       	movw	r24, r28
     6bc:	81 5b       	subi	r24, 0xB1	; 177
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
     6c0:	5b d6       	rcall	.+3254   	; 0x1378 <strcmp>
     6c2:	89 2b       	or	r24, r25
     6c4:	a9 f4       	brne	.+42     	; 0x6f0 <io_controller+0x120>
     6c6:	90 91 aa 04 	lds	r25, 0x04AA
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	91 11       	cpse	r25, r1
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	80 93 aa 04 	sts	0x04AA, r24
     6d4:	80 91 aa 04 	lds	r24, 0x04AA
     6d8:	88 23       	and	r24, r24
     6da:	29 f0       	breq	.+10     	; 0x6e6 <io_controller+0x116>
     6dc:	47 e1       	ldi	r20, 0x17	; 23
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	6c e3       	ldi	r22, 0x3C	; 60
     6e2:	72 e0       	ldi	r23, 0x02	; 2
     6e4:	53 c1       	rjmp	.+678    	; 0x98c <io_controller+0x3bc>
     6e6:	49 e1       	ldi	r20, 0x19	; 25
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	67 e5       	ldi	r22, 0x57	; 87
     6ec:	72 e0       	ldi	r23, 0x02	; 2
     6ee:	4e c1       	rjmp	.+668    	; 0x98c <io_controller+0x3bc>
     6f0:	61 e7       	ldi	r22, 0x71	; 113
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	ce 01       	movw	r24, r28
     6f6:	81 5b       	subi	r24, 0xB1	; 177
     6f8:	9f 4f       	sbci	r25, 0xFF	; 255
     6fa:	3e d6       	rcall	.+3196   	; 0x1378 <strcmp>
     6fc:	89 2b       	or	r24, r25
     6fe:	51 f4       	brne	.+20     	; 0x714 <io_controller+0x144>
     700:	49 e1       	ldi	r20, 0x19	; 25
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	67 e5       	ldi	r22, 0x57	; 87
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	2e d4       	rcall	.+2140   	; 0xf6a <Serial_write_string>
     70e:	10 92 aa 04 	sts	0x04AA, r1
     712:	3f c1       	rjmp	.+638    	; 0x992 <io_controller+0x3c2>
     714:	80 91 aa 04 	lds	r24, 0x04AA
     718:	88 23       	and	r24, r24
     71a:	09 f4       	brne	.+2      	; 0x71e <io_controller+0x14e>
     71c:	a8 c0       	rjmp	.+336    	; 0x86e <io_controller+0x29e>
     71e:	64 e7       	ldi	r22, 0x74	; 116
     720:	72 e0       	ldi	r23, 0x02	; 2
     722:	ce 01       	movw	r24, r28
     724:	81 5b       	subi	r24, 0xB1	; 177
     726:	9f 4f       	sbci	r25, 0xFF	; 255
     728:	27 d6       	rcall	.+3150   	; 0x1378 <strcmp>
     72a:	89 2b       	or	r24, r25
     72c:	f9 f4       	brne	.+62     	; 0x76c <io_controller+0x19c>
     72e:	60 91 ad 04 	lds	r22, 0x04AD
     732:	70 91 ae 04 	lds	r23, 0x04AE
     736:	80 91 06 02 	lds	r24, 0x0206
     73a:	81 11       	cpse	r24, r1
     73c:	0f c0       	rjmp	.+30     	; 0x75c <io_controller+0x18c>
     73e:	77 27       	eor	r23, r23
     740:	cb 01       	movw	r24, r22
     742:	23 e0       	ldi	r18, 0x03	; 3
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	2a 95       	dec	r18
     74a:	e1 f7       	brne	.-8      	; 0x744 <io_controller+0x174>
     74c:	68 0f       	add	r22, r24
     74e:	79 1f       	adc	r23, r25
     750:	cb 01       	movw	r24, r22
     752:	80 56       	subi	r24, 0x60	; 96
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	65 e0       	ldi	r22, 0x05	; 5
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	ca d5       	rcall	.+2964   	; 0x12f0 <__divmodhi4>
     75c:	1f 92       	push	r1
     75e:	6f 93       	push	r22
     760:	80 91 01 02 	lds	r24, 0x0201
     764:	8f 93       	push	r24
     766:	80 91 00 02 	lds	r24, 0x0200
     76a:	19 c0       	rjmp	.+50     	; 0x79e <io_controller+0x1ce>
     76c:	67 e7       	ldi	r22, 0x77	; 119
     76e:	72 e0       	ldi	r23, 0x02	; 2
     770:	ce 01       	movw	r24, r28
     772:	81 5b       	subi	r24, 0xB1	; 177
     774:	9f 4f       	sbci	r25, 0xFF	; 255
     776:	00 d6       	rcall	.+3072   	; 0x1378 <strcmp>
     778:	89 2b       	or	r24, r25
     77a:	99 f4       	brne	.+38     	; 0x7a2 <io_controller+0x1d2>
     77c:	ce 01       	movw	r24, r28
     77e:	87 5b       	subi	r24, 0xB7	; 183
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	dd d5       	rcall	.+3002   	; 0x133e <atoi>
     784:	90 93 05 02 	sts	0x0205, r25
     788:	80 93 04 02 	sts	0x0204, r24
     78c:	80 91 04 02 	lds	r24, 0x0204
     790:	90 91 05 02 	lds	r25, 0x0205
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	8a e7       	ldi	r24, 0x7A	; 122
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	aa c0       	rjmp	.+340    	; 0x8f6 <io_controller+0x326>
     7a2:	67 ea       	ldi	r22, 0xA7	; 167
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	ce 01       	movw	r24, r28
     7a8:	81 5b       	subi	r24, 0xB1	; 177
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	e5 d5       	rcall	.+3018   	; 0x1378 <strcmp>
     7ae:	89 2b       	or	r24, r25
     7b0:	71 f5       	brne	.+92     	; 0x80e <io_controller+0x23e>
     7b2:	ce 01       	movw	r24, r28
     7b4:	87 5b       	subi	r24, 0xB7	; 183
     7b6:	9f 4f       	sbci	r25, 0xFF	; 255
     7b8:	c2 d5       	rcall	.+2948   	; 0x133e <atoi>
     7ba:	2c e3       	ldi	r18, 0x3C	; 60
     7bc:	ac 01       	movw	r20, r24
     7be:	24 9f       	mul	r18, r20
     7c0:	c0 01       	movw	r24, r0
     7c2:	25 9f       	mul	r18, r21
     7c4:	90 0d       	add	r25, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	90 93 03 02 	sts	0x0203, r25
     7cc:	80 93 02 02 	sts	0x0202, r24
     7d0:	80 91 02 02 	lds	r24, 0x0202
     7d4:	90 91 03 02 	lds	r25, 0x0203
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	8a ea       	ldi	r24, 0xAA	; 170
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	1f 93       	push	r17
     7e6:	0f 93       	push	r16
     7e8:	d8 d5       	rcall	.+2992   	; 0x139a <sprintf>
     7ea:	f8 01       	movw	r30, r16
     7ec:	01 90       	ld	r0, Z+
     7ee:	00 20       	and	r0, r0
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <io_controller+0x21c>
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	af 01       	movw	r20, r30
     7f6:	40 1b       	sub	r20, r16
     7f8:	51 0b       	sbc	r21, r17
     7fa:	b8 01       	movw	r22, r16
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	b4 d3       	rcall	.+1896   	; 0xf6a <Serial_write_string>
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	61 e3       	ldi	r22, 0x31	; 49
     806:	75 e0       	ldi	r23, 0x05	; 5
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	00 dd       	rcall	.-1536   	; 0x20c <x_new>
     80c:	83 c0       	rjmp	.+262    	; 0x914 <io_controller+0x344>
     80e:	66 ec       	ldi	r22, 0xC6	; 198
     810:	72 e0       	ldi	r23, 0x02	; 2
     812:	ce 01       	movw	r24, r28
     814:	81 5b       	subi	r24, 0xB1	; 177
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	af d5       	rcall	.+2910   	; 0x1378 <strcmp>
     81a:	89 2b       	or	r24, r25
     81c:	49 f4       	brne	.+18     	; 0x830 <io_controller+0x260>
     81e:	95 b1       	in	r25, 0x05	; 5
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	89 27       	eor	r24, r25
     824:	85 b9       	out	0x05, r24	; 5
     826:	41 e1       	ldi	r20, 0x11	; 17
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	69 ec       	ldi	r22, 0xC9	; 201
     82c:	72 e0       	ldi	r23, 0x02	; 2
     82e:	ae c0       	rjmp	.+348    	; 0x98c <io_controller+0x3bc>
     830:	6b ed       	ldi	r22, 0xDB	; 219
     832:	72 e0       	ldi	r23, 0x02	; 2
     834:	ce 01       	movw	r24, r28
     836:	81 5b       	subi	r24, 0xB1	; 177
     838:	9f 4f       	sbci	r25, 0xFF	; 255
     83a:	9e d5       	rcall	.+2876   	; 0x1378 <strcmp>
     83c:	89 2b       	or	r24, r25
     83e:	91 f4       	brne	.+36     	; 0x864 <io_controller+0x294>
     840:	95 b1       	in	r25, 0x05	; 5
     842:	80 e1       	ldi	r24, 0x10	; 16
     844:	89 27       	eor	r24, r25
     846:	85 b9       	out	0x05, r24	; 5
     848:	4f e0       	ldi	r20, 0x0F	; 15
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	6e ed       	ldi	r22, 0xDE	; 222
     84e:	72 e0       	ldi	r23, 0x02	; 2
     850:	9d c0       	rjmp	.+314    	; 0x98c <io_controller+0x3bc>
     852:	63 e7       	ldi	r22, 0x73	; 115
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	ce 01       	movw	r24, r28
     858:	81 5b       	subi	r24, 0xB1	; 177
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	8d d5       	rcall	.+2842   	; 0x1378 <strcmp>
     85e:	89 2b       	or	r24, r25
     860:	09 f4       	brne	.+2      	; 0x864 <io_controller+0x294>
     862:	5f c0       	rjmp	.+190    	; 0x922 <io_controller+0x352>
     864:	46 e1       	ldi	r20, 0x16	; 22
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	6e ee       	ldi	r22, 0xEE	; 238
     86a:	72 e0       	ldi	r23, 0x02	; 2
     86c:	8f c0       	rjmp	.+286    	; 0x98c <io_controller+0x3bc>
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	73 e0       	ldi	r23, 0x03	; 3
     872:	ce 01       	movw	r24, r28
     874:	81 5b       	subi	r24, 0xB1	; 177
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	7f d5       	rcall	.+2814   	; 0x1378 <strcmp>
     87a:	89 2b       	or	r24, r25
     87c:	19 f5       	brne	.+70     	; 0x8c4 <io_controller+0x2f4>
     87e:	ce 01       	movw	r24, r28
     880:	87 5b       	subi	r24, 0xB7	; 183
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	5c d5       	rcall	.+2744   	; 0x133e <atoi>
     886:	90 93 ac 04 	sts	0x04AC, r25
     88a:	80 93 ab 04 	sts	0x04AB, r24
     88e:	80 91 ab 04 	lds	r24, 0x04AB
     892:	90 91 ac 04 	lds	r25, 0x04AC
     896:	97 fd       	sbrc	r25, 7
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <io_controller+0x2d8>
     89a:	80 91 ab 04 	lds	r24, 0x04AB
     89e:	90 91 ac 04 	lds	r25, 0x04AC
     8a2:	8e 37       	cpi	r24, 0x7E	; 126
     8a4:	91 05       	cpc	r25, r1
     8a6:	2c f0       	brlt	.+10     	; 0x8b2 <io_controller+0x2e2>
     8a8:	40 e2       	ldi	r20, 0x20	; 32
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	68 e0       	ldi	r22, 0x08	; 8
     8ae:	73 e0       	ldi	r23, 0x03	; 3
     8b0:	6d c0       	rjmp	.+218    	; 0x98c <io_controller+0x3bc>
     8b2:	80 91 ab 04 	lds	r24, 0x04AB
     8b6:	90 91 ac 04 	lds	r25, 0x04AC
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	df 92       	push	r13
     8c0:	cf 92       	push	r12
     8c2:	19 c0       	rjmp	.+50     	; 0x8f6 <io_controller+0x326>
     8c4:	68 e5       	ldi	r22, 0x58	; 88
     8c6:	73 e0       	ldi	r23, 0x03	; 3
     8c8:	ce 01       	movw	r24, r28
     8ca:	81 5b       	subi	r24, 0xB1	; 177
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	54 d5       	rcall	.+2728   	; 0x1378 <strcmp>
     8d0:	89 2b       	or	r24, r25
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <io_controller+0x306>
     8d4:	be cf       	rjmp	.-132    	; 0x852 <io_controller+0x282>
     8d6:	ce 01       	movw	r24, r28
     8d8:	87 5b       	subi	r24, 0xB7	; 183
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	30 d5       	rcall	.+2656   	; 0x133e <atoi>
     8de:	90 93 08 02 	sts	0x0208, r25
     8e2:	80 93 07 02 	sts	0x0207, r24
     8e6:	80 91 07 02 	lds	r24, 0x0207
     8ea:	90 91 08 02 	lds	r25, 0x0208
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	ff 92       	push	r15
     8f4:	ef 92       	push	r14
     8f6:	1f 93       	push	r17
     8f8:	0f 93       	push	r16
     8fa:	4f d5       	rcall	.+2718   	; 0x139a <sprintf>
     8fc:	f8 01       	movw	r30, r16
     8fe:	01 90       	ld	r0, Z+
     900:	00 20       	and	r0, r0
     902:	e9 f7       	brne	.-6      	; 0x8fe <io_controller+0x32e>
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	af 01       	movw	r20, r30
     908:	40 1b       	sub	r20, r16
     90a:	51 0b       	sbc	r21, r17
     90c:	b8 01       	movw	r22, r16
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	2b d3       	rcall	.+1622   	; 0xf6a <Serial_write_string>
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	38 c0       	rjmp	.+112    	; 0x992 <io_controller+0x3c2>
     922:	2a 96       	adiw	r28, 0x0a	; 10
     924:	8f ad       	ldd	r24, Y+63	; 0x3f
     926:	2a 97       	sbiw	r28, 0x0a	; 10
     928:	86 34       	cpi	r24, 0x46	; 70
     92a:	81 f0       	breq	.+32     	; 0x94c <io_controller+0x37c>
     92c:	88 35       	cpi	r24, 0x58	; 88
     92e:	c9 f0       	breq	.+50     	; 0x962 <io_controller+0x392>
     930:	83 34       	cpi	r24, 0x43	; 67
     932:	19 f5       	brne	.+70     	; 0x97a <io_controller+0x3aa>
     934:	90 92 01 02 	sts	0x0201, r9
     938:	80 92 00 02 	sts	0x0200, r8
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 06 02 	sts	0x0206, r24
     942:	47 e1       	ldi	r20, 0x17	; 23
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	64 ed       	ldi	r22, 0xD4	; 212
     948:	73 e0       	ldi	r23, 0x03	; 3
     94a:	20 c0       	rjmp	.+64     	; 0x98c <io_controller+0x3bc>
     94c:	70 92 01 02 	sts	0x0201, r7
     950:	60 92 00 02 	sts	0x0200, r6
     954:	10 92 06 02 	sts	0x0206, r1
     958:	4a e1       	ldi	r20, 0x1A	; 26
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	69 e9       	ldi	r22, 0x99	; 153
     95e:	73 e0       	ldi	r23, 0x03	; 3
     960:	15 c0       	rjmp	.+42     	; 0x98c <io_controller+0x3bc>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 06 02 	sts	0x0206, r24
     968:	b0 92 01 02 	sts	0x0201, r11
     96c:	a0 92 00 02 	sts	0x0200, r10
     970:	43 e2       	ldi	r20, 0x23	; 35
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	74 e0       	ldi	r23, 0x04	; 4
     978:	09 c0       	rjmp	.+18     	; 0x98c <io_controller+0x3bc>
     97a:	45 e1       	ldi	r20, 0x15	; 21
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	66 e2       	ldi	r22, 0x26	; 38
     980:	74 e0       	ldi	r23, 0x04	; 4
     982:	04 c0       	rjmp	.+8      	; 0x98c <io_controller+0x3bc>
     984:	47 e1       	ldi	r20, 0x17	; 23
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	6c e3       	ldi	r22, 0x3C	; 60
     98a:	74 e0       	ldi	r23, 0x04	; 4
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	ec d2       	rcall	.+1496   	; 0xf6a <Serial_write_string>
     992:	c9 db       	rcall	.-2158   	; 0x126 <x_yield>
     994:	58 ce       	rjmp	.-848    	; 0x646 <io_controller+0x76>

00000996 <sensor_controller>:
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	c1 54       	subi	r28, 0x41	; 65
     9a0:	d1 09       	sbc	r29, r1
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	5f dd       	rcall	.-1346   	; 0x46c <ow_reset>
     9ae:	81 11       	cpse	r24, r1
     9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <sensor_controller+0x2e>
     9b2:	5c dd       	rcall	.-1352   	; 0x46c <ow_reset>
     9b4:	22 96       	adiw	r28, 0x02	; 2
     9b6:	8f af       	std	Y+63, r24	; 0x3f
     9b8:	22 97       	sbiw	r28, 0x02	; 2
     9ba:	b5 db       	rcall	.-2198   	; 0x126 <x_yield>
     9bc:	22 96       	adiw	r28, 0x02	; 2
     9be:	8f ad       	ldd	r24, Y+63	; 0x3f
     9c0:	22 97       	sbiw	r28, 0x02	; 2
     9c2:	f5 cf       	rjmp	.-22     	; 0x9ae <sensor_controller+0x18>
     9c4:	8e 01       	movw	r16, r28
     9c6:	0f 5f       	subi	r16, 0xFF	; 255
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	35 e0       	ldi	r19, 0x05	; 5
     9cc:	e3 2e       	mov	r14, r19
     9ce:	f1 2c       	mov	r15, r1
     9d0:	b6 dd       	rcall	.-1172   	; 0x53e <ow_read_temperature>
     9d2:	90 93 ae 04 	sts	0x04AE, r25
     9d6:	80 93 ad 04 	sts	0x04AD, r24
     9da:	80 91 aa 04 	lds	r24, 0x04AA
     9de:	81 11       	cpse	r24, r1
     9e0:	33 c0       	rjmp	.+102    	; 0xa48 <sensor_controller+0xb2>
     9e2:	80 91 ad 04 	lds	r24, 0x04AD
     9e6:	90 91 ae 04 	lds	r25, 0x04AE
     9ea:	20 91 06 02 	lds	r18, 0x0206
     9ee:	21 11       	cpse	r18, r1
     9f0:	0e c0       	rjmp	.+28     	; 0xa0e <sensor_controller+0x78>
     9f2:	99 27       	eor	r25, r25
     9f4:	bc 01       	movw	r22, r24
     9f6:	23 e0       	ldi	r18, 0x03	; 3
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	2a 95       	dec	r18
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <sensor_controller+0x62>
     a00:	86 0f       	add	r24, r22
     a02:	97 1f       	adc	r25, r23
     a04:	80 56       	subi	r24, 0x60	; 96
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	b7 01       	movw	r22, r14
     a0a:	72 d4       	rcall	.+2276   	; 0x12f0 <__divmodhi4>
     a0c:	86 2f       	mov	r24, r22
     a0e:	1f 92       	push	r1
     a10:	8f 93       	push	r24
     a12:	80 91 01 02 	lds	r24, 0x0201
     a16:	8f 93       	push	r24
     a18:	80 91 00 02 	lds	r24, 0x0200
     a1c:	8f 93       	push	r24
     a1e:	1f 93       	push	r17
     a20:	0f 93       	push	r16
     a22:	bb d4       	rcall	.+2422   	; 0x139a <sprintf>
     a24:	f8 01       	movw	r30, r16
     a26:	01 90       	ld	r0, Z+
     a28:	00 20       	and	r0, r0
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <sensor_controller+0x90>
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	af 01       	movw	r20, r30
     a30:	40 1b       	sub	r20, r16
     a32:	51 0b       	sbc	r21, r17
     a34:	b8 01       	movw	r22, r16
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	97 d2       	rcall	.+1326   	; 0xf6a <Serial_write_string>
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	80 91 07 02 	lds	r24, 0x0207
     a4c:	90 91 08 02 	lds	r25, 0x0208
     a50:	a5 dc       	rcall	.-1718   	; 0x39c <x_delay>
     a52:	be cf       	rjmp	.-132    	; 0x9d0 <sensor_controller+0x3a>

00000a54 <shut_down>:
     a54:	85 b1       	in	r24, 0x05	; 5
     a56:	80 63       	ori	r24, 0x30	; 48
     a58:	85 b9       	out	0x05, r24	; 5
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	fb dc       	rcall	.-1546   	; 0x454 <x_disable>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	f9 cc       	rjmp	.-1550   	; 0x454 <x_disable>

00000a62 <timeout_controller>:
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	d0 e0       	ldi	r29, 0x00	; 0
     a66:	80 91 02 02 	lds	r24, 0x0202
     a6a:	90 91 03 02 	lds	r25, 0x0203
     a6e:	c8 17       	cp	r28, r24
     a70:	d9 07       	cpc	r29, r25
     a72:	2c f4       	brge	.+10     	; 0xa7e <timeout_controller+0x1c>
     a74:	88 ee       	ldi	r24, 0xE8	; 232
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	91 dc       	rcall	.-1758   	; 0x39c <x_delay>
     a7a:	21 96       	adiw	r28, 0x01	; 1
     a7c:	f4 cf       	rjmp	.-24     	; 0xa66 <timeout_controller+0x4>
     a7e:	20 91 ad 04 	lds	r18, 0x04AD
     a82:	30 91 ae 04 	lds	r19, 0x04AE
     a86:	80 91 ab 04 	lds	r24, 0x04AB
     a8a:	90 91 ac 04 	lds	r25, 0x04AC
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	34 f7       	brge	.-52     	; 0xa62 <timeout_controller>
     a96:	42 e2       	ldi	r20, 0x22	; 34
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	64 e5       	ldi	r22, 0x54	; 84
     a9c:	74 e0       	ldi	r23, 0x04	; 4
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	63 d2       	rcall	.+1222   	; 0xf6a <Serial_write_string>
     aa4:	d7 df       	rcall	.-82     	; 0xa54 <shut_down>
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	d5 dc       	rcall	.-1622   	; 0x454 <x_disable>
     aaa:	db cf       	rjmp	.-74     	; 0xa62 <timeout_controller>

00000aac <box_controller>:
     aac:	84 b1       	in	r24, 0x04	; 4
     aae:	80 63       	ori	r24, 0x30	; 48
     ab0:	84 b9       	out	0x04, r24	; 4
     ab2:	2c 98       	cbi	0x05, 4	; 5
     ab4:	20 91 ad 04 	lds	r18, 0x04AD
     ab8:	30 91 ae 04 	lds	r19, 0x04AE
     abc:	80 91 04 02 	lds	r24, 0x0204
     ac0:	90 91 05 02 	lds	r25, 0x0205
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	44 f0       	brlt	.+16     	; 0xada <box_controller+0x2e>
     aca:	4e e2       	ldi	r20, 0x2E	; 46
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	67 e7       	ldi	r22, 0x77	; 119
     ad0:	74 e0       	ldi	r23, 0x04	; 4
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	49 d2       	rcall	.+1170   	; 0xf6a <Serial_write_string>
     ad8:	bd df       	rcall	.-134    	; 0xa54 <shut_down>
     ada:	80 91 aa 04 	lds	r24, 0x04AA
     ade:	81 11       	cpse	r24, r1
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <box_controller+0x52>
     ae2:	20 91 ad 04 	lds	r18, 0x04AD
     ae6:	30 91 ae 04 	lds	r19, 0x04AE
     aea:	80 91 ab 04 	lds	r24, 0x04AB
     aee:	90 91 ac 04 	lds	r25, 0x04AC
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	14 f4       	brge	.+4      	; 0xafc <box_controller+0x50>
     af8:	2d 98       	cbi	0x05, 5	; 5
     afa:	01 c0       	rjmp	.+2      	; 0xafe <box_controller+0x52>
     afc:	2d 9a       	sbi	0x05, 5	; 5
     afe:	80 91 07 02 	lds	r24, 0x0207
     b02:	90 91 08 02 	lds	r25, 0x0208
     b06:	4a dc       	rcall	.-1900   	; 0x39c <x_delay>
     b08:	d5 cf       	rjmp	.-86     	; 0xab4 <box_controller+0x8>

00000b0a <main>:

/*
 * Initialize the operating threads of the system.
 */
int main(void) {
	x_init();
     b0a:	d1 db       	rcall	.-2142   	; 0x2ae <x_init>
	//Launch main threads
	x_new(2, io_controller, 1);
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	68 ee       	ldi	r22, 0xE8	; 232
     b10:	72 e0       	ldi	r23, 0x02	; 2
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	7b db       	rcall	.-2314   	; 0x20c <x_new>
	x_new(1, sensor_controller, 1);
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	6b ec       	ldi	r22, 0xCB	; 203
     b1a:	74 e0       	ldi	r23, 0x04	; 4
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	76 db       	rcall	.-2324   	; 0x20c <x_new>
	x_new(3, timeout_controller, 1);
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	61 e3       	ldi	r22, 0x31	; 49
     b24:	75 e0       	ldi	r23, 0x05	; 5
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	71 db       	rcall	.-2334   	; 0x20c <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic)
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	66 e5       	ldi	r22, 0x56	; 86
     b2e:	75 e0       	ldi	r23, 0x05	; 5
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	6c db       	rcall	.-2344   	; 0x20c <x_new>
}
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	08 95       	ret

00000b3a <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

/*
 * Puts one byte of data into the specified queue.
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
 */
byte Q_putc(byte qid, char data)
     b3e:	98 e0       	ldi	r25, 0x08	; 8
     b40:	89 9f       	mul	r24, r25
     b42:	f0 01       	movw	r30, r0
     b44:	11 24       	eor	r1, r1
     b46:	df 01       	movw	r26, r30
     b48:	a4 51       	subi	r26, 0x14	; 20
     b4a:	b3 4f       	sbci	r27, 0xF3	; 243
     b4c:	13 96       	adiw	r26, 0x03	; 3
     b4e:	8c 91       	ld	r24, X
     b50:	13 97       	sbiw	r26, 0x03	; 3
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	a1 f1       	breq	.+104    	; 0xbbe <Q_putc+0x84>
{
	QCB *qcb = &queues[qid];
     b56:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b58:	f8 94       	cli
	if (qcb->flags != 1) //Checks if queue is full
	{
     b5a:	8c 91       	ld	r24, X
     b5c:	16 96       	adiw	r26, 0x06	; 6
     b5e:	cd 91       	ld	r28, X+
     b60:	dc 91       	ld	r29, X
     b62:	17 97       	sbiw	r26, 0x07	; 7
     b64:	c8 0f       	add	r28, r24
     b66:	d1 1d       	adc	r29, r1
     b68:	68 83       	st	Y, r22
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b6a:	14 96       	adiw	r26, 0x04	; 4
     b6c:	2d 91       	ld	r18, X+
     b6e:	3c 91       	ld	r19, X
     b70:	15 97       	sbiw	r26, 0x05	; 5
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	15 96       	adiw	r26, 0x05	; 5
     b78:	3c 93       	st	X, r19
     b7a:	2e 93       	st	-X, r18
     b7c:	14 97       	sbiw	r26, 0x04	; 4
		{
     b7e:	13 96       	adiw	r26, 0x03	; 3
     b80:	8c 91       	ld	r24, X
     b82:	13 97       	sbiw	r26, 0x03	; 3
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	11 f4       	brne	.+4      	; 0xb8c <Q_putc+0x52>
			*(qcb->pQ + qcb->in) = data; //Grabs byte
			qcb->available += 1;
     b88:	13 96       	adiw	r26, 0x03	; 3
     b8a:	1c 92       	st	X, r1
			if (qcb->flags == 2) //Checks if queue was empty, and if so, turns off flag
			{
				qcb->flags = 0;
     b8c:	e4 51       	subi	r30, 0x14	; 20
     b8e:	f3 4f       	sbci	r31, 0xF3	; 243
     b90:	90 81       	ld	r25, Z
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	49 2f       	mov	r20, r25
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	42 23       	and	r20, r18
     ba2:	53 23       	and	r21, r19
     ba4:	21 81       	ldd	r18, Z+1	; 0x01
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	9f 5f       	subi	r25, 0xFF	; 255
			}

     baa:	89 23       	and	r24, r25
     bac:	80 83       	st	Z, r24
		{
			*(qcb->pQ + qcb->in) = data; //Grabs byte
			qcb->available += 1;
			if (qcb->flags == 2) //Checks if queue was empty, and if so, turns off flag
			{
				qcb->flags = 0;
     bae:	42 17       	cp	r20, r18
     bb0:	53 07       	cpc	r21, r19
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <Q_putc+0x7e>

			if (((qcb->in + 1) & qcb->smask) != qcb->out) //Checks if queue has wrapped around
			{
				qcb->in = (qcb->in + 1) & qcb->smask; //If not, increments the value for next slot
			}
			else
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bb8:	7f bf       	out	0x3f, r23	; 63
			{
				qcb->in = (qcb->in + 1) & qcb->smask; //If so,
				qcb->flags = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <Q_putc+0x86>
			}
		}
		return 1;
	}
     bbe:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <Q_getc>:
		return 0;
	}
}
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	9b 01       	movw	r18, r22

/*
     bcc:	98 e0       	ldi	r25, 0x08	; 8
     bce:	89 9f       	mul	r24, r25
     bd0:	f0 01       	movw	r30, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	df 01       	movw	r26, r30
     bd6:	a4 51       	subi	r26, 0x14	; 20
     bd8:	b3 4f       	sbci	r27, 0xF3	; 243
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	8c 91       	ld	r24, X
     bde:	13 97       	sbiw	r26, 0x03	; 3
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	c1 f1       	breq	.+112    	; 0xc54 <Q_getc+0x8e>
 * Returns the next (FIFO) byte from the specified queue.
 */
     be4:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     be6:	f8 94       	cli
byte Q_getc(byte qid, char *pdata)
{
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	8c 91       	ld	r24, X
     bec:	11 97       	sbiw	r26, 0x01	; 1
     bee:	16 96       	adiw	r26, 0x06	; 6
     bf0:	cd 91       	ld	r28, X+
     bf2:	dc 91       	ld	r29, X
     bf4:	17 97       	sbiw	r26, 0x07	; 7
     bf6:	c8 0f       	add	r28, r24
     bf8:	d1 1d       	adc	r29, r1
     bfa:	88 81       	ld	r24, Y
     bfc:	e9 01       	movw	r28, r18
     bfe:	88 83       	st	Y, r24
	QCB *qcb = &queues[qid];
     c00:	14 96       	adiw	r26, 0x04	; 4
     c02:	2d 91       	ld	r18, X+
     c04:	3c 91       	ld	r19, X
     c06:	15 97       	sbiw	r26, 0x05	; 5
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	31 09       	sbc	r19, r1
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	3c 93       	st	X, r19
     c10:	2e 93       	st	-X, r18
     c12:	14 97       	sbiw	r26, 0x04	; 4
	if (qcb->flags != 2)
     c14:	13 96       	adiw	r26, 0x03	; 3
     c16:	8c 91       	ld	r24, X
     c18:	13 97       	sbiw	r26, 0x03	; 3
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <Q_getc+0x5c>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	1c 92       	st	X, r1
		{
			*pdata = *(qcb->pQ + qcb->out);
			qcb->available -= 1;
     c22:	e4 51       	subi	r30, 0x14	; 20
     c24:	f3 4f       	sbci	r31, 0xF3	; 243
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	82 81       	ldd	r24, Z+2	; 0x02
     c2a:	49 2f       	mov	r20, r25
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	4f 5f       	subi	r20, 0xFF	; 255
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	42 23       	and	r20, r18
     c38:	53 23       	and	r21, r19
     c3a:	20 81       	ld	r18, Z
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	9f 5f       	subi	r25, 0xFF	; 255
			if (qcb->flags == 1)
			{
     c40:	89 23       	and	r24, r25
     c42:	81 83       	std	Z+1, r24	; 0x01
	if (qcb->flags != 2)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			*pdata = *(qcb->pQ + qcb->out);
			qcb->available -= 1;
     c44:	42 17       	cp	r20, r18
     c46:	53 07       	cpc	r21, r19
     c48:	11 f4       	brne	.+4      	; 0xc4e <Q_getc+0x88>
			{
				qcb->flags = 0;
			}

			if (((qcb->out + 1) & qcb->smask) != qcb->in)
			{
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c4e:	7f bf       	out	0x3f, r23	; 63
				qcb->out = (qcb->out + 1) & qcb->smask;
			}
			else
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <Q_getc+0x90>
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     c54:	80 e0       	ldi	r24, 0x00	; 0
				qcb->flags = 2;
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <Q_create>:
			}
		}
		return 1;
	}
     c5c:	9c 01       	movw	r18, r24
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	31 09       	sbc	r19, r1
     c62:	2f 3f       	cpi	r18, 0xFF	; 255
     c64:	31 05       	cpc	r19, r1
     c66:	09 f0       	breq	.+2      	; 0xc6a <Q_create+0xe>
     c68:	48 f5       	brcc	.+82     	; 0xcbc <Q_create+0x60>
     c6a:	28 23       	and	r18, r24
     c6c:	39 23       	and	r19, r25
     c6e:	23 2b       	or	r18, r19
     c70:	29 f5       	brne	.+74     	; 0xcbc <Q_create+0x60>
     c72:	ef ea       	ldi	r30, 0xAF	; 175
     c74:	f4 e0       	ldi	r31, 0x04	; 4
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
}

/*
 * Creates a queue of the specified size.
 */
uint8_t Q_create(int qsize, char * pbuffer)
     c7a:	41 91       	ld	r20, Z+
     c7c:	41 11       	cpse	r20, r1
     c7e:	19 c0       	rjmp	.+50     	; 0xcb2 <Q_create+0x56>
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
     c80:	f9 01       	movw	r30, r18
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	9a 95       	dec	r25
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <Q_create+0x28>
     c8c:	e4 51       	subi	r30, 0x14	; 20
     c8e:	f3 4f       	sbci	r31, 0xF3	; 243
     c90:	10 82       	st	Z, r1
	{
     c92:	11 82       	std	Z+1, r1	; 0x01
		return -1;
     c94:	81 50       	subi	r24, 0x01	; 1
     c96:	82 83       	std	Z+2, r24	; 0x02
	}
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	83 83       	std	Z+3, r24	; 0x03

     c9c:	15 82       	std	Z+5, r1	; 0x05
     c9e:	14 82       	std	Z+4, r1	; 0x04
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     ca0:	77 83       	std	Z+7, r23	; 0x07
     ca2:	66 83       	std	Z+6, r22	; 0x06
	{
     ca4:	f9 01       	movw	r30, r18
     ca6:	e1 55       	subi	r30, 0x51	; 81
     ca8:	fb 4f       	sbci	r31, 0xFB	; 251
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 83       	st	Z, r24
		if (occupied[i] == false)
     cae:	82 2f       	mov	r24, r18
     cb0:	08 95       	ret
	}
	return 0;
}

/*
 * Creates a queue of the specified size.
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	28 30       	cpi	r18, 0x08	; 8
     cb8:	31 05       	cpc	r19, r1
     cba:	f9 f6       	brne	.-66     	; 0xc7a <Q_create+0x1e>
			}
		}
		return 1;
	}
	return 0;
}
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
	{
		if (occupied[i] == false)
		{
			queues[i].in = 0;
			queues[i].out = 0;
			queues[i].smask = qsize - 1;
     cbe:	08 95       	ret

00000cc0 <Serial_open>:

	//Protects from interrupts
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		
		regs[port]->ubrr = reg_set; //Sets the baud rate
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	91 05       	cpc	r25, r1
     cd6:	08 f0       	brcs	.+2      	; 0xcda <Serial_open+0x1a>
     cd8:	d0 c0       	rjmp	.+416    	; 0xe7a <Serial_open+0x1ba>
     cda:	b2 2e       	mov	r11, r18
     cdc:	6a 01       	movw	r12, r20
     cde:	7b 01       	movw	r14, r22
     ce0:	8c 01       	movw	r16, r24
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	80 9f       	mul	r24, r16
     ce6:	e0 01       	movw	r28, r0
     ce8:	81 9f       	mul	r24, r17
     cea:	d0 0d       	add	r29, r0
     cec:	11 24       	eor	r1, r1
     cee:	cf 5e       	subi	r28, 0xEF	; 239
     cf0:	dd 4f       	sbci	r29, 0xFD	; 253
     cf2:	6a 81       	ldd	r22, Y+2	; 0x02
     cf4:	7b 81       	ldd	r23, Y+3	; 0x03
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	9d 81       	ldd	r25, Y+5	; 0x05
     cfa:	b0 df       	rcall	.-160    	; 0xc5c <Q_create>
     cfc:	88 83       	st	Y, r24
     cfe:	6e 81       	ldd	r22, Y+6	; 0x06
     d00:	7f 81       	ldd	r23, Y+7	; 0x07
     d02:	88 85       	ldd	r24, Y+8	; 0x08
     d04:	99 85       	ldd	r25, Y+9	; 0x09
     d06:	aa df       	rcall	.-172    	; 0xc5c <Q_create>
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	00 0f       	add	r16, r16
     d0c:	11 1f       	adc	r17, r17
     d0e:	f8 01       	movw	r30, r16
     d10:	e7 5f       	subi	r30, 0xF7	; 247
     d12:	fd 4f       	sbci	r31, 0xFD	; 253
     d14:	a0 81       	ld	r26, Z
     d16:	b1 81       	ldd	r27, Z+1	; 0x01
     d18:	9c 91       	ld	r25, X
     d1a:	92 60       	ori	r25, 0x02	; 2
     d1c:	9c 93       	st	X, r25
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	c8 16       	cp	r12, r24
     d22:	80 e7       	ldi	r24, 0x70	; 112
     d24:	d8 06       	cpc	r13, r24
     d26:	e1 04       	cpc	r14, r1
     d28:	f1 04       	cpc	r15, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <Serial_open+0x6e>
     d2c:	78 c0       	rjmp	.+240    	; 0xe1e <Serial_open+0x15e>
     d2e:	94 f5       	brge	.+100    	; 0xd94 <Serial_open+0xd4>
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	c8 16       	cp	r12, r24
     d34:	85 e2       	ldi	r24, 0x25	; 37
     d36:	d8 06       	cpc	r13, r24
     d38:	e1 04       	cpc	r14, r1
     d3a:	f1 04       	cpc	r15, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <Serial_open+0x80>
     d3e:	65 c0       	rjmp	.+202    	; 0xe0a <Serial_open+0x14a>
     d40:	ac f4       	brge	.+42     	; 0xd6c <Serial_open+0xac>
     d42:	80 e6       	ldi	r24, 0x60	; 96
     d44:	c8 16       	cp	r12, r24
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	d8 06       	cpc	r13, r24
     d4a:	e1 04       	cpc	r14, r1
     d4c:	f1 04       	cpc	r15, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Serial_open+0x92>
     d50:	57 c0       	rjmp	.+174    	; 0xe00 <Serial_open+0x140>
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	c8 16       	cp	r12, r24
     d56:	82 e1       	ldi	r24, 0x12	; 18
     d58:	d8 06       	cpc	r13, r24
     d5a:	e1 04       	cpc	r14, r1
     d5c:	f1 04       	cpc	r15, r1
     d5e:	09 f0       	breq	.+2      	; 0xd62 <Serial_open+0xa2>
     d60:	77 c0       	rjmp	.+238    	; 0xe50 <Serial_open+0x190>
     d62:	40 ea       	ldi	r20, 0xA0	; 160
     d64:	51 e0       	ldi	r21, 0x01	; 1
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	75 c0       	rjmp	.+234    	; 0xe56 <Serial_open+0x196>
     d6c:	80 e4       	ldi	r24, 0x40	; 64
     d6e:	c8 16       	cp	r12, r24
     d70:	88 e3       	ldi	r24, 0x38	; 56
     d72:	d8 06       	cpc	r13, r24
     d74:	e1 04       	cpc	r14, r1
     d76:	f1 04       	cpc	r15, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <Serial_open+0xbc>
     d7a:	4c c0       	rjmp	.+152    	; 0xe14 <Serial_open+0x154>
     d7c:	c1 14       	cp	r12, r1
     d7e:	8b e4       	ldi	r24, 0x4B	; 75
     d80:	d8 06       	cpc	r13, r24
     d82:	e1 04       	cpc	r14, r1
     d84:	f1 04       	cpc	r15, r1
     d86:	09 f0       	breq	.+2      	; 0xd8a <Serial_open+0xca>
     d88:	63 c0       	rjmp	.+198    	; 0xe50 <Serial_open+0x190>
     d8a:	47 e6       	ldi	r20, 0x67	; 103
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	61 c0       	rjmp	.+194    	; 0xe56 <Serial_open+0x196>
     d94:	c1 14       	cp	r12, r1
     d96:	8c e2       	ldi	r24, 0x2C	; 44
     d98:	d8 06       	cpc	r13, r24
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	e8 06       	cpc	r14, r24
     d9e:	f1 04       	cpc	r15, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <Serial_open+0xe4>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <Serial_open+0x172>
     da4:	94 f4       	brge	.+36     	; 0xdca <Serial_open+0x10a>
     da6:	c1 14       	cp	r12, r1
     da8:	86 e9       	ldi	r24, 0x96	; 150
     daa:	d8 06       	cpc	r13, r24
     dac:	e1 04       	cpc	r14, r1
     dae:	f1 04       	cpc	r15, r1
     db0:	d9 f1       	breq	.+118    	; 0xe28 <Serial_open+0x168>
     db2:	c1 14       	cp	r12, r1
     db4:	81 ee       	ldi	r24, 0xE1	; 225
     db6:	d8 06       	cpc	r13, r24
     db8:	e1 04       	cpc	r14, r1
     dba:	f1 04       	cpc	r15, r1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <Serial_open+0x100>
     dbe:	48 c0       	rjmp	.+144    	; 0xe50 <Serial_open+0x190>
     dc0:	42 e2       	ldi	r20, 0x22	; 34
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	46 c0       	rjmp	.+140    	; 0xe56 <Serial_open+0x196>
     dca:	c1 14       	cp	r12, r1
     dcc:	84 e8       	ldi	r24, 0x84	; 132
     dce:	d8 06       	cpc	r13, r24
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	e8 06       	cpc	r14, r24
     dd4:	f1 04       	cpc	r15, r1
     dd6:	91 f1       	breq	.+100    	; 0xe3c <Serial_open+0x17c>
     dd8:	80 e9       	ldi	r24, 0x90	; 144
     dda:	c8 16       	cp	r12, r24
     ddc:	80 ed       	ldi	r24, 0xD0	; 208
     dde:	d8 06       	cpc	r13, r24
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	e8 06       	cpc	r14, r24
     de4:	f1 04       	cpc	r15, r1
     de6:	79 f1       	breq	.+94     	; 0xe46 <Serial_open+0x186>
     de8:	c1 14       	cp	r12, r1
     dea:	82 ec       	ldi	r24, 0xC2	; 194
     dec:	d8 06       	cpc	r13, r24
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	e8 06       	cpc	r14, r24
     df2:	f1 04       	cpc	r15, r1
     df4:	69 f5       	brne	.+90     	; 0xe50 <Serial_open+0x190>
     df6:	40 e1       	ldi	r20, 0x10	; 16
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <Serial_open+0x196>
     e00:	40 e4       	ldi	r20, 0x40	; 64
     e02:	53 e0       	ldi	r21, 0x03	; 3
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	26 c0       	rjmp	.+76     	; 0xe56 <Serial_open+0x196>
     e0a:	4f ec       	ldi	r20, 0xCF	; 207
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	21 c0       	rjmp	.+66     	; 0xe56 <Serial_open+0x196>
     e14:	4a e8       	ldi	r20, 0x8A	; 138
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	1c c0       	rjmp	.+56     	; 0xe56 <Serial_open+0x196>
     e1e:	44 e4       	ldi	r20, 0x44	; 68
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	17 c0       	rjmp	.+46     	; 0xe56 <Serial_open+0x196>
     e28:	43 e3       	ldi	r20, 0x33	; 51
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	12 c0       	rjmp	.+36     	; 0xe56 <Serial_open+0x196>
     e32:	49 e1       	ldi	r20, 0x19	; 25
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <Serial_open+0x196>
     e3c:	48 e0       	ldi	r20, 0x08	; 8
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <Serial_open+0x196>
     e46:	47 e0       	ldi	r20, 0x07	; 7
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <Serial_open+0x196>
     e50:	4f ef       	ldi	r20, 0xFF	; 255
     e52:	5f ef       	ldi	r21, 0xFF	; 255
     e54:	ba 01       	movw	r22, r20
     e56:	8f b7       	in	r24, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	f8 01       	movw	r30, r16
     e5c:	e7 5f       	subi	r30, 0xF7	; 247
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	01 90       	ld	r0, Z+
     e62:	f0 81       	ld	r31, Z
     e64:	e0 2d       	mov	r30, r0
     e66:	55 83       	std	Z+5, r21	; 0x05
     e68:	44 83       	std	Z+4, r20	; 0x04
     e6a:	b2 82       	std	Z+2, r11	; 0x02
     e6c:	98 e9       	ldi	r25, 0x98	; 152
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	8f bf       	out	0x3f, r24	; 63
     e72:	78 94       	sei
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Serial_open+0x1be>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	08 95       	ret

00000e92 <Serial_read>:
		regs[port]->ucsrc = config; //Sets the data frame structure
		regs[port]->ucsrb = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //Enables RX, TX, and RX interrupt
	}
	sei(); //Enables global interrupts
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	return 0;
     e9c:	19 82       	std	Y+1, r1	; 0x01
}

/*
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	ac 01       	movw	r20, r24
     ea2:	24 9f       	mul	r18, r20
     ea4:	c0 01       	movw	r24, r0
     ea6:	25 9f       	mul	r18, r21
     ea8:	90 0d       	add	r25, r0
     eaa:	11 24       	eor	r1, r1
     eac:	fc 01       	movw	r30, r24
     eae:	ef 5e       	subi	r30, 0xEF	; 239
     eb0:	fd 4f       	sbci	r31, 0xFD	; 253
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	85 de       	rcall	.-758    	; 0xbc6 <Q_getc>
     ebc:	88 23       	and	r24, r24
     ebe:	19 f0       	breq	.+6      	; 0xec6 <Serial_read+0x34>
* Serial_close
*
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	90 e0       	ldi	r25, 0x00	; 0
* Turns off the specified serial port (USART) function by 
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <Serial_read+0x38>
* disabling transmitter and receiver, deleting the queues, disabling interrupts, etc. 
*
* @param int port - the port ID of the serial port to close.
*/
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
void Serial_close(int port)
{
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <Serial_read_string>:
/*
* Serial_available
*
* Returns number of bytes available for reading from the specified serial port.
*
* @param int port - the serial port ID.
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	7c 01       	movw	r14, r24
     ee4:	6b 01       	movw	r12, r22
     ee6:	8a 01       	movw	r16, r20
* @return int - Number of byte avaible for reading.
*/
     ee8:	c0 e0       	ldi	r28, 0x00	; 0
     eea:	d0 e0       	ldi	r29, 0x00	; 0
int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
     eec:	c0 17       	cp	r28, r16
     eee:	d1 07       	cpc	r29, r17
     ef0:	8c f4       	brge	.+34     	; 0xf14 <Serial_read_string+0x42>
}

     ef2:	c7 01       	movw	r24, r14
     ef4:	ce df       	rcall	.-100    	; 0xe92 <Serial_read>
/*
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	59 f0       	breq	.+22     	; 0xf10 <Serial_read_string+0x3e>
     efa:	f6 01       	movw	r30, r12
     efc:	ec 0f       	add	r30, r28
     efe:	fd 1f       	adc	r31, r29
* Serial_read
     f00:	8d 30       	cpi	r24, 0x0D	; 13
     f02:	21 f4       	brne	.+8      	; 0xf0c <Serial_read_string+0x3a>
*
* Read next available character from the specified port. If no character is available a value of -1 is returned. 
     f04:	10 82       	st	Z, r1
* Note that the return type is int rather then char or an 8-bit type. This allows for the test for -1 to work.
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <Serial_read_string+0x46>
* Any 8-bit character (including 0xFF) returned as an int (e.g. 0x00FF) will be positive. 
* You should test for -1 before using the return value as a character.
*
     f0c:	80 83       	st	Z, r24
     f0e:	21 96       	adiw	r28, 0x01	; 1
* @param int port - the serial port ID
* @return data or -1 if queue is empty
*/
     f10:	0a d9       	rcall	.-3564   	; 0x126 <x_yield>
     f12:	ec cf       	rjmp	.-40     	; 0xeec <Serial_read_string+0x1a>
int Serial_read(int port)
{
	char qdata = 0;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
	int data;
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	08 95       	ret

00000f2a <Serial_write>:

	if (Q_getc(ports[port].rx_qid, &qdata))
	{
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
		data = qdata;
     f30:	8a e0       	ldi	r24, 0x0A	; 10
     f32:	8c 9f       	mul	r24, r28
     f34:	f0 01       	movw	r30, r0
     f36:	8d 9f       	mul	r24, r29
     f38:	f0 0d       	add	r31, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	ef 5e       	subi	r30, 0xEF	; 239
     f3e:	fd 4f       	sbci	r31, 0xFD	; 253
     f40:	81 81       	ldd	r24, Z+1	; 0x01
     f42:	fb dd       	rcall	.-1034   	; 0xb3a <Q_putc>
     f44:	88 23       	and	r24, r24
     f46:	61 f0       	breq	.+24     	; 0xf60 <Serial_write+0x36>
		return data;
	}
	else
     f48:	cc 0f       	add	r28, r28
     f4a:	dd 1f       	adc	r29, r29
     f4c:	c7 5f       	subi	r28, 0xF7	; 247
     f4e:	dd 4f       	sbci	r29, 0xFD	; 253
     f50:	e8 81       	ld	r30, Y
     f52:	f9 81       	ldd	r31, Y+1	; 0x01
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	80 62       	ori	r24, 0x20	; 32
     f58:	81 83       	std	Z+1, r24	; 0x01
	{
		return -1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <Serial_write+0x3a>
	}
}
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255

/*
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <Serial_write_string>:
* @param int port - the port ID of the serial port to close.
*/
void Serial_close(int port)
{
	regs[port]->ucsrb = 0;
	Q_delete(ports[port].rx_qid);
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	8c 01       	movw	r16, r24
     f74:	eb 01       	movw	r28, r22
	Q_delete(ports[port].tx_qid);
}
     f76:	69 91       	ld	r22, Y+
     f78:	66 23       	and	r22, r22
     f7a:	19 f0       	breq	.+6      	; 0xf82 <Serial_write_string+0x18>

     f7c:	c8 01       	movw	r24, r16
     f7e:	d5 df       	rcall	.-86     	; 0xf2a <Serial_write>
     f80:	fa cf       	rjmp	.-12     	; 0xf76 <Serial_write_string+0xc>
/*
* Serial_available
*
* Returns number of bytes available for reading from the specified serial port.
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <__vector_26>:
}

/*
* Serial_write_string
*
* Writes a string to the serial port one byte at a time.
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
*
* @param int port - the port ID
     fc0:	be 01       	movw	r22, r28
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	80 91 12 02 	lds	r24, 0x0212
     fca:	fd dd       	rcall	.-1030   	; 0xbc6 <Q_getc>
     fcc:	88 23       	and	r24, r24
     fce:	21 f0       	breq	.+8      	; 0xfd8 <__vector_26+0x48>
* @param char * data - the character array to be written
* @param int data_length - the length of the char array
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	80 93 c6 00 	sts	0x00C6, r24
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <__vector_26+0x56>
* @return int - always returns 1.
*/
int Serial_write_string(int port, char * data, int data_length) {
	int i = 0;
     fd8:	e0 91 09 02 	lds	r30, 0x0209
     fdc:	f0 91 0a 02 	lds	r31, 0x020A
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	81 83       	std	Z+1, r24	; 0x01
	while( data[i] != 0x00) {
		Serial_write(port, data[i]);
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0b be       	out	0x3b, r0	; 59
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_37>:
		i++;
	}
	return 1;
}
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	0b b6       	in	r0, 0x3b	; 59
    101e:	0f 92       	push	r0
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	1f 92       	push	r1
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62

/*
    1042:	be 01       	movw	r22, r28
    1044:	6f 5f       	subi	r22, 0xFF	; 255
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	80 91 1c 02 	lds	r24, 0x021C
    104c:	bc dd       	rcall	.-1160   	; 0xbc6 <Q_getc>
    104e:	88 23       	and	r24, r24
    1050:	21 f0       	breq	.+8      	; 0x105a <__vector_37+0x48>
* Serial_read_string
*
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	80 93 ce 00 	sts	0x00CE, r24
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <__vector_37+0x56>
* Reads a string form a specified serial port.
*
* @param int port - the port ID
* @param char * data - the array to be read into
    105a:	e0 91 0b 02 	lds	r30, 0x020B
    105e:	f0 91 0c 02 	lds	r31, 0x020C
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	8f 7d       	andi	r24, 0xDF	; 223
    1066:	81 83       	std	Z+1, r24	; 0x01
* @param int data_length - the length of the char array
* @return int - 1 if sucessful, 0 if not
    1068:	0f 90       	pop	r0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	ff 91       	pop	r31
    1070:	ef 91       	pop	r30
    1072:	bf 91       	pop	r27
    1074:	af 91       	pop	r26
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	7f 91       	pop	r23
    107c:	6f 91       	pop	r22
    107e:	5f 91       	pop	r21
    1080:	4f 91       	pop	r20
    1082:	3f 91       	pop	r19
    1084:	2f 91       	pop	r18
    1086:	0f 90       	pop	r0
    1088:	0b be       	out	0x3b, r0	; 59
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_52>:
*/
int Serial_read_string(int port, char * data, int data_length) {
	char latest;
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	0b b6       	in	r0, 0x3b	; 59
    10a0:	0f 92       	push	r0
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	1f 92       	push	r1
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	int i = 0;

    10c4:	be 01       	movw	r22, r28
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	80 91 26 02 	lds	r24, 0x0226
    10ce:	7b dd       	rcall	.-1290   	; 0xbc6 <Q_getc>
    10d0:	88 23       	and	r24, r24
    10d2:	21 f0       	breq	.+8      	; 0x10dc <__vector_52+0x48>
	//loop until end of data
	while (i < data_length) {
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	80 93 d6 00 	sts	0x00D6, r24
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <__vector_52+0x56>
		//get latest character
		latest = Serial_read(port);
		if (latest != 0xFF) {
			if (latest == 0x0D) {
    10dc:	e0 91 0d 02 	lds	r30, 0x020D
    10e0:	f0 91 0e 02 	lds	r31, 0x020E
    10e4:	81 81       	ldd	r24, Z+1	; 0x01
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	81 83       	std	Z+1, r24	; 0x01
				//the input has terminated
				data[i] = 0x00;//null terminate string
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0b be       	out	0x3b, r0	; 59
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_55>:
				return 1;
			}
			//write the next character into the buffer
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	0b b6       	in	r0, 0x3b	; 59
    1122:	0f 92       	push	r0
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	1f 92       	push	r1
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
			data[i++]=latest;
		}
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	80 91 30 02 	lds	r24, 0x0230
    1150:	3a dd       	rcall	.-1420   	; 0xbc6 <Q_getc>
    1152:	88 23       	and	r24, r24
    1154:	21 f0       	breq	.+8      	; 0x115e <__vector_55+0x48>
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	80 93 36 01 	sts	0x0136, r24
    115c:	07 c0       	rjmp	.+14     	; 0x116c <__vector_55+0x56>
	}
	//we've used more than the whole array, error
	return 0;
}
    115e:	e0 91 0f 02 	lds	r30, 0x020F
    1162:	f0 91 10 02 	lds	r31, 0x0210
    1166:	81 81       	ldd	r24, Z+1	; 0x01
    1168:	8f 7d       	andi	r24, 0xDF	; 223
    116a:	81 83       	std	Z+1, r24	; 0x01

/*
    116c:	0f 90       	pop	r0
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0b be       	out	0x3b, r0	; 59
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_25>:
* Serial_write
*
* Writes one data byte to the serial port. This function enables the transmit ISR (UDRIEx = 1) and blocks until the 
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	0b b6       	in	r0, 0x3b	; 59
    11a4:	0f 92       	push	r0
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
* write to the corresponding queue is successful. The return value is always 1. 
    11be:	60 91 c6 00 	lds	r22, 0x00C6
    11c2:	80 91 11 02 	lds	r24, 0x0211
    11c6:	b9 dc       	rcall	.-1678   	; 0xb3a <Q_putc>
* 
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0b be       	out	0x3b, r0	; 59
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_36>:
* @param int port - the port ID
* @param char data - the char to be written to the serial port.
* @return 1 if successful, -1 if not
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	0b b6       	in	r0, 0x3b	; 59
    11fa:	0f 92       	push	r0
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
*/
    1214:	60 91 ce 00 	lds	r22, 0x00CE
    1218:	80 91 1b 02 	lds	r24, 0x021B
    121c:	8e dc       	rcall	.-1764   	; 0xb3a <Q_putc>
int Serial_write(int port, char data)
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0b be       	out	0x3b, r0	; 59
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_51>:
{
	if (Q_putc(ports[port].tx_qid, data))
	{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	0b b6       	in	r0, 0x3b	; 59
    1250:	0f 92       	push	r0
    1252:	2f 93       	push	r18
    1254:	3f 93       	push	r19
    1256:	4f 93       	push	r20
    1258:	5f 93       	push	r21
    125a:	6f 93       	push	r22
    125c:	7f 93       	push	r23
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	af 93       	push	r26
    1264:	bf 93       	push	r27
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line
    126a:	60 91 d6 00 	lds	r22, 0x00D6
    126e:	80 91 25 02 	lds	r24, 0x0225
    1272:	63 dc       	rcall	.-1850   	; 0xb3a <Q_putc>
		regs[port]->ucsrb |= (1<<UDRIE0);
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	bf 91       	pop	r27
    127a:	af 91       	pop	r26
    127c:	9f 91       	pop	r25
    127e:	8f 91       	pop	r24
    1280:	7f 91       	pop	r23
    1282:	6f 91       	pop	r22
    1284:	5f 91       	pop	r21
    1286:	4f 91       	pop	r20
    1288:	3f 91       	pop	r19
    128a:	2f 91       	pop	r18
    128c:	0f 90       	pop	r0
    128e:	0b be       	out	0x3b, r0	; 59
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <__vector_54>:
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;
	}
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
    12a4:	0b b6       	in	r0, 0x3b	; 59
    12a6:	0f 92       	push	r0
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
	return -1;
    12c0:	60 91 36 01 	lds	r22, 0x0136
    12c4:	80 91 2f 02 	lds	r24, 0x022F
    12c8:	38 dc       	rcall	.-1936   	; 0xb3a <Q_putc>

    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0b be       	out	0x3b, r0	; 59
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <__divmodhi4>:
    12f0:	97 fb       	bst	r25, 7
    12f2:	07 2e       	mov	r0, r23
    12f4:	16 f4       	brtc	.+4      	; 0x12fa <__divmodhi4+0xa>
    12f6:	00 94       	com	r0
    12f8:	06 d0       	rcall	.+12     	; 0x1306 <__divmodhi4_neg1>
    12fa:	77 fd       	sbrc	r23, 7
    12fc:	08 d0       	rcall	.+16     	; 0x130e <__divmodhi4_neg2>
    12fe:	0b d0       	rcall	.+22     	; 0x1316 <__udivmodhi4>
    1300:	07 fc       	sbrc	r0, 7
    1302:	05 d0       	rcall	.+10     	; 0x130e <__divmodhi4_neg2>
    1304:	3e f4       	brtc	.+14     	; 0x1314 <__divmodhi4_exit>

00001306 <__divmodhi4_neg1>:
    1306:	90 95       	com	r25
    1308:	81 95       	neg	r24
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__divmodhi4_neg2>:
    130e:	70 95       	com	r23
    1310:	61 95       	neg	r22
    1312:	7f 4f       	sbci	r23, 0xFF	; 255

00001314 <__divmodhi4_exit>:
    1314:	08 95       	ret

00001316 <__udivmodhi4>:
    1316:	aa 1b       	sub	r26, r26
    1318:	bb 1b       	sub	r27, r27
    131a:	51 e1       	ldi	r21, 0x11	; 17
    131c:	07 c0       	rjmp	.+14     	; 0x132c <__udivmodhi4_ep>

0000131e <__udivmodhi4_loop>:
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	a6 17       	cp	r26, r22
    1324:	b7 07       	cpc	r27, r23
    1326:	10 f0       	brcs	.+4      	; 0x132c <__udivmodhi4_ep>
    1328:	a6 1b       	sub	r26, r22
    132a:	b7 0b       	sbc	r27, r23

0000132c <__udivmodhi4_ep>:
    132c:	88 1f       	adc	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	5a 95       	dec	r21
    1332:	a9 f7       	brne	.-22     	; 0x131e <__udivmodhi4_loop>
    1334:	80 95       	com	r24
    1336:	90 95       	com	r25
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	08 95       	ret

0000133e <atoi>:
    133e:	fc 01       	movw	r30, r24
    1340:	88 27       	eor	r24, r24
    1342:	99 27       	eor	r25, r25
    1344:	e8 94       	clt
    1346:	21 91       	ld	r18, Z+
    1348:	20 32       	cpi	r18, 0x20	; 32
    134a:	e9 f3       	breq	.-6      	; 0x1346 <atoi+0x8>
    134c:	29 30       	cpi	r18, 0x09	; 9
    134e:	10 f0       	brcs	.+4      	; 0x1354 <atoi+0x16>
    1350:	2e 30       	cpi	r18, 0x0E	; 14
    1352:	c8 f3       	brcs	.-14     	; 0x1346 <atoi+0x8>
    1354:	2b 32       	cpi	r18, 0x2B	; 43
    1356:	39 f0       	breq	.+14     	; 0x1366 <atoi+0x28>
    1358:	2d 32       	cpi	r18, 0x2D	; 45
    135a:	31 f4       	brne	.+12     	; 0x1368 <atoi+0x2a>
    135c:	68 94       	set
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <atoi+0x28>
    1360:	14 d0       	rcall	.+40     	; 0x138a <__mulhi_const_10>
    1362:	82 0f       	add	r24, r18
    1364:	91 1d       	adc	r25, r1
    1366:	21 91       	ld	r18, Z+
    1368:	20 53       	subi	r18, 0x30	; 48
    136a:	2a 30       	cpi	r18, 0x0A	; 10
    136c:	c8 f3       	brcs	.-14     	; 0x1360 <atoi+0x22>
    136e:	1e f4       	brtc	.+6      	; 0x1376 <atoi+0x38>
    1370:	90 95       	com	r25
    1372:	81 95       	neg	r24
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	08 95       	ret

00001378 <strcmp>:
    1378:	fb 01       	movw	r30, r22
    137a:	dc 01       	movw	r26, r24
    137c:	8d 91       	ld	r24, X+
    137e:	01 90       	ld	r0, Z+
    1380:	80 19       	sub	r24, r0
    1382:	01 10       	cpse	r0, r1
    1384:	d9 f3       	breq	.-10     	; 0x137c <strcmp+0x4>
    1386:	99 0b       	sbc	r25, r25
    1388:	08 95       	ret

0000138a <__mulhi_const_10>:
    138a:	7a e0       	ldi	r23, 0x0A	; 10
    138c:	97 9f       	mul	r25, r23
    138e:	90 2d       	mov	r25, r0
    1390:	87 9f       	mul	r24, r23
    1392:	80 2d       	mov	r24, r0
    1394:	91 0d       	add	r25, r1
    1396:	11 24       	eor	r1, r1
    1398:	08 95       	ret

0000139a <sprintf>:
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	2e 97       	sbiw	r28, 0x0e	; 14
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	0e 89       	ldd	r16, Y+22	; 0x16
    13b4:	1f 89       	ldd	r17, Y+23	; 0x17
    13b6:	86 e0       	ldi	r24, 0x06	; 6
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    13ba:	1a 83       	std	Y+2, r17	; 0x02
    13bc:	09 83       	std	Y+1, r16	; 0x01
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	9f e7       	ldi	r25, 0x7F	; 127
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	ae 01       	movw	r20, r28
    13c8:	46 5e       	subi	r20, 0xE6	; 230
    13ca:	5f 4f       	sbci	r21, 0xFF	; 255
    13cc:	68 8d       	ldd	r22, Y+24	; 0x18
    13ce:	79 8d       	ldd	r23, Y+25	; 0x19
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	11 d0       	rcall	.+34     	; 0x13f8 <vfprintf>
    13d6:	2f 81       	ldd	r18, Y+7	; 0x07
    13d8:	38 85       	ldd	r19, Y+8	; 0x08
    13da:	f8 01       	movw	r30, r16
    13dc:	e2 0f       	add	r30, r18
    13de:	f3 1f       	adc	r31, r19
    13e0:	10 82       	st	Z, r1
    13e2:	2e 96       	adiw	r28, 0x0e	; 14
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	08 95       	ret

000013f8 <vfprintf>:
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	2c 97       	sbiw	r28, 0x0c	; 12
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	7c 01       	movw	r14, r24
    142e:	6b 01       	movw	r12, r22
    1430:	8a 01       	movw	r16, r20
    1432:	fc 01       	movw	r30, r24
    1434:	17 82       	std	Z+7, r1	; 0x07
    1436:	16 82       	std	Z+6, r1	; 0x06
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	81 ff       	sbrs	r24, 1
    143c:	b0 c1       	rjmp	.+864    	; 0x179e <vfprintf+0x3a6>
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	4c 01       	movw	r8, r24
    1444:	f7 01       	movw	r30, r14
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	f6 01       	movw	r30, r12
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	6f 01       	movw	r12, r30
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <vfprintf+0x62>
    1458:	9e c1       	rjmp	.+828    	; 0x1796 <vfprintf+0x39e>
    145a:	85 32       	cpi	r24, 0x25	; 37
    145c:	39 f4       	brne	.+14     	; 0x146c <vfprintf+0x74>
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	6f 01       	movw	r12, r30
    1468:	85 32       	cpi	r24, 0x25	; 37
    146a:	21 f4       	brne	.+8      	; 0x1474 <vfprintf+0x7c>
    146c:	b7 01       	movw	r22, r14
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	c7 d1       	rcall	.+910    	; 0x1800 <fputc>
    1472:	e8 cf       	rjmp	.-48     	; 0x1444 <vfprintf+0x4c>
    1474:	51 2c       	mov	r5, r1
    1476:	31 2c       	mov	r3, r1
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	20 32       	cpi	r18, 0x20	; 32
    147c:	a0 f4       	brcc	.+40     	; 0x14a6 <vfprintf+0xae>
    147e:	8b 32       	cpi	r24, 0x2B	; 43
    1480:	69 f0       	breq	.+26     	; 0x149c <vfprintf+0xa4>
    1482:	30 f4       	brcc	.+12     	; 0x1490 <vfprintf+0x98>
    1484:	80 32       	cpi	r24, 0x20	; 32
    1486:	59 f0       	breq	.+22     	; 0x149e <vfprintf+0xa6>
    1488:	83 32       	cpi	r24, 0x23	; 35
    148a:	69 f4       	brne	.+26     	; 0x14a6 <vfprintf+0xae>
    148c:	20 61       	ori	r18, 0x10	; 16
    148e:	2c c0       	rjmp	.+88     	; 0x14e8 <vfprintf+0xf0>
    1490:	8d 32       	cpi	r24, 0x2D	; 45
    1492:	39 f0       	breq	.+14     	; 0x14a2 <vfprintf+0xaa>
    1494:	80 33       	cpi	r24, 0x30	; 48
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0xae>
    1498:	21 60       	ori	r18, 0x01	; 1
    149a:	26 c0       	rjmp	.+76     	; 0x14e8 <vfprintf+0xf0>
    149c:	22 60       	ori	r18, 0x02	; 2
    149e:	24 60       	ori	r18, 0x04	; 4
    14a0:	23 c0       	rjmp	.+70     	; 0x14e8 <vfprintf+0xf0>
    14a2:	28 60       	ori	r18, 0x08	; 8
    14a4:	21 c0       	rjmp	.+66     	; 0x14e8 <vfprintf+0xf0>
    14a6:	27 fd       	sbrc	r18, 7
    14a8:	27 c0       	rjmp	.+78     	; 0x14f8 <vfprintf+0x100>
    14aa:	30 ed       	ldi	r19, 0xD0	; 208
    14ac:	38 0f       	add	r19, r24
    14ae:	3a 30       	cpi	r19, 0x0A	; 10
    14b0:	78 f4       	brcc	.+30     	; 0x14d0 <vfprintf+0xd8>
    14b2:	26 ff       	sbrs	r18, 6
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0xca>
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	5f 9e       	mul	r5, r31
    14ba:	30 0d       	add	r19, r0
    14bc:	11 24       	eor	r1, r1
    14be:	53 2e       	mov	r5, r19
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <vfprintf+0xf0>
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	38 9e       	mul	r3, r24
    14c6:	30 0d       	add	r19, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	33 2e       	mov	r3, r19
    14cc:	20 62       	ori	r18, 0x20	; 32
    14ce:	0c c0       	rjmp	.+24     	; 0x14e8 <vfprintf+0xf0>
    14d0:	8e 32       	cpi	r24, 0x2E	; 46
    14d2:	21 f4       	brne	.+8      	; 0x14dc <vfprintf+0xe4>
    14d4:	26 fd       	sbrc	r18, 6
    14d6:	5f c1       	rjmp	.+702    	; 0x1796 <vfprintf+0x39e>
    14d8:	20 64       	ori	r18, 0x40	; 64
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <vfprintf+0xf0>
    14dc:	8c 36       	cpi	r24, 0x6C	; 108
    14de:	11 f4       	brne	.+4      	; 0x14e4 <vfprintf+0xec>
    14e0:	20 68       	ori	r18, 0x80	; 128
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0xf0>
    14e4:	88 36       	cpi	r24, 0x68	; 104
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <vfprintf+0x100>
    14e8:	f6 01       	movw	r30, r12
    14ea:	93 fd       	sbrc	r25, 3
    14ec:	85 91       	lpm	r24, Z+
    14ee:	93 ff       	sbrs	r25, 3
    14f0:	81 91       	ld	r24, Z+
    14f2:	6f 01       	movw	r12, r30
    14f4:	81 11       	cpse	r24, r1
    14f6:	c1 cf       	rjmp	.-126    	; 0x147a <vfprintf+0x82>
    14f8:	98 2f       	mov	r25, r24
    14fa:	9f 7d       	andi	r25, 0xDF	; 223
    14fc:	95 54       	subi	r25, 0x45	; 69
    14fe:	93 30       	cpi	r25, 0x03	; 3
    1500:	28 f4       	brcc	.+10     	; 0x150c <vfprintf+0x114>
    1502:	0c 5f       	subi	r16, 0xFC	; 252
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	ff e3       	ldi	r31, 0x3F	; 63
    1508:	f9 83       	std	Y+1, r31	; 0x01
    150a:	0d c0       	rjmp	.+26     	; 0x1526 <vfprintf+0x12e>
    150c:	83 36       	cpi	r24, 0x63	; 99
    150e:	31 f0       	breq	.+12     	; 0x151c <vfprintf+0x124>
    1510:	83 37       	cpi	r24, 0x73	; 115
    1512:	71 f0       	breq	.+28     	; 0x1530 <vfprintf+0x138>
    1514:	83 35       	cpi	r24, 0x53	; 83
    1516:	09 f0       	breq	.+2      	; 0x151a <vfprintf+0x122>
    1518:	57 c0       	rjmp	.+174    	; 0x15c8 <vfprintf+0x1d0>
    151a:	21 c0       	rjmp	.+66     	; 0x155e <vfprintf+0x166>
    151c:	f8 01       	movw	r30, r16
    151e:	80 81       	ld	r24, Z
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	0e 5f       	subi	r16, 0xFE	; 254
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	44 24       	eor	r4, r4
    1528:	43 94       	inc	r4
    152a:	51 2c       	mov	r5, r1
    152c:	54 01       	movw	r10, r8
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <vfprintf+0x160>
    1530:	38 01       	movw	r6, r16
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	6f 0e       	add	r6, r31
    1536:	71 1c       	adc	r7, r1
    1538:	f8 01       	movw	r30, r16
    153a:	a0 80       	ld	r10, Z
    153c:	b1 80       	ldd	r11, Z+1	; 0x01
    153e:	26 ff       	sbrs	r18, 6
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x150>
    1542:	65 2d       	mov	r22, r5
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x154>
    1548:	6f ef       	ldi	r22, 0xFF	; 255
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	c5 01       	movw	r24, r10
    154e:	2c 87       	std	Y+12, r18	; 0x0c
    1550:	4c d1       	rcall	.+664    	; 0x17ea <strnlen>
    1552:	2c 01       	movw	r4, r24
    1554:	83 01       	movw	r16, r6
    1556:	2c 85       	ldd	r18, Y+12	; 0x0c
    1558:	2f 77       	andi	r18, 0x7F	; 127
    155a:	22 2e       	mov	r2, r18
    155c:	16 c0       	rjmp	.+44     	; 0x158a <vfprintf+0x192>
    155e:	38 01       	movw	r6, r16
    1560:	f2 e0       	ldi	r31, 0x02	; 2
    1562:	6f 0e       	add	r6, r31
    1564:	71 1c       	adc	r7, r1
    1566:	f8 01       	movw	r30, r16
    1568:	a0 80       	ld	r10, Z
    156a:	b1 80       	ldd	r11, Z+1	; 0x01
    156c:	26 ff       	sbrs	r18, 6
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <vfprintf+0x17e>
    1570:	65 2d       	mov	r22, r5
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <vfprintf+0x182>
    1576:	6f ef       	ldi	r22, 0xFF	; 255
    1578:	7f ef       	ldi	r23, 0xFF	; 255
    157a:	c5 01       	movw	r24, r10
    157c:	2c 87       	std	Y+12, r18	; 0x0c
    157e:	2a d1       	rcall	.+596    	; 0x17d4 <strnlen_P>
    1580:	2c 01       	movw	r4, r24
    1582:	2c 85       	ldd	r18, Y+12	; 0x0c
    1584:	20 68       	ori	r18, 0x80	; 128
    1586:	22 2e       	mov	r2, r18
    1588:	83 01       	movw	r16, r6
    158a:	23 fc       	sbrc	r2, 3
    158c:	19 c0       	rjmp	.+50     	; 0x15c0 <vfprintf+0x1c8>
    158e:	83 2d       	mov	r24, r3
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	48 16       	cp	r4, r24
    1594:	59 06       	cpc	r5, r25
    1596:	a0 f4       	brcc	.+40     	; 0x15c0 <vfprintf+0x1c8>
    1598:	b7 01       	movw	r22, r14
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	30 d1       	rcall	.+608    	; 0x1800 <fputc>
    15a0:	3a 94       	dec	r3
    15a2:	f5 cf       	rjmp	.-22     	; 0x158e <vfprintf+0x196>
    15a4:	f5 01       	movw	r30, r10
    15a6:	27 fc       	sbrc	r2, 7
    15a8:	85 91       	lpm	r24, Z+
    15aa:	27 fe       	sbrs	r2, 7
    15ac:	81 91       	ld	r24, Z+
    15ae:	5f 01       	movw	r10, r30
    15b0:	b7 01       	movw	r22, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	25 d1       	rcall	.+586    	; 0x1800 <fputc>
    15b6:	31 10       	cpse	r3, r1
    15b8:	3a 94       	dec	r3
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	4f 1a       	sub	r4, r31
    15be:	51 08       	sbc	r5, r1
    15c0:	41 14       	cp	r4, r1
    15c2:	51 04       	cpc	r5, r1
    15c4:	79 f7       	brne	.-34     	; 0x15a4 <vfprintf+0x1ac>
    15c6:	de c0       	rjmp	.+444    	; 0x1784 <vfprintf+0x38c>
    15c8:	84 36       	cpi	r24, 0x64	; 100
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <vfprintf+0x1d8>
    15cc:	89 36       	cpi	r24, 0x69	; 105
    15ce:	31 f5       	brne	.+76     	; 0x161c <vfprintf+0x224>
    15d0:	f8 01       	movw	r30, r16
    15d2:	27 ff       	sbrs	r18, 7
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x1ec>
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	08 c0       	rjmp	.+16     	; 0x15f4 <vfprintf+0x1fc>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	07 2e       	mov	r0, r23
    15ea:	00 0c       	add	r0, r0
    15ec:	88 0b       	sbc	r24, r24
    15ee:	99 0b       	sbc	r25, r25
    15f0:	0e 5f       	subi	r16, 0xFE	; 254
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	2f 76       	andi	r18, 0x6F	; 111
    15f6:	72 2e       	mov	r7, r18
    15f8:	97 ff       	sbrs	r25, 7
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <vfprintf+0x216>
    15fc:	90 95       	com	r25
    15fe:	80 95       	com	r24
    1600:	70 95       	com	r23
    1602:	61 95       	neg	r22
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	20 68       	ori	r18, 0x80	; 128
    160c:	72 2e       	mov	r7, r18
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a4 01       	movw	r20, r8
    1614:	2d d1       	rcall	.+602    	; 0x1870 <__ultoa_invert>
    1616:	a8 2e       	mov	r10, r24
    1618:	a8 18       	sub	r10, r8
    161a:	43 c0       	rjmp	.+134    	; 0x16a2 <vfprintf+0x2aa>
    161c:	85 37       	cpi	r24, 0x75	; 117
    161e:	29 f4       	brne	.+10     	; 0x162a <vfprintf+0x232>
    1620:	2f 7e       	andi	r18, 0xEF	; 239
    1622:	b2 2e       	mov	r11, r18
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	25 c0       	rjmp	.+74     	; 0x1674 <vfprintf+0x27c>
    162a:	f2 2f       	mov	r31, r18
    162c:	f9 7f       	andi	r31, 0xF9	; 249
    162e:	bf 2e       	mov	r11, r31
    1630:	8f 36       	cpi	r24, 0x6F	; 111
    1632:	c1 f0       	breq	.+48     	; 0x1664 <vfprintf+0x26c>
    1634:	18 f4       	brcc	.+6      	; 0x163c <vfprintf+0x244>
    1636:	88 35       	cpi	r24, 0x58	; 88
    1638:	79 f0       	breq	.+30     	; 0x1658 <vfprintf+0x260>
    163a:	ad c0       	rjmp	.+346    	; 0x1796 <vfprintf+0x39e>
    163c:	80 37       	cpi	r24, 0x70	; 112
    163e:	19 f0       	breq	.+6      	; 0x1646 <vfprintf+0x24e>
    1640:	88 37       	cpi	r24, 0x78	; 120
    1642:	21 f0       	breq	.+8      	; 0x164c <vfprintf+0x254>
    1644:	a8 c0       	rjmp	.+336    	; 0x1796 <vfprintf+0x39e>
    1646:	2f 2f       	mov	r18, r31
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	b2 2e       	mov	r11, r18
    164c:	b4 fe       	sbrs	r11, 4
    164e:	0d c0       	rjmp	.+26     	; 0x166a <vfprintf+0x272>
    1650:	8b 2d       	mov	r24, r11
    1652:	84 60       	ori	r24, 0x04	; 4
    1654:	b8 2e       	mov	r11, r24
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x272>
    1658:	24 ff       	sbrs	r18, 4
    165a:	0a c0       	rjmp	.+20     	; 0x1670 <vfprintf+0x278>
    165c:	9f 2f       	mov	r25, r31
    165e:	96 60       	ori	r25, 0x06	; 6
    1660:	b9 2e       	mov	r11, r25
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <vfprintf+0x278>
    1664:	28 e0       	ldi	r18, 0x08	; 8
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x27c>
    166a:	20 e1       	ldi	r18, 0x10	; 16
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <vfprintf+0x27c>
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	32 e0       	ldi	r19, 0x02	; 2
    1674:	f8 01       	movw	r30, r16
    1676:	b7 fe       	sbrs	r11, 7
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <vfprintf+0x290>
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	0c 5f       	subi	r16, 0xFC	; 252
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <vfprintf+0x29c>
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 5f       	subi	r16, 0xFE	; 254
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	a4 01       	movw	r20, r8
    1696:	ec d0       	rcall	.+472    	; 0x1870 <__ultoa_invert>
    1698:	a8 2e       	mov	r10, r24
    169a:	a8 18       	sub	r10, r8
    169c:	fb 2d       	mov	r31, r11
    169e:	ff 77       	andi	r31, 0x7F	; 127
    16a0:	7f 2e       	mov	r7, r31
    16a2:	76 fe       	sbrs	r7, 6
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <vfprintf+0x2c4>
    16a6:	37 2d       	mov	r19, r7
    16a8:	3e 7f       	andi	r19, 0xFE	; 254
    16aa:	a5 14       	cp	r10, r5
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <vfprintf+0x2ca>
    16ae:	74 fe       	sbrs	r7, 4
    16b0:	0a c0       	rjmp	.+20     	; 0x16c6 <vfprintf+0x2ce>
    16b2:	72 fc       	sbrc	r7, 2
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0x2ce>
    16b6:	37 2d       	mov	r19, r7
    16b8:	3e 7e       	andi	r19, 0xEE	; 238
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x2ce>
    16bc:	ba 2c       	mov	r11, r10
    16be:	37 2d       	mov	r19, r7
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x2d0>
    16c2:	ba 2c       	mov	r11, r10
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <vfprintf+0x2d0>
    16c6:	b5 2c       	mov	r11, r5
    16c8:	34 ff       	sbrs	r19, 4
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <vfprintf+0x2ee>
    16cc:	fe 01       	movw	r30, r28
    16ce:	ea 0d       	add	r30, r10
    16d0:	f1 1d       	adc	r31, r1
    16d2:	80 81       	ld	r24, Z
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	11 f4       	brne	.+4      	; 0x16dc <vfprintf+0x2e4>
    16d8:	39 7e       	andi	r19, 0xE9	; 233
    16da:	09 c0       	rjmp	.+18     	; 0x16ee <vfprintf+0x2f6>
    16dc:	32 ff       	sbrs	r19, 2
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x2f4>
    16e0:	b3 94       	inc	r11
    16e2:	b3 94       	inc	r11
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <vfprintf+0x2f6>
    16e6:	83 2f       	mov	r24, r19
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x2f6>
    16ec:	b3 94       	inc	r11
    16ee:	33 fd       	sbrc	r19, 3
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <vfprintf+0x31e>
    16f2:	30 ff       	sbrs	r19, 0
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x30a>
    16f6:	5a 2c       	mov	r5, r10
    16f8:	b3 14       	cp	r11, r3
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <vfprintf+0x30a>
    16fc:	53 0c       	add	r5, r3
    16fe:	5b 18       	sub	r5, r11
    1700:	b3 2c       	mov	r11, r3
    1702:	b3 14       	cp	r11, r3
    1704:	60 f4       	brcc	.+24     	; 0x171e <vfprintf+0x326>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	3c 87       	std	Y+12, r19	; 0x0c
    170e:	78 d0       	rcall	.+240    	; 0x1800 <fputc>
    1710:	b3 94       	inc	r11
    1712:	3c 85       	ldd	r19, Y+12	; 0x0c
    1714:	f6 cf       	rjmp	.-20     	; 0x1702 <vfprintf+0x30a>
    1716:	b3 14       	cp	r11, r3
    1718:	10 f4       	brcc	.+4      	; 0x171e <vfprintf+0x326>
    171a:	3b 18       	sub	r3, r11
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <vfprintf+0x328>
    171e:	31 2c       	mov	r3, r1
    1720:	34 ff       	sbrs	r19, 4
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <vfprintf+0x34e>
    1724:	b7 01       	movw	r22, r14
    1726:	80 e3       	ldi	r24, 0x30	; 48
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	3c 87       	std	Y+12, r19	; 0x0c
    172c:	69 d0       	rcall	.+210    	; 0x1800 <fputc>
    172e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1730:	32 ff       	sbrs	r19, 2
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <vfprintf+0x368>
    1734:	31 fd       	sbrc	r19, 1
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x346>
    1738:	88 e7       	ldi	r24, 0x78	; 120
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x34a>
    173e:	88 e5       	ldi	r24, 0x58	; 88
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b7 01       	movw	r22, r14
    1744:	0c c0       	rjmp	.+24     	; 0x175e <vfprintf+0x366>
    1746:	83 2f       	mov	r24, r19
    1748:	86 78       	andi	r24, 0x86	; 134
    174a:	51 f0       	breq	.+20     	; 0x1760 <vfprintf+0x368>
    174c:	31 ff       	sbrs	r19, 1
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x35c>
    1750:	8b e2       	ldi	r24, 0x2B	; 43
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <vfprintf+0x35e>
    1754:	80 e2       	ldi	r24, 0x20	; 32
    1756:	37 fd       	sbrc	r19, 7
    1758:	8d e2       	ldi	r24, 0x2D	; 45
    175a:	b7 01       	movw	r22, r14
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	50 d0       	rcall	.+160    	; 0x1800 <fputc>
    1760:	a5 14       	cp	r10, r5
    1762:	30 f4       	brcc	.+12     	; 0x1770 <vfprintf+0x378>
    1764:	b7 01       	movw	r22, r14
    1766:	80 e3       	ldi	r24, 0x30	; 48
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	4a d0       	rcall	.+148    	; 0x1800 <fputc>
    176c:	5a 94       	dec	r5
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <vfprintf+0x368>
    1770:	aa 94       	dec	r10
    1772:	f4 01       	movw	r30, r8
    1774:	ea 0d       	add	r30, r10
    1776:	f1 1d       	adc	r31, r1
    1778:	80 81       	ld	r24, Z
    177a:	b7 01       	movw	r22, r14
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	40 d0       	rcall	.+128    	; 0x1800 <fputc>
    1780:	a1 10       	cpse	r10, r1
    1782:	f6 cf       	rjmp	.-20     	; 0x1770 <vfprintf+0x378>
    1784:	33 20       	and	r3, r3
    1786:	09 f4       	brne	.+2      	; 0x178a <vfprintf+0x392>
    1788:	5d ce       	rjmp	.-838    	; 0x1444 <vfprintf+0x4c>
    178a:	b7 01       	movw	r22, r14
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	37 d0       	rcall	.+110    	; 0x1800 <fputc>
    1792:	3a 94       	dec	r3
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <vfprintf+0x38c>
    1796:	f7 01       	movw	r30, r14
    1798:	86 81       	ldd	r24, Z+6	; 0x06
    179a:	97 81       	ldd	r25, Z+7	; 0x07
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x3aa>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	2c 96       	adiw	r28, 0x0c	; 12
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	7f 90       	pop	r7
    17c8:	6f 90       	pop	r6
    17ca:	5f 90       	pop	r5
    17cc:	4f 90       	pop	r4
    17ce:	3f 90       	pop	r3
    17d0:	2f 90       	pop	r2
    17d2:	08 95       	ret

000017d4 <strnlen_P>:
    17d4:	fc 01       	movw	r30, r24
    17d6:	05 90       	lpm	r0, Z+
    17d8:	61 50       	subi	r22, 0x01	; 1
    17da:	70 40       	sbci	r23, 0x00	; 0
    17dc:	01 10       	cpse	r0, r1
    17de:	d8 f7       	brcc	.-10     	; 0x17d6 <strnlen_P+0x2>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	8e 0f       	add	r24, r30
    17e6:	9f 1f       	adc	r25, r31
    17e8:	08 95       	ret

000017ea <strnlen>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	70 40       	sbci	r23, 0x00	; 0
    17f0:	01 90       	ld	r0, Z+
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <fputc>:
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	fb 01       	movw	r30, r22
    180a:	23 81       	ldd	r18, Z+3	; 0x03
    180c:	21 fd       	sbrc	r18, 1
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <fputc+0x16>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	9f ef       	ldi	r25, 0xFF	; 255
    1814:	28 c0       	rjmp	.+80     	; 0x1866 <fputc+0x66>
    1816:	22 ff       	sbrs	r18, 2
    1818:	16 c0       	rjmp	.+44     	; 0x1846 <fputc+0x46>
    181a:	46 81       	ldd	r20, Z+6	; 0x06
    181c:	57 81       	ldd	r21, Z+7	; 0x07
    181e:	24 81       	ldd	r18, Z+4	; 0x04
    1820:	35 81       	ldd	r19, Z+5	; 0x05
    1822:	42 17       	cp	r20, r18
    1824:	53 07       	cpc	r21, r19
    1826:	44 f4       	brge	.+16     	; 0x1838 <fputc+0x38>
    1828:	a0 81       	ld	r26, Z
    182a:	b1 81       	ldd	r27, Z+1	; 0x01
    182c:	9d 01       	movw	r18, r26
    182e:	2f 5f       	subi	r18, 0xFF	; 255
    1830:	3f 4f       	sbci	r19, 0xFF	; 255
    1832:	31 83       	std	Z+1, r19	; 0x01
    1834:	20 83       	st	Z, r18
    1836:	8c 93       	st	X, r24
    1838:	26 81       	ldd	r18, Z+6	; 0x06
    183a:	37 81       	ldd	r19, Z+7	; 0x07
    183c:	2f 5f       	subi	r18, 0xFF	; 255
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	37 83       	std	Z+7, r19	; 0x07
    1842:	26 83       	std	Z+6, r18	; 0x06
    1844:	10 c0       	rjmp	.+32     	; 0x1866 <fputc+0x66>
    1846:	eb 01       	movw	r28, r22
    1848:	09 2f       	mov	r16, r25
    184a:	18 2f       	mov	r17, r24
    184c:	00 84       	ldd	r0, Z+8	; 0x08
    184e:	f1 85       	ldd	r31, Z+9	; 0x09
    1850:	e0 2d       	mov	r30, r0
    1852:	19 95       	eicall
    1854:	89 2b       	or	r24, r25
    1856:	e1 f6       	brne	.-72     	; 0x1810 <fputc+0x10>
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
    185a:	9f 81       	ldd	r25, Y+7	; 0x07
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	9f 83       	std	Y+7, r25	; 0x07
    1860:	8e 83       	std	Y+6, r24	; 0x06
    1862:	81 2f       	mov	r24, r17
    1864:	90 2f       	mov	r25, r16
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <__ultoa_invert>:
    1870:	fa 01       	movw	r30, r20
    1872:	aa 27       	eor	r26, r26
    1874:	28 30       	cpi	r18, 0x08	; 8
    1876:	51 f1       	breq	.+84     	; 0x18cc <__ultoa_invert+0x5c>
    1878:	20 31       	cpi	r18, 0x10	; 16
    187a:	81 f1       	breq	.+96     	; 0x18dc <__ultoa_invert+0x6c>
    187c:	e8 94       	clt
    187e:	6f 93       	push	r22
    1880:	6e 7f       	andi	r22, 0xFE	; 254
    1882:	6e 5f       	subi	r22, 0xFE	; 254
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	8f 4f       	sbci	r24, 0xFF	; 255
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	af 4f       	sbci	r26, 0xFF	; 255
    188c:	b1 e0       	ldi	r27, 0x01	; 1
    188e:	3e d0       	rcall	.+124    	; 0x190c <__ultoa_invert+0x9c>
    1890:	b4 e0       	ldi	r27, 0x04	; 4
    1892:	3c d0       	rcall	.+120    	; 0x190c <__ultoa_invert+0x9c>
    1894:	67 0f       	add	r22, r23
    1896:	78 1f       	adc	r23, r24
    1898:	89 1f       	adc	r24, r25
    189a:	9a 1f       	adc	r25, r26
    189c:	a1 1d       	adc	r26, r1
    189e:	68 0f       	add	r22, r24
    18a0:	79 1f       	adc	r23, r25
    18a2:	8a 1f       	adc	r24, r26
    18a4:	91 1d       	adc	r25, r1
    18a6:	a1 1d       	adc	r26, r1
    18a8:	6a 0f       	add	r22, r26
    18aa:	71 1d       	adc	r23, r1
    18ac:	81 1d       	adc	r24, r1
    18ae:	91 1d       	adc	r25, r1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	20 d0       	rcall	.+64     	; 0x18f4 <__ultoa_invert+0x84>
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <__ultoa_invert+0x48>
    18b6:	68 94       	set
    18b8:	3f 91       	pop	r19
    18ba:	2a e0       	ldi	r18, 0x0A	; 10
    18bc:	26 9f       	mul	r18, r22
    18be:	11 24       	eor	r1, r1
    18c0:	30 19       	sub	r19, r0
    18c2:	30 5d       	subi	r19, 0xD0	; 208
    18c4:	31 93       	st	Z+, r19
    18c6:	de f6       	brtc	.-74     	; 0x187e <__ultoa_invert+0xe>
    18c8:	cf 01       	movw	r24, r30
    18ca:	08 95       	ret
    18cc:	46 2f       	mov	r20, r22
    18ce:	47 70       	andi	r20, 0x07	; 7
    18d0:	40 5d       	subi	r20, 0xD0	; 208
    18d2:	41 93       	st	Z+, r20
    18d4:	b3 e0       	ldi	r27, 0x03	; 3
    18d6:	0f d0       	rcall	.+30     	; 0x18f6 <__ultoa_invert+0x86>
    18d8:	c9 f7       	brne	.-14     	; 0x18cc <__ultoa_invert+0x5c>
    18da:	f6 cf       	rjmp	.-20     	; 0x18c8 <__ultoa_invert+0x58>
    18dc:	46 2f       	mov	r20, r22
    18de:	4f 70       	andi	r20, 0x0F	; 15
    18e0:	40 5d       	subi	r20, 0xD0	; 208
    18e2:	4a 33       	cpi	r20, 0x3A	; 58
    18e4:	18 f0       	brcs	.+6      	; 0x18ec <__ultoa_invert+0x7c>
    18e6:	49 5d       	subi	r20, 0xD9	; 217
    18e8:	31 fd       	sbrc	r19, 1
    18ea:	40 52       	subi	r20, 0x20	; 32
    18ec:	41 93       	st	Z+, r20
    18ee:	02 d0       	rcall	.+4      	; 0x18f4 <__ultoa_invert+0x84>
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <__ultoa_invert+0x6c>
    18f2:	ea cf       	rjmp	.-44     	; 0x18c8 <__ultoa_invert+0x58>
    18f4:	b4 e0       	ldi	r27, 0x04	; 4
    18f6:	a6 95       	lsr	r26
    18f8:	97 95       	ror	r25
    18fa:	87 95       	ror	r24
    18fc:	77 95       	ror	r23
    18fe:	67 95       	ror	r22
    1900:	ba 95       	dec	r27
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__ultoa_invert+0x86>
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	61 05       	cpc	r22, r1
    1908:	71 05       	cpc	r23, r1
    190a:	08 95       	ret
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	0a 2e       	mov	r0, r26
    1912:	06 94       	lsr	r0
    1914:	57 95       	ror	r21
    1916:	47 95       	ror	r20
    1918:	37 95       	ror	r19
    191a:	27 95       	ror	r18
    191c:	ba 95       	dec	r27
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__ultoa_invert+0xa2>
    1920:	62 0f       	add	r22, r18
    1922:	73 1f       	adc	r23, r19
    1924:	84 1f       	adc	r24, r20
    1926:	95 1f       	adc	r25, r21
    1928:	a0 1d       	adc	r26, r0
    192a:	08 95       	ret

0000192c <_exit>:
    192c:	f8 94       	cli

0000192e <__stop_program>:
    192e:	ff cf       	rjmp	.-2      	; 0x192e <__stop_program>
