
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000285  00800230  00800230  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff6  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000602  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d8  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001154  00000000  00000000  000033f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	67 c0       	rjmp	.+206    	; 0x124 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	ff c2       	rjmp	.+1534   	; 0x664 <__vector_25>
  66:	00 00       	nop
  68:	f9 c1       	rjmp	.+1010   	; 0x45c <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	14 c3       	rjmp	.+1576   	; 0x6ba <__vector_36>
  92:	00 00       	nop
  94:	24 c2       	rjmp	.+1096   	; 0x4de <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	21 c3       	rjmp	.+1602   	; 0x710 <__vector_51>
  ce:	00 00       	nop
  d0:	47 c2       	rjmp	.+1166   	; 0x560 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	46 c3       	rjmp	.+1676   	; 0x766 <__vector_54>
  da:	00 00       	nop
  dc:	82 c2       	rjmp	.+1284   	; 0x5e2 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 33       	cpi	r26, 0x30	; 48
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a0 e3       	ldi	r26, 0x30	; 48
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 3b       	cpi	r26, 0xB5	; 181
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	66 d0       	rcall	.+204    	; 0x1ec <main>
 120:	4d c3       	rjmp	.+1690   	; 0x7bc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_21>:
{
	return x_thread_id;
}

ISR(TIMER0_COMPA_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	absolute_tick_counter++;
 148:	80 91 5e 02 	lds	r24, 0x025E
 14c:	90 91 5f 02 	lds	r25, 0x025F
 150:	a0 91 60 02 	lds	r26, 0x0260
 154:	b0 91 61 02 	lds	r27, 0x0261
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 5e 02 	sts	0x025E, r24
 162:	90 93 5f 02 	sts	0x025F, r25
 166:	a0 93 60 02 	sts	0x0260, r26
 16a:	b0 93 61 02 	sts	0x0261, r27
 16e:	60 91 72 02 	lds	r22, 0x0272
	for (int i = 0; i < 7; i++)
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
		if (x_thread_delay[i] > 0)
		{
			x_thread_delay[i]--;
			if (x_thread_delay[i] == 0)
			{
				delay_status = delay_status & (~(0x1 << i));
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
ISR(TIMER0_COMPA_vect)
{
	absolute_tick_counter++;
	for (int i = 0; i < 7; i++)
	{
		if (x_thread_delay[i] > 0)
 17a:	fc 01       	movw	r30, r24
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 59       	subi	r30, 0x9E	; 158
 182:	fd 4f       	sbci	r31, 0xFD	; 253
 184:	20 81       	ld	r18, Z
 186:	31 81       	ldd	r19, Z+1	; 0x01
 188:	23 2b       	or	r18, r19
 18a:	c1 f0       	breq	.+48     	; 0x1bc <__vector_21+0x98>
		{
			x_thread_delay[i]--;
 18c:	fc 01       	movw	r30, r24
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ee 59       	subi	r30, 0x9E	; 158
 194:	fd 4f       	sbci	r31, 0xFD	; 253
 196:	20 81       	ld	r18, Z
 198:	31 81       	ldd	r19, Z+1	; 0x01
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	31 09       	sbc	r19, r1
 19e:	31 83       	std	Z+1, r19	; 0x01
 1a0:	20 83       	st	Z, r18
			if (x_thread_delay[i] == 0)
 1a2:	20 81       	ld	r18, Z
 1a4:	31 81       	ldd	r19, Z+1	; 0x01
 1a6:	23 2b       	or	r18, r19
 1a8:	49 f4       	brne	.+18     	; 0x1bc <__vector_21+0x98>
			{
				delay_status = delay_status & (~(0x1 << i));
 1aa:	9a 01       	movw	r18, r20
 1ac:	08 2e       	mov	r0, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__vector_21+0x90>
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <__vector_21+0x8c>
 1b8:	20 95       	com	r18
 1ba:	62 23       	and	r22, r18
}

ISR(TIMER0_COMPA_vect)
{
	absolute_tick_counter++;
	for (int i = 0; i < 7; i++)
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	87 30       	cpi	r24, 0x07	; 7
 1c0:	91 05       	cpc	r25, r1
 1c2:	d9 f6       	brne	.-74     	; 0x17a <__vector_21+0x56>
 1c4:	60 93 72 02 	sts	0x0272, r22
			{
				delay_status = delay_status & (~(0x1 << i));
			}
		}
	}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0b be       	out	0x3b, r0	; 59
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <main>:
#include "Serial.h"
#include "Queues.h"


int main(void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	1f 92       	push	r1
 1f2:	1f 92       	push	r1
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
	char putdata;
	
	//Serial_open(0, 9600, SERIAL_8N1);
	//Serial_write(0, data);
	//data = Serial_read(0);
	Q_create(8, array);
 1f8:	be 01       	movw	r22, r28
 1fa:	6f 5f       	subi	r22, 0xFF	; 255
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	ee d0       	rcall	.+476    	; 0x3e0 <Q_create>
	
    /* Replace with your application code */
    while (1) 
    {
		Q_getc(0, &putdata);
 204:	be 01       	movw	r22, r28
 206:	6e 5f       	subi	r22, 0xFE	; 254
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	78 d0       	rcall	.+240    	; 0x2fe <Q_getc>
		Q_putc(0, data);
 20e:	61 e6       	ldi	r22, 0x61	; 97
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	06 d0       	rcall	.+12     	; 0x220 <Q_putc>
		Q_getc(0, &putdata);
 214:	be 01       	movw	r22, r28
 216:	6e 5f       	subi	r22, 0xFE	; 254
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	70 d0       	rcall	.+224    	; 0x2fe <Q_getc>
		//Serial_write(0, data);
		//data = Serial_read(0);
    }
 21e:	f2 cf       	rjmp	.-28     	; 0x204 <main+0x18>

00000220 <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 224:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 1)
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	eb 58       	subi	r30, 0x8B	; 139
 236:	fd 4f       	sbci	r31, 0xFD	; 253
 238:	23 81       	ldd	r18, Z+3	; 0x03
 23a:	21 30       	cpi	r18, 0x01	; 1
 23c:	09 f4       	brne	.+2      	; 0x240 <Q_putc+0x20>
 23e:	58 c0       	rjmp	.+176    	; 0x2f0 <Q_putc+0xd0>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 240:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 242:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
 244:	fc 01       	movw	r30, r24
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	eb 58       	subi	r30, 0x8B	; 139
 254:	fd 4f       	sbci	r31, 0xFD	; 253
 256:	20 81       	ld	r18, Z
 258:	c6 81       	ldd	r28, Z+6	; 0x06
 25a:	d7 81       	ldd	r29, Z+7	; 0x07
 25c:	c2 0f       	add	r28, r18
 25e:	d1 1d       	adc	r29, r1
 260:	68 83       	st	Y, r22
			qcb->available += 1;
 262:	24 81       	ldd	r18, Z+4	; 0x04
 264:	35 81       	ldd	r19, Z+5	; 0x05
 266:	2f 5f       	subi	r18, 0xFF	; 255
 268:	3f 4f       	sbci	r19, 0xFF	; 255
 26a:	35 83       	std	Z+5, r19	; 0x05
 26c:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 2)
 26e:	23 81       	ldd	r18, Z+3	; 0x03
 270:	22 30       	cpi	r18, 0x02	; 2
 272:	51 f4       	brne	.+20     	; 0x288 <Q_putc+0x68>
			{
				qcb->flags = 0;
 274:	fc 01       	movw	r30, r24
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	eb 58       	subi	r30, 0x8B	; 139
 284:	fd 4f       	sbci	r31, 0xFD	; 253
 286:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
 288:	fc 01       	movw	r30, r24
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	eb 58       	subi	r30, 0x8B	; 139
 298:	fd 4f       	sbci	r31, 0xFD	; 253
 29a:	30 81       	ld	r19, Z
 29c:	22 81       	ldd	r18, Z+2	; 0x02
 29e:	63 2f       	mov	r22, r19
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	42 2f       	mov	r20, r18
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	64 23       	and	r22, r20
 2ac:	75 23       	and	r23, r21
 2ae:	41 81       	ldd	r20, Z+1	; 0x01
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	64 17       	cp	r22, r20
 2b4:	75 07       	cpc	r23, r21
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <Q_putc+0xb2>
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	fc 01       	movw	r30, r24
 2c6:	eb 58       	subi	r30, 0x8B	; 139
 2c8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ca:	3f 5f       	subi	r19, 0xFF	; 255
 2cc:	23 23       	and	r18, r19
 2ce:	20 83       	st	Z, r18
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <Q_putc+0xd4>
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	fc 01       	movw	r30, r24
 2e0:	eb 58       	subi	r30, 0x8B	; 139
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	3f 5f       	subi	r19, 0xFF	; 255
 2e6:	23 23       	and	r18, r19
 2e8:	20 83       	st	Z, r18
				qcb->flags = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	83 83       	std	Z+3, r24	; 0x03
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Q_putc+0xd4>
		}
		return 1;
	}
	else
	{
		return 0;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Q_putc+0xd8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2f4:	af bf       	out	0x3f, r26	; 63
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
			}
		}
		return 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
	QCB *qcb = &queues[qid];
 302:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 2)
 304:	fc 01       	movw	r30, r24
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	eb 58       	subi	r30, 0x8B	; 139
 314:	fd 4f       	sbci	r31, 0xFD	; 253
 316:	23 81       	ldd	r18, Z+3	; 0x03
 318:	22 30       	cpi	r18, 0x02	; 2
 31a:	09 f4       	brne	.+2      	; 0x31e <Q_getc+0x20>
 31c:	5a c0       	rjmp	.+180    	; 0x3d2 <Q_getc+0xd4>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 31e:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 320:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
 322:	fc 01       	movw	r30, r24
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	eb 58       	subi	r30, 0x8B	; 139
 332:	fd 4f       	sbci	r31, 0xFD	; 253
 334:	21 81       	ldd	r18, Z+1	; 0x01
 336:	c6 81       	ldd	r28, Z+6	; 0x06
 338:	d7 81       	ldd	r29, Z+7	; 0x07
 33a:	c2 0f       	add	r28, r18
 33c:	d1 1d       	adc	r29, r1
 33e:	28 81       	ld	r18, Y
 340:	eb 01       	movw	r28, r22
 342:	28 83       	st	Y, r18
			qcb->available -= 1;
 344:	24 81       	ldd	r18, Z+4	; 0x04
 346:	35 81       	ldd	r19, Z+5	; 0x05
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	31 09       	sbc	r19, r1
 34c:	35 83       	std	Z+5, r19	; 0x05
 34e:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 1)
 350:	23 81       	ldd	r18, Z+3	; 0x03
 352:	21 30       	cpi	r18, 0x01	; 1
 354:	51 f4       	brne	.+20     	; 0x36a <Q_getc+0x6c>
			{
				qcb->flags = 0;
 356:	fc 01       	movw	r30, r24
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	eb 58       	subi	r30, 0x8B	; 139
 366:	fd 4f       	sbci	r31, 0xFD	; 253
 368:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
 36a:	fc 01       	movw	r30, r24
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	eb 58       	subi	r30, 0x8B	; 139
 37a:	fd 4f       	sbci	r31, 0xFD	; 253
 37c:	31 81       	ldd	r19, Z+1	; 0x01
 37e:	22 81       	ldd	r18, Z+2	; 0x02
 380:	63 2f       	mov	r22, r19
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	42 2f       	mov	r20, r18
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	64 23       	and	r22, r20
 38e:	75 23       	and	r23, r21
 390:	40 81       	ld	r20, Z
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	64 17       	cp	r22, r20
 396:	75 07       	cpc	r23, r21
 398:	69 f0       	breq	.+26     	; 0x3b4 <Q_getc+0xb6>
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	fc 01       	movw	r30, r24
 3a8:	eb 58       	subi	r30, 0x8B	; 139
 3aa:	fd 4f       	sbci	r31, 0xFD	; 253
 3ac:	3f 5f       	subi	r19, 0xFF	; 255
 3ae:	23 23       	and	r18, r19
 3b0:	21 83       	std	Z+1, r18	; 0x01
 3b2:	11 c0       	rjmp	.+34     	; 0x3d6 <Q_getc+0xd8>
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	fc 01       	movw	r30, r24
 3c2:	eb 58       	subi	r30, 0x8B	; 139
 3c4:	fd 4f       	sbci	r31, 0xFD	; 253
 3c6:	3f 5f       	subi	r19, 0xFF	; 255
 3c8:	23 23       	and	r18, r19
 3ca:	21 83       	std	Z+1, r18	; 0x01
				qcb->flags = 2;
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	83 83       	std	Z+3, r24	; 0x03
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <Q_getc+0xd8>
			}
		}
		return 1;
	}
	return 0;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Q_getc+0xdc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3d6:	af bf       	out	0x3f, r26	; 63
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
			}
		}
		return 1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
 3e0:	9c 01       	movw	r18, r24
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	31 09       	sbc	r19, r1
 3e6:	2f 3f       	cpi	r18, 0xFF	; 255
 3e8:	31 05       	cpc	r19, r1
 3ea:	09 f0       	breq	.+2      	; 0x3ee <Q_create+0xe>
 3ec:	98 f5       	brcc	.+102    	; 0x454 <Q_create+0x74>
 3ee:	28 23       	and	r18, r24
 3f0:	39 23       	and	r19, r25
 3f2:	23 2b       	or	r18, r19
 3f4:	89 f5       	brne	.+98     	; 0x458 <Q_create+0x78>
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
 3f6:	20 91 30 02 	lds	r18, 0x0230
 3fa:	22 23       	and	r18, r18
 3fc:	41 f0       	breq	.+16     	; 0x40e <Q_create+0x2e>
 3fe:	e1 e3       	ldi	r30, 0x31	; 49
 400:	f2 e0       	ldi	r31, 0x02	; 2
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (occupied[i] == false)
 406:	41 91       	ld	r20, Z+
 408:	41 11       	cpse	r20, r1
 40a:	1d c0       	rjmp	.+58     	; 0x446 <Q_create+0x66>
 40c:	02 c0       	rjmp	.+4      	; 0x412 <Q_create+0x32>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
		{
			queues[i].in = 0;
 412:	f9 01       	movw	r30, r18
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	eb 58       	subi	r30, 0x8B	; 139
 422:	fd 4f       	sbci	r31, 0xFD	; 253
 424:	10 82       	st	Z, r1
			queues[i].out = 0;
 426:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
 428:	81 50       	subi	r24, 0x01	; 1
 42a:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
 430:	15 82       	std	Z+5, r1	; 0x05
 432:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
 434:	77 83       	std	Z+7, r23	; 0x07
 436:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
 438:	f9 01       	movw	r30, r18
 43a:	e0 5d       	subi	r30, 0xD0	; 208
 43c:	fd 4f       	sbci	r31, 0xFD	; 253
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
			return i;
 442:	82 2f       	mov	r24, r18
 444:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	28 30       	cpi	r18, 0x08	; 8
 44c:	31 05       	cpc	r19, r1
 44e:	d9 f6       	brne	.-74     	; 0x406 <Q_create+0x26>
			queues[i].pQ = pbuffer;
			occupied[i] = true;
			return i;
		}
	}
	return -1;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	08 95       	ret

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	08 95       	ret
 458:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
 45a:	08 95       	ret

0000045c <__vector_26>:
// 		}
// 	}
}

ISR(USART0_UDRE_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	1f 92       	push	r1
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
 48c:	be 01       	movw	r22, r28
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	80 91 09 02 	lds	r24, 0x0209
 496:	33 df       	rcall	.-410    	; 0x2fe <Q_getc>
 498:	88 23       	and	r24, r24
 49a:	21 f0       	breq	.+8      	; 0x4a4 <__vector_26+0x48>
	{
		UDR0 = data;
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	80 93 c6 00 	sts	0x00C6, r24
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1 << 5);
 4a4:	e0 91 00 02 	lds	r30, 0x0200
 4a8:	f0 91 01 02 	lds	r31, 0x0201
 4ac:	81 81       	ldd	r24, Z+1	; 0x01
 4ae:	8f 7d       	andi	r24, 0xDF	; 223
 4b0:	81 83       	std	Z+1, r24	; 0x01
	}
}
 4b2:	0f 90       	pop	r0
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0b be       	out	0x3b, r0	; 59
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <__vector_37>:

ISR(USART1_UDRE_vect)
{
 4de:	1f 92       	push	r1
 4e0:	0f 92       	push	r0
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	0f 92       	push	r0
 4e6:	11 24       	eor	r1, r1
 4e8:	0b b6       	in	r0, 0x3b	; 59
 4ea:	0f 92       	push	r0
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	1f 92       	push	r1
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
 50e:	be 01       	movw	r22, r28
 510:	6f 5f       	subi	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	80 91 13 02 	lds	r24, 0x0213
 518:	f2 de       	rcall	.-540    	; 0x2fe <Q_getc>
 51a:	88 23       	and	r24, r24
 51c:	21 f0       	breq	.+8      	; 0x526 <__vector_37+0x48>
	{
		UDR1 = data;
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	80 93 ce 00 	sts	0x00CE, r24
 524:	07 c0       	rjmp	.+14     	; 0x534 <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
 526:	e0 91 02 02 	lds	r30, 0x0202
 52a:	f0 91 03 02 	lds	r31, 0x0203
 52e:	81 81       	ldd	r24, Z+1	; 0x01
 530:	8f 7d       	andi	r24, 0xDF	; 223
 532:	81 83       	std	Z+1, r24	; 0x01
	}
}
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	7f 91       	pop	r23
 548:	6f 91       	pop	r22
 54a:	5f 91       	pop	r21
 54c:	4f 91       	pop	r20
 54e:	3f 91       	pop	r19
 550:	2f 91       	pop	r18
 552:	0f 90       	pop	r0
 554:	0b be       	out	0x3b, r0	; 59
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_52>:

ISR(USART2_UDRE_vect)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	0b b6       	in	r0, 0x3b	; 59
 56c:	0f 92       	push	r0
 56e:	2f 93       	push	r18
 570:	3f 93       	push	r19
 572:	4f 93       	push	r20
 574:	5f 93       	push	r21
 576:	6f 93       	push	r22
 578:	7f 93       	push	r23
 57a:	8f 93       	push	r24
 57c:	9f 93       	push	r25
 57e:	af 93       	push	r26
 580:	bf 93       	push	r27
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	1f 92       	push	r1
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
 590:	be 01       	movw	r22, r28
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	80 91 1d 02 	lds	r24, 0x021D
 59a:	b1 de       	rcall	.-670    	; 0x2fe <Q_getc>
 59c:	88 23       	and	r24, r24
 59e:	21 f0       	breq	.+8      	; 0x5a8 <__vector_52+0x48>
	{
		UDR2 = data;
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	80 93 d6 00 	sts	0x00D6, r24
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
 5a8:	e0 91 04 02 	lds	r30, 0x0204
 5ac:	f0 91 05 02 	lds	r31, 0x0205
 5b0:	81 81       	ldd	r24, Z+1	; 0x01
 5b2:	8f 7d       	andi	r24, 0xDF	; 223
 5b4:	81 83       	std	Z+1, r24	; 0x01
	}
}
 5b6:	0f 90       	pop	r0
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0b be       	out	0x3b, r0	; 59
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_55>:

ISR(USART3_UDRE_vect)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	0b b6       	in	r0, 0x3b	; 59
 5ee:	0f 92       	push	r0
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	1f 92       	push	r1
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
 612:	be 01       	movw	r22, r28
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	80 91 27 02 	lds	r24, 0x0227
 61c:	70 de       	rcall	.-800    	; 0x2fe <Q_getc>
 61e:	88 23       	and	r24, r24
 620:	21 f0       	breq	.+8      	; 0x62a <__vector_55+0x48>
	{
		UDR3 = data;
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	80 93 36 01 	sts	0x0136, r24
 628:	07 c0       	rjmp	.+14     	; 0x638 <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
 62a:	e0 91 06 02 	lds	r30, 0x0206
 62e:	f0 91 07 02 	lds	r31, 0x0207
 632:	81 81       	ldd	r24, Z+1	; 0x01
 634:	8f 7d       	andi	r24, 0xDF	; 223
 636:	81 83       	std	Z+1, r24	; 0x01
	}
}
 638:	0f 90       	pop	r0
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0b be       	out	0x3b, r0	; 59
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_25>:

ISR(USART0_RX_vect)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	0b b6       	in	r0, 0x3b	; 59
 670:	0f 92       	push	r0
 672:	2f 93       	push	r18
 674:	3f 93       	push	r19
 676:	4f 93       	push	r20
 678:	5f 93       	push	r21
 67a:	6f 93       	push	r22
 67c:	7f 93       	push	r23
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	af 93       	push	r26
 684:	bf 93       	push	r27
 686:	ef 93       	push	r30
 688:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
 68a:	60 91 c6 00 	lds	r22, 0x00C6
 68e:	80 91 08 02 	lds	r24, 0x0208
 692:	c6 dd       	rcall	.-1140   	; 0x220 <Q_putc>
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0b be       	out	0x3b, r0	; 59
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_36>:

ISR(USART1_RX_vect)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	0b b6       	in	r0, 0x3b	; 59
 6c6:	0f 92       	push	r0
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
 6e0:	60 91 ce 00 	lds	r22, 0x00CE
 6e4:	80 91 12 02 	lds	r24, 0x0212
 6e8:	9b dd       	rcall	.-1226   	; 0x220 <Q_putc>
}
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0b be       	out	0x3b, r0	; 59
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <__vector_51>:

ISR(USART2_RX_vect)
{
 710:	1f 92       	push	r1
 712:	0f 92       	push	r0
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	0f 92       	push	r0
 718:	11 24       	eor	r1, r1
 71a:	0b b6       	in	r0, 0x3b	; 59
 71c:	0f 92       	push	r0
 71e:	2f 93       	push	r18
 720:	3f 93       	push	r19
 722:	4f 93       	push	r20
 724:	5f 93       	push	r21
 726:	6f 93       	push	r22
 728:	7f 93       	push	r23
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	ef 93       	push	r30
 734:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
 736:	60 91 d6 00 	lds	r22, 0x00D6
 73a:	80 91 1c 02 	lds	r24, 0x021C
 73e:	70 dd       	rcall	.-1312   	; 0x220 <Q_putc>
}
 740:	ff 91       	pop	r31
 742:	ef 91       	pop	r30
 744:	bf 91       	pop	r27
 746:	af 91       	pop	r26
 748:	9f 91       	pop	r25
 74a:	8f 91       	pop	r24
 74c:	7f 91       	pop	r23
 74e:	6f 91       	pop	r22
 750:	5f 91       	pop	r21
 752:	4f 91       	pop	r20
 754:	3f 91       	pop	r19
 756:	2f 91       	pop	r18
 758:	0f 90       	pop	r0
 75a:	0b be       	out	0x3b, r0	; 59
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0f 90       	pop	r0
 762:	1f 90       	pop	r1
 764:	18 95       	reti

00000766 <__vector_54>:

ISR(USART3_RX_vect)
{
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	0b b6       	in	r0, 0x3b	; 59
 772:	0f 92       	push	r0
 774:	2f 93       	push	r18
 776:	3f 93       	push	r19
 778:	4f 93       	push	r20
 77a:	5f 93       	push	r21
 77c:	6f 93       	push	r22
 77e:	7f 93       	push	r23
 780:	8f 93       	push	r24
 782:	9f 93       	push	r25
 784:	af 93       	push	r26
 786:	bf 93       	push	r27
 788:	ef 93       	push	r30
 78a:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
 78c:	60 91 36 01 	lds	r22, 0x0136
 790:	80 91 26 02 	lds	r24, 0x0226
 794:	45 dd       	rcall	.-1398   	; 0x220 <Q_putc>
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0b be       	out	0x3b, r0	; 59
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
