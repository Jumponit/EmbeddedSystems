
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024e  00800200  00001920  000019b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a87  0080044e  0080044e  00001c02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc0  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3b  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000159e  00000000  00000000  000046bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  00005c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001afa  00000000  00000000  00006a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000084ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c1       	rjmp	.+850    	; 0x3a8 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_25>
      68:	8b c7       	rjmp	.+3862   	; 0xf80 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_36>
      94:	b6 c7       	rjmp	.+3948   	; 0x1002 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__vector_51>
      d0:	d9 c7       	rjmp	.+4018   	; 0x1084 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_54>
      dc:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_55>
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e2       	ldi	r30, 0x20	; 32
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 34       	cpi	r26, 0x4E	; 78
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	ae e4       	ldi	r26, 0x4E	; 78
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 3d       	cpi	r26, 0xD5	; 213
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	65 d4       	rcall	.+2250   	; 0x9ea <main>
     120:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
     126:	2f 92       	push	r2
		push  r3
     128:	3f 92       	push	r3
		push  r4
     12a:	4f 92       	push	r4
		push  r5
     12c:	5f 92       	push	r5
		push  r6
     12e:	6f 92       	push	r6
		push  r7
     130:	7f 92       	push	r7
		push  r8
     132:	8f 92       	push	r8
		push  r9
     134:	9f 92       	push	r9
		push  r10
     136:	af 92       	push	r10
		push  r11
     138:	bf 92       	push	r11
		push  r12
     13a:	cf 92       	push	r12
		push  r13
     13c:	df 92       	push	r13
		push  r14
     13e:	ef 92       	push	r14
		push  r15
     140:	ff 92       	push	r15
		push  r16
     142:	0f 93       	push	r16
		push  r17
     144:	1f 93       	push	r17
		push  r28
     146:	cf 93       	push	r28
		push  r29
     148:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
     14a:	20 91 5b 04 	lds	r18, 0x045B
		lds   r19,x_thread_mask
     14e:	30 91 8f 0c 	lds	r19, 0x0C8F

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
     152:	f8 94       	cli
		in		r14,SPL
     154:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
     156:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
     158:	78 94       	sei


		ldi		r30,lo8(stack)
     15a:	ed e5       	ldi	r30, 0x5D	; 93
		ldi		r31,hi8(stack)
     15c:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r18
     15e:	22 0f       	add	r18, r18
		lsl		r18
     160:	22 0f       	add	r18, r18
		add		r30,r18
     162:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
     164:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
     166:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
     168:	f0 82       	st	Z, r15

0000016a <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
     16a:	20 91 8e 0c 	lds	r18, 0x0C8E
		lds		r19,x_delay_status
     16e:	30 91 5c 04 	lds	r19, 0x045C
		lds		r20,x_suspend_status
     172:	40 91 7d 04 	lds	r20, 0x047D
		or		r18,r19
     176:	23 2b       	or	r18, r19
		or		r18,r20
     178:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
     17a:	30 91 5b 04 	lds	r19, 0x045B
		lds		r20, x_thread_mask
     17e:	40 91 8f 0c 	lds	r20, 0x0C8F
		ldi		r22,NUM_THREADS		;max number of threads
     182:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
     184:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
     186:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
     188:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
     18a:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
     18c:	08 f4       	brcc	.+2      	; 0x190 <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
     18e:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
     190:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
     192:	42 23       	and	r20, r18
		breq	restore				;break out if READY
     194:	19 f0       	breq	.+6      	; 0x19c <restore>
		dec		r22					;decrement thread count
     196:	6a 95       	dec	r22
		brne	1b					;back to test next thread
     198:	b1 f7       	brne	.-20     	; 0x186 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <x_schedule>

0000019c <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
     19c:	30 93 5b 04 	sts	0x045B, r19
		sts		x_thread_mask,r23
     1a0:	70 93 8f 0c 	sts	0x0C8F, r23

		ldi		r30,lo8(stack)
     1a4:	ed e5       	ldi	r30, 0x5D	; 93
		ldi		r31,hi8(stack)
     1a6:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r19
     1a8:	33 0f       	add	r19, r19
		lsl		r19
     1aa:	33 0f       	add	r19, r19
		add		r30,r19
     1ac:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
     1ae:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
     1b0:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
     1b2:	30 81       	ld	r19, Z
		
		cli
     1b4:	f8 94       	cli
		out		SPL,r18		;restore SP
     1b6:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
     1b8:	3e bf       	out	0x3e, r19	; 62
		sei
     1ba:	78 94       	sei


		// Restore registers
		pop		r29
     1bc:	df 91       	pop	r29
		pop		r28
     1be:	cf 91       	pop	r28
		pop		r17
     1c0:	1f 91       	pop	r17
		pop		r16
     1c2:	0f 91       	pop	r16
		pop		r15
     1c4:	ff 90       	pop	r15
		pop		r14
     1c6:	ef 90       	pop	r14
		pop		r13
     1c8:	df 90       	pop	r13
		pop		r12
     1ca:	cf 90       	pop	r12
		pop		r11
     1cc:	bf 90       	pop	r11
		pop		r10
     1ce:	af 90       	pop	r10
		pop		r9
     1d0:	9f 90       	pop	r9
		pop		r8
     1d2:	8f 90       	pop	r8
		pop		r7
     1d4:	7f 90       	pop	r7
		pop		r6
     1d6:	6f 90       	pop	r6
		pop		r5
     1d8:	5f 90       	pop	r5
		pop		r4
     1da:	4f 90       	pop	r4
		pop		r3
     1dc:	3f 90       	pop	r3
		pop		r2
     1de:	2f 90       	pop	r2

		// Return to next thread
		ret
     1e0:	08 95       	ret

000001e2 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
		ldi r31,hi8(bitmask8_table)
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
     1e6:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
     1e8:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
     1ea:	84 91       	lpm	r24, Z
		ret
     1ec:	08 95       	ret

000001ee <bitmask8_table>:
     1ee:	01 02       	muls	r16, r17
     1f0:	04 08       	sbc	r0, r4
     1f2:	10 20       	and	r1, r0
     1f4:	40 80       	ld	r4, Z

000001f6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
     1f6:	68 2f       	mov	r22, r24
		or  r22,r25
     1f8:	69 2b       	or	r22, r25
		nop
     1fa:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
     1fc:	31 f0       	breq	.+12     	; 0x20a <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
     1fe:	05 d0       	rcall	.+10     	; 0x20a <delay_usec+0x14>
		rjmp	3f      // 2 cycles
     200:	00 c0       	rjmp	.+0      	; 0x202 <delay_usec+0xc>
3:	
		nop		// 1 cycle
     202:	00 00       	nop
		sbiw	r24,1   // 2 cycles
     204:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
     206:	d9 f7       	brne	.-10     	; 0x1fe <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
     208:	00 00       	nop
1:
     20a:	08 95       	ret

0000020c <x_new>:
   long val;
   ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
      val = x_system_counter;
   }
   return val;
}
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	c8 2f       	mov	r28, r24
     212:	d4 2f       	mov	r29, r20
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	dc 01       	movw	r26, r24
     218:	aa 0f       	add	r26, r26
     21a:	bb 1f       	adc	r27, r27
     21c:	aa 0f       	add	r26, r26
     21e:	bb 1f       	adc	r27, r27
     220:	ad 01       	movw	r20, r26
     222:	43 5a       	subi	r20, 0xA3	; 163
     224:	5b 4f       	sbci	r21, 0xFB	; 251
     226:	da 01       	movw	r26, r20
     228:	12 96       	adiw	r26, 0x02	; 2
     22a:	ed 91       	ld	r30, X+
     22c:	fc 91       	ld	r31, X
     22e:	13 97       	sbiw	r26, 0x03	; 3
     230:	60 83       	st	Z, r22
     232:	9f 01       	movw	r18, r30
     234:	21 50       	subi	r18, 0x01	; 1
     236:	31 09       	sbc	r19, r1
     238:	d9 01       	movw	r26, r18
     23a:	7c 93       	st	X, r23
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	31 09       	sbc	r19, r1
     240:	d9 01       	movw	r26, r18
     242:	1c 92       	st	X, r1
     244:	75 97       	sbiw	r30, 0x15	; 21
     246:	da 01       	movw	r26, r20
     248:	ed 93       	st	X+, r30
     24a:	fc 93       	st	X, r31
     24c:	ca df       	rcall	.-108    	; 0x1e2 <bit2mask8>
     24e:	dd 23       	and	r29, r29
     250:	41 f0       	breq	.+16     	; 0x262 <x_new+0x56>
     252:	98 2f       	mov	r25, r24
     254:	90 95       	com	r25
     256:	80 91 8e 0c 	lds	r24, 0x0C8E
     25a:	98 23       	and	r25, r24
     25c:	90 93 8e 0c 	sts	0x0C8E, r25
     260:	05 c0       	rjmp	.+10     	; 0x26c <x_new+0x60>
     262:	90 91 8e 0c 	lds	r25, 0x0C8E
     266:	98 2b       	or	r25, r24
     268:	90 93 8e 0c 	sts	0x0C8E, r25
     26c:	80 91 5b 04 	lds	r24, 0x045B
     270:	c8 13       	cpse	r28, r24
     272:	01 c0       	rjmp	.+2      	; 0x276 <x_new+0x6a>
     274:	7a df       	rcall	.-268    	; 0x16a <x_schedule>
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <init_System_Timer>:
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	84 bd       	out	0x24, r24	; 36
     280:	9a ef       	ldi	r25, 0xFA	; 250
     282:	97 bd       	out	0x27, r25	; 39
     284:	80 93 6e 00 	sts	0x006E, r24
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	85 bd       	out	0x25, r24	; 37
     28c:	08 95       	ret

0000028e <x_init>:
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	f8 94       	cli
     294:	8e ef       	ldi	r24, 0xFE	; 254
     296:	80 93 8e 0c 	sts	0x0C8E, r24
     29a:	10 92 7d 04 	sts	0x047D, r1
     29e:	10 92 5c 04 	sts	0x045C, r1
     2a2:	10 92 5b 04 	sts	0x045B, r1
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 8f 0c 	sts	0x0C8F, r24
     2ac:	cd e5       	ldi	r28, 0x5D	; 93
     2ae:	d4 e0       	ldi	r29, 0x04	; 4
     2b0:	8d e7       	ldi	r24, 0x7D	; 125
     2b2:	95 e0       	ldi	r25, 0x05	; 5
     2b4:	99 83       	std	Y+1, r25	; 0x01
     2b6:	88 83       	st	Y, r24
     2b8:	9b 83       	std	Y+3, r25	; 0x03
     2ba:	8a 83       	std	Y+2, r24	; 0x02
     2bc:	8d e7       	ldi	r24, 0x7D	; 125
     2be:	96 e0       	ldi	r25, 0x06	; 6
     2c0:	9d 83       	std	Y+5, r25	; 0x05
     2c2:	8c 83       	std	Y+4, r24	; 0x04
     2c4:	9f 83       	std	Y+7, r25	; 0x07
     2c6:	8e 83       	std	Y+6, r24	; 0x06
     2c8:	8d e7       	ldi	r24, 0x7D	; 125
     2ca:	97 e0       	ldi	r25, 0x07	; 7
     2cc:	99 87       	std	Y+9, r25	; 0x09
     2ce:	88 87       	std	Y+8, r24	; 0x08
     2d0:	9b 87       	std	Y+11, r25	; 0x0b
     2d2:	8a 87       	std	Y+10, r24	; 0x0a
     2d4:	8d e7       	ldi	r24, 0x7D	; 125
     2d6:	98 e0       	ldi	r25, 0x08	; 8
     2d8:	9d 87       	std	Y+13, r25	; 0x0d
     2da:	8c 87       	std	Y+12, r24	; 0x0c
     2dc:	9f 87       	std	Y+15, r25	; 0x0f
     2de:	8e 87       	std	Y+14, r24	; 0x0e
     2e0:	8d e7       	ldi	r24, 0x7D	; 125
     2e2:	99 e0       	ldi	r25, 0x09	; 9
     2e4:	99 8b       	std	Y+17, r25	; 0x11
     2e6:	88 8b       	std	Y+16, r24	; 0x10
     2e8:	9b 8b       	std	Y+19, r25	; 0x13
     2ea:	8a 8b       	std	Y+18, r24	; 0x12
     2ec:	8d e7       	ldi	r24, 0x7D	; 125
     2ee:	9a e0       	ldi	r25, 0x0A	; 10
     2f0:	9d 8b       	std	Y+21, r25	; 0x15
     2f2:	8c 8b       	std	Y+20, r24	; 0x14
     2f4:	9f 8b       	std	Y+23, r25	; 0x17
     2f6:	8e 8b       	std	Y+22, r24	; 0x16
     2f8:	8d e7       	ldi	r24, 0x7D	; 125
     2fa:	9b e0       	ldi	r25, 0x0B	; 11
     2fc:	99 8f       	std	Y+25, r25	; 0x19
     2fe:	88 8f       	std	Y+24, r24	; 0x18
     300:	9b 8f       	std	Y+27, r25	; 0x1b
     302:	8a 8f       	std	Y+26, r24	; 0x1a
     304:	8d e7       	ldi	r24, 0x7D	; 125
     306:	9c e0       	ldi	r25, 0x0C	; 12
     308:	9d 8f       	std	Y+29, r25	; 0x1d
     30a:	8c 8f       	std	Y+28, r24	; 0x1c
     30c:	9f 8f       	std	Y+31, r25	; 0x1f
     30e:	8e 8f       	std	Y+30, r24	; 0x1e
     310:	8a ea       	ldi	r24, 0xAA	; 170
     312:	80 93 7e 04 	sts	0x047E, r24
     316:	80 93 7e 05 	sts	0x057E, r24
     31a:	80 93 7e 06 	sts	0x067E, r24
     31e:	80 93 7e 07 	sts	0x077E, r24
     322:	80 93 7e 08 	sts	0x087E, r24
     326:	80 93 7e 09 	sts	0x097E, r24
     32a:	80 93 7e 0a 	sts	0x0A7E, r24
     32e:	80 93 7e 0b 	sts	0x0B7E, r24
     332:	a4 df       	rcall	.-184    	; 0x27c <init_System_Timer>
     334:	ed b7       	in	r30, 0x3d	; 61
     336:	fe b7       	in	r31, 0x3e	; 62
     338:	a8 81       	ld	r26, Y
     33a:	b9 81       	ldd	r27, Y+1	; 0x01
     33c:	85 81       	ldd	r24, Z+5	; 0x05
     33e:	8c 93       	st	X, r24
     340:	a8 81       	ld	r26, Y
     342:	b9 81       	ldd	r27, Y+1	; 0x01
     344:	84 81       	ldd	r24, Z+4	; 0x04
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	8c 93       	st	X, r24
     34a:	a8 81       	ld	r26, Y
     34c:	b9 81       	ldd	r27, Y+1	; 0x01
     34e:	83 81       	ldd	r24, Z+3	; 0x03
     350:	12 97       	sbiw	r26, 0x02	; 2
     352:	8c 93       	st	X, r24
     354:	a8 81       	ld	r26, Y
     356:	b9 81       	ldd	r27, Y+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	13 97       	sbiw	r26, 0x03	; 3
     35c:	8c 93       	st	X, r24
     35e:	88 81       	ld	r24, Y
     360:	99 81       	ldd	r25, Y+1	; 0x01
     362:	21 81       	ldd	r18, Z+1	; 0x01
     364:	fc 01       	movw	r30, r24
     366:	34 97       	sbiw	r30, 0x04	; 4
     368:	20 83       	st	Z, r18
     36a:	88 81       	ld	r24, Y
     36c:	99 81       	ldd	r25, Y+1	; 0x01
     36e:	05 97       	sbiw	r24, 0x05	; 5
     370:	9e bf       	out	0x3e, r25	; 62
     372:	8d bf       	out	0x3d, r24	; 61
     374:	78 94       	sei
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <x_delay>:
     37c:	9c 01       	movw	r18, r24
     37e:	9f b7       	in	r25, 0x3f	; 63
     380:	f8 94       	cli
     382:	e0 91 5b 04 	lds	r30, 0x045B
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e2 58       	subi	r30, 0x82	; 130
     38e:	f3 4f       	sbci	r31, 0xF3	; 243
     390:	31 83       	std	Z+1, r19	; 0x01
     392:	20 83       	st	Z, r18
     394:	20 91 5c 04 	lds	r18, 0x045C
     398:	80 91 8f 0c 	lds	r24, 0x0C8F
     39c:	82 2b       	or	r24, r18
     39e:	80 93 5c 04 	sts	0x045C, r24
     3a2:	9f bf       	out	0x3f, r25	; 63
     3a4:	c0 ce       	rjmp	.-640    	; 0x126 <x_yield>
     3a6:	08 95       	ret

000003a8 <__vector_21>:
                zero. If a thread is delayed and its counter reaches zero, then it
                is made READY and may be scheduled to run.

----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMPA_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
     3c2:	af 93       	push	r26
     3c4:	bf 93       	push	r27
     3c6:	ef 93       	push	r30
     3c8:	ff 93       	push	r31

   // Increment system counter
   x_system_counter++;
     3ca:	80 91 4e 04 	lds	r24, 0x044E
     3ce:	90 91 4f 04 	lds	r25, 0x044F
     3d2:	a0 91 50 04 	lds	r26, 0x0450
     3d6:	b0 91 51 04 	lds	r27, 0x0451
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	a1 1d       	adc	r26, r1
     3de:	b1 1d       	adc	r27, r1
     3e0:	80 93 4e 04 	sts	0x044E, r24
     3e4:	90 93 4f 04 	sts	0x044F, r25
     3e8:	a0 93 50 04 	sts	0x0450, r26
     3ec:	b0 93 51 04 	sts	0x0451, r27
     3f0:	30 91 5c 04 	lds	r19, 0x045C
     3f4:	ee e7       	ldi	r30, 0x7E	; 126
     3f6:	fc e0       	ldi	r31, 0x0C	; 12
     3f8:	4e e8       	ldi	r20, 0x8E	; 142
     3fa:	5c e0       	ldi	r21, 0x0C	; 12

   char msk = 0x01;  // start with thread 0
     3fc:	21 e0       	ldi	r18, 0x01	; 1

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
      (*pdelay)--;
     3fe:	80 81       	ld	r24, Z
     400:	91 81       	ldd	r25, Z+1	; 0x01
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	81 93       	st	Z+, r24
     406:	91 93       	st	Z+, r25
      if(*pdelay == 0){
     408:	89 2b       	or	r24, r25
     40a:	19 f4       	brne	.+6      	; 0x412 <__vector_21+0x6a>
         x_delay_status &= ~msk;
     40c:	82 2f       	mov	r24, r18
     40e:	80 95       	com	r24
     410:	38 23       	and	r19, r24
      }
      msk <<= 1;
     412:	22 0f       	add	r18, r18

   char msk = 0x01;  // start with thread 0

   unsigned int *pdelay = x_thread_delay;
   //decrement delays
   for(char i = 0; i < NUM_THREADS; i++){
     414:	e4 17       	cp	r30, r20
     416:	f5 07       	cpc	r31, r21
     418:	91 f7       	brne	.-28     	; 0x3fe <__vector_21+0x56>
     41a:	30 93 5c 04 	sts	0x045C, r19
      }
      msk <<= 1;
      pdelay++;
   }
   
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0b be       	out	0x3b, r0	; 59
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
     440:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
     442:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
     444:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
     446:	8f ed       	ldi	r24, 0xDF	; 223
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	d5 de       	rcall	.-598    	; 0x1f6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
     44c:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     44e:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
     450:	85 e4       	ldi	r24, 0x45	; 69
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	d0 de       	rcall	.-608    	; 0x1f6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     456:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
     458:	85 ee       	ldi	r24, 0xE5	; 229
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	cc de       	rcall	.-616    	; 0x1f6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     45e:	c2 95       	swap	r28
     460:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	8c 27       	eor	r24, r28
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
     46a:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     46c:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
     46e:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     470:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
     472:	8e e0       	ldi	r24, 0x0E	; 14
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	bf de       	rcall	.-642    	; 0x1f6 <delay_usec>
	
	return(PINE & (1 << PE4));
     478:	8c b1       	in	r24, 0x0c	; 12
}
     47a:	80 71       	andi	r24, 0x10	; 16
     47c:	08 95       	ret

0000047e <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
     47e:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     480:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	09 f4       	brne	.+2      	; 0x488 <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
     486:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
     488:	8b e3       	ldi	r24, 0x3B	; 59
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	b4 de       	rcall	.-664    	; 0x1f6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
     48e:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     490:	6c 98       	cbi	0x0d, 4	; 13
     492:	08 95       	ret

00000494 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	c0 e0       	ldi	r28, 0x00	; 0
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
     4a2:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4a4:	ee 24       	eor	r14, r14
     4a6:	e3 94       	inc	r14
     4a8:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
     4aa:	df df       	rcall	.-66     	; 0x46a <ow_read_bit>
     4ac:	88 23       	and	r24, r24
     4ae:	41 f0       	breq	.+16     	; 0x4c0 <ow_read_byte+0x2c>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4b0:	c7 01       	movw	r24, r14
     4b2:	0c 2e       	mov	r0, r28
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <ow_read_byte+0x26>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <ow_read_byte+0x22>
     4be:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
     4c0:	83 e1       	ldi	r24, 0x13	; 19
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	98 de       	rcall	.-720    	; 0x1f6 <delay_usec>
     4c6:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
     4c8:	c8 30       	cpi	r28, 0x08	; 8
     4ca:	d1 05       	cpc	r29, r1
     4cc:	71 f7       	brne	.-36     	; 0x4aa <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
     4ce:	81 2f       	mov	r24, r17
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	c0 e0       	ldi	r28, 0x00	; 0
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
     4e8:	08 2f       	mov	r16, r24
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	c8 01       	movw	r24, r16
     4ee:	0c 2e       	mov	r0, r28
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <ow_write_byte+0x1a>
     4f2:	95 95       	asr	r25
     4f4:	87 95       	ror	r24
     4f6:	0a 94       	dec	r0
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
     4fa:	81 70       	andi	r24, 0x01	; 1
     4fc:	c0 df       	rcall	.-128    	; 0x47e <ow_write_bit>
     4fe:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
     500:	c8 30       	cpi	r28, 0x08	; 8
     502:	d1 05       	cpc	r29, r1
     504:	99 f7       	brne	.-26     	; 0x4ec <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     506:	87 e7       	ldi	r24, 0x77	; 119
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	75 de       	rcall	.-790    	; 0x1f6 <delay_usec>
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	2a 97       	sbiw	r28, 0x0a	; 10
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
	char get[10];
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	//char temp_f;
	ow_reset();
     532:	86 df       	rcall	.-244    	; 0x440 <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
     534:	8c ec       	ldi	r24, 0xCC	; 204
     536:	d2 df       	rcall	.-92     	; 0x4dc <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
     538:	84 e4       	ldi	r24, 0x44	; 68
     53a:	d0 df       	rcall	.-96     	; 0x4dc <ow_write_byte>
	delay_usec(119); //wait 120us
     53c:	87 e7       	ldi	r24, 0x77	; 119
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	5a de       	rcall	.-844    	; 0x1f6 <delay_usec>
	ow_reset();
     542:	7e df       	rcall	.-260    	; 0x440 <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
     544:	8c ec       	ldi	r24, 0xCC	; 204
     546:	ca df       	rcall	.-108    	; 0x4dc <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
     548:	8e eb       	ldi	r24, 0xBE	; 190
     54a:	c8 df       	rcall	.-112    	; 0x4dc <ow_write_byte>
     54c:	8e 01       	movw	r16, r28
     54e:	0f 5f       	subi	r16, 0xFF	; 255
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	7e 01       	movw	r14, r28
     554:	8a e0       	ldi	r24, 0x0A	; 10
     556:	e8 0e       	add	r14, r24
     558:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
     55a:	9c df       	rcall	.-200    	; 0x494 <ow_read_byte>
     55c:	f8 01       	movw	r30, r16
     55e:	81 93       	st	Z+, r24
     560:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
     562:	ee 15       	cp	r30, r14
     564:	ff 05       	cpc	r31, r15
     566:	c9 f7       	brne	.-14     	; 0x55a <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
     568:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
     56a:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
     56c:	91 38       	cpi	r25, 0x81	; 129
     56e:	40 f4       	brcc	.+16     	; 0x580 <ow_read_temperature+0x6a>
     570:	86 95       	lsr	r24
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     572:	99 23       	and	r25, r25
     574:	1c f4       	brge	.+6      	; 0x57c <ow_read_temperature+0x66>
     576:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
     578:	86 95       	lsr	r24
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
     57a:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	03 c0       	rjmp	.+6      	; 0x586 <ow_read_temperature+0x70>
	}
	temp_msb = get[1]; // Sign byte + lsbit
	temp_lsb = get[0]; // Temp data plus lsb
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     580:	99 23       	and	r25, r25
     582:	e4 f7       	brge	.-8      	; 0x57c <ow_read_temperature+0x66>
     584:	f8 cf       	rjmp	.-16     	; 0x576 <ow_read_temperature+0x60>
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
     586:	2a 96       	adiw	r28, 0x0a	; 10
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	08 95       	ret

000005a0 <io_controller>:
volatile int timeout = 60;

/*
 * Handles serial I/O
 */
void io_controller(void) {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	cb 54       	subi	r28, 0x4B	; 75
     5aa:	d1 09       	sbc	r29, r1
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
	Serial_open(0,19200,SERIAL_8N1);
     5b6:	26 e0       	ldi	r18, 0x06	; 6
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	5b e4       	ldi	r21, 0x4B	; 75
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	42 d3       	rcall	.+1668   	; 0xc4c <Serial_open>
	int opcode_len = 3;
	char command[command_len];
	char opcode[opcode_len];
	char operand[3];
	char message[64];
	char * str = message;
     5c8:	8e 01       	movw	r16, r28
     5ca:	04 5f       	subi	r16, 0xF4	; 244
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
								celsius = 1;
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
     5ce:	55 24       	eor	r5, r5
     5d0:	53 94       	inc	r5
								format="Last temp: %x raw hex";
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f7 ed       	ldi	r31, 0xD7	; 215
     5d6:	8f 2e       	mov	r8, r31
     5d8:	f3 e0       	ldi	r31, 0x03	; 3
     5da:	9f 2e       	mov	r9, r31
     5dc:	f0 2d       	mov	r31, r0
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
						//set temperature
						target_temp = atoi(operand);
						if (target_temp < 0 || target_temp > 125) {
							str = "Invalid temperature selection. Sucks to suck.\n\r";
     5de:	0f 2e       	mov	r0, r31
     5e0:	f9 e4       	ldi	r31, 0x49	; 73
     5e2:	6f 2e       	mov	r6, r31
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	7f 2e       	mov	r7, r31
     5e8:	f0 2d       	mov	r31, r0
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							if (sprintf(str,formatStr,target_temp) < 0) {
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f5 ea       	ldi	r31, 0xA5	; 165
     5ee:	af 2e       	mov	r10, r31
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	bf 2e       	mov	r11, r31
     5f4:	f0 2d       	mov	r31, r0
							str = "Formatting Error\n\r";
						}
						Serial_write_string(0, str, strlen(str));
					} 
					else if (!strcmp(opcode, "SO")) {
						timeout = operand[0] * 60;
     5f6:	0f 2e       	mov	r0, r31
     5f8:	fc e3       	ldi	r31, 0x3C	; 60
     5fa:	3f 2e       	mov	r3, r31
     5fc:	f0 2d       	mov	r31, r0
						formatStr = "Timeout set to %d seconds\n\r";
						if (sprintf(str,formatStr,timeout) < 0) {
     5fe:	0f 2e       	mov	r0, r31
     600:	f6 e8       	ldi	r31, 0x86	; 134
     602:	ef 2e       	mov	r14, r31
     604:	f3 e0       	ldi	r31, 0x03	; 3
     606:	ff 2e       	mov	r15, r31
     608:	f0 2d       	mov	r31, r0
						Serial_write_string(0, str, strlen(str));
					} 
					else if (!strcmp(opcode, "SP")) {
						over_temp = atoi(operand);
						formatStr = "Over-temperature set to %d degrees Celsius\n\r";
						if (sprintf(str,formatStr,over_temp) < 0) {
     60a:	0f 2e       	mov	r0, r31
     60c:	f6 e5       	ldi	r31, 0x56	; 86
     60e:	cf 2e       	mov	r12, r31
     610:	f3 e0       	ldi	r31, 0x03	; 3
     612:	df 2e       	mov	r13, r31
     614:	f0 2d       	mov	r31, r0
	char message[64];
	char * str = message;
	char * formatStr;
	while(1) {
		//if we are able to read a command
		if(Serial_read_string(0,command,command_len)) {
     616:	45 e0       	ldi	r20, 0x05	; 5
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	be 01       	movw	r22, r28
     61c:	6f 5f       	subi	r22, 0xFF	; 255
     61e:	7f 4f       	sbci	r23, 0xFF	; 255
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	38 d4       	rcall	.+2160   	; 0xe96 <Serial_read_string>
     626:	89 2b       	or	r24, r25
     628:	09 f4       	brne	.+2      	; 0x62c <io_controller+0x8c>
     62a:	b8 c1       	rjmp	.+880    	; 0x99c <io_controller+0x3fc>
			opcode[0] = command[0];
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	8e 83       	std	Y+6, r24	; 0x06
			opcode[1] = command[1];
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	8f 83       	std	Y+7, r24	; 0x07
			/************************************************************************/
			/* Mode-selection commands                                              */
			/************************************************************************/
			if(!strcmp(opcode,"SM")) {//set service mode to true;
     634:	67 e4       	ldi	r22, 0x47	; 71
     636:	73 e0       	ldi	r23, 0x03	; 3
     638:	ce 01       	movw	r24, r28
     63a:	06 96       	adiw	r24, 0x06	; 6
     63c:	95 d6       	rcall	.+3370   	; 0x1368 <strcmp>
     63e:	89 2b       	or	r24, r25
     640:	61 f4       	brne	.+24     	; 0x65a <io_controller+0xba>
				str = "Entering Service Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     642:	47 e1       	ldi	r20, 0x17	; 23
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	6b ea       	ldi	r22, 0xAB	; 171
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	7b d4       	rcall	.+2294   	; 0xf46 <Serial_write_string>
				service_mode = 1;
     650:	50 92 94 0c 	sts	0x0C94, r5
			opcode[1] = command[1];
			/************************************************************************/
			/* Mode-selection commands                                              */
			/************************************************************************/
			if(!strcmp(opcode,"SM")) {//set service mode to true;
				str = "Entering Service Mode\n\r";
     654:	0b ea       	ldi	r16, 0xAB	; 171
     656:	12 e0       	ldi	r17, 0x02	; 2
     658:	aa c1       	rjmp	.+852    	; 0x9ae <io_controller+0x40e>
				Serial_write_string(0,str,strlen(str));
				service_mode = 1;
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
     65a:	6a e4       	ldi	r22, 0x4A	; 74
     65c:	73 e0       	ldi	r23, 0x03	; 3
     65e:	ce 01       	movw	r24, r28
     660:	06 96       	adiw	r24, 0x06	; 6
     662:	82 d6       	rcall	.+3332   	; 0x1368 <strcmp>
     664:	89 2b       	or	r24, r25
     666:	f9 f4       	brne	.+62     	; 0x6a6 <io_controller+0x106>
				service_mode = !service_mode;
     668:	90 91 94 0c 	lds	r25, 0x0C94
     66c:	85 2d       	mov	r24, r5
     66e:	91 11       	cpse	r25, r1
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	80 93 94 0c 	sts	0x0C94, r24
				if (service_mode) {
     676:	80 91 94 0c 	lds	r24, 0x0C94
     67a:	88 23       	and	r24, r24
     67c:	51 f0       	breq	.+20     	; 0x692 <io_controller+0xf2>
					str = "Entering Service Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     67e:	47 e1       	ldi	r20, 0x17	; 23
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	6b ea       	ldi	r22, 0xAB	; 171
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	5d d4       	rcall	.+2234   	; 0xf46 <Serial_write_string>
				Serial_write_string(0,str,strlen(str));
				service_mode = 1;
			} else if (!strcmp(opcode,"TM")) {//toggle service mode
				service_mode = !service_mode;
				if (service_mode) {
					str = "Entering Service Mode\n\r";
     68c:	0b ea       	ldi	r16, 0xAB	; 171
     68e:	12 e0       	ldi	r17, 0x02	; 2
     690:	8e c1       	rjmp	.+796    	; 0x9ae <io_controller+0x40e>
					Serial_write_string(0,str,strlen(str));
				} else {
					str = "Entering Operating Mode\n\r";
					Serial_write_string(0,str,strlen(str));
     692:	49 e1       	ldi	r20, 0x19	; 25
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	69 e7       	ldi	r22, 0x79	; 121
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	53 d4       	rcall	.+2214   	; 0xf46 <Serial_write_string>
				service_mode = !service_mode;
				if (service_mode) {
					str = "Entering Service Mode\n\r";
					Serial_write_string(0,str,strlen(str));
				} else {
					str = "Entering Operating Mode\n\r";
     6a0:	09 e7       	ldi	r16, 0x79	; 121
     6a2:	12 e0       	ldi	r17, 0x02	; 2
     6a4:	84 c1       	rjmp	.+776    	; 0x9ae <io_controller+0x40e>
					Serial_write_string(0,str,strlen(str));
				}
			} else if (!strcmp(opcode, "OM")) {//set service mode to false
     6a6:	6d e4       	ldi	r22, 0x4D	; 77
     6a8:	73 e0       	ldi	r23, 0x03	; 3
     6aa:	ce 01       	movw	r24, r28
     6ac:	06 96       	adiw	r24, 0x06	; 6
     6ae:	5c d6       	rcall	.+3256   	; 0x1368 <strcmp>
     6b0:	89 2b       	or	r24, r25
     6b2:	61 f4       	brne	.+24     	; 0x6cc <io_controller+0x12c>
				str = "Entering Operating Mode\n\r";
				Serial_write_string(0,str,strlen(str));
     6b4:	49 e1       	ldi	r20, 0x19	; 25
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	69 e7       	ldi	r22, 0x79	; 121
     6ba:	72 e0       	ldi	r23, 0x02	; 2
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	42 d4       	rcall	.+2180   	; 0xf46 <Serial_write_string>
				service_mode = 0;
     6c2:	10 92 94 0c 	sts	0x0C94, r1
				} else {
					str = "Entering Operating Mode\n\r";
					Serial_write_string(0,str,strlen(str));
				}
			} else if (!strcmp(opcode, "OM")) {//set service mode to false
				str = "Entering Operating Mode\n\r";
     6c6:	09 e7       	ldi	r16, 0x79	; 121
     6c8:	12 e0       	ldi	r17, 0x02	; 2
     6ca:	71 c1       	rjmp	.+738    	; 0x9ae <io_controller+0x40e>
				service_mode = 0;
			} else {
				/************************************************************************/
				/* Mode-specific commands                                               */
				/************************************************************************/
				if(service_mode) {
     6cc:	80 91 94 0c 	lds	r24, 0x0C94
     6d0:	88 23       	and	r24, r24
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <io_controller+0x136>
     6d4:	ab c0       	rjmp	.+342    	; 0x82c <io_controller+0x28c>
					operand[0] = command[2];
     6d6:	4b 80       	ldd	r4, Y+3	; 0x03
     6d8:	49 86       	std	Y+9, r4	; 0x09
					//do service mode things
					if (!strcmp(opcode, "GT")) {
     6da:	60 e5       	ldi	r22, 0x50	; 80
     6dc:	73 e0       	ldi	r23, 0x03	; 3
     6de:	ce 01       	movw	r24, r28
     6e0:	06 96       	adiw	r24, 0x06	; 6
     6e2:	42 d6       	rcall	.+3204   	; 0x1368 <strcmp>
     6e4:	89 2b       	or	r24, r25
     6e6:	c1 f5       	brne	.+112    	; 0x758 <io_controller+0x1b8>
						//Get temperature
						char fmt_temp = last_temp;
     6e8:	60 91 52 04 	lds	r22, 0x0452
						if (!celsius) {
     6ec:	80 91 02 02 	lds	r24, 0x0202
     6f0:	81 11       	cpse	r24, r1
     6f2:	10 c0       	rjmp	.+32     	; 0x714 <io_controller+0x174>
							//this is equivalent to (9/5)*C + 32
							fmt_temp = ((fmt_temp + (fmt_temp << 3))+160)/5;
     6f4:	86 2f       	mov	r24, r22
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	9c 01       	movw	r18, r24
     6fa:	22 0f       	add	r18, r18
     6fc:	33 1f       	adc	r19, r19
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	80 56       	subi	r24, 0x60	; 96
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	65 e0       	ldi	r22, 0x05	; 5
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	e6 d5       	rcall	.+3020   	; 0x12e0 <__divmodhi4>
						}
						if (sprintf(str, format, fmt_temp) < 0) {
     714:	1f 92       	push	r1
     716:	6f 93       	push	r22
     718:	80 91 04 02 	lds	r24, 0x0204
     71c:	8f 93       	push	r24
     71e:	80 91 03 02 	lds	r24, 0x0203
     722:	8f 93       	push	r24
     724:	1f 93       	push	r17
     726:	0f 93       	push	r16
     728:	30 d6       	rcall	.+3168   	; 0x138a <sprintf>
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	99 23       	and	r25, r25
     738:	14 f4       	brge	.+4      	; 0x73e <io_controller+0x19e>
							str = "Formatting Error\n\r";
     73a:	06 e3       	ldi	r16, 0x36	; 54
     73c:	12 e0       	ldi	r17, 0x02	; 2
						}
						Serial_write_string(0, str, strlen(str));
     73e:	f8 01       	movw	r30, r16
     740:	01 90       	ld	r0, Z+
     742:	00 20       	and	r0, r0
     744:	e9 f7       	brne	.-6      	; 0x740 <io_controller+0x1a0>
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	af 01       	movw	r20, r30
     74a:	40 1b       	sub	r20, r16
     74c:	51 0b       	sbc	r21, r17
     74e:	b8 01       	movw	r22, r16
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	f8 d3       	rcall	.+2032   	; 0xf46 <Serial_write_string>
     756:	2b c1       	rjmp	.+598    	; 0x9ae <io_controller+0x40e>
					} 
					else if (!strcmp(opcode, "SP")) {
     758:	63 e5       	ldi	r22, 0x53	; 83
     75a:	73 e0       	ldi	r23, 0x03	; 3
     75c:	ce 01       	movw	r24, r28
     75e:	06 96       	adiw	r24, 0x06	; 6
     760:	03 d6       	rcall	.+3078   	; 0x1368 <strcmp>
     762:	89 2b       	or	r24, r25
     764:	49 f5       	brne	.+82     	; 0x7b8 <io_controller+0x218>
						over_temp = atoi(operand);
     766:	ce 01       	movw	r24, r28
     768:	09 96       	adiw	r24, 0x09	; 9
     76a:	e1 d5       	rcall	.+3010   	; 0x132e <atoi>
     76c:	90 93 91 0c 	sts	0x0C91, r25
     770:	80 93 90 0c 	sts	0x0C90, r24
						formatStr = "Over-temperature set to %d degrees Celsius\n\r";
						if (sprintf(str,formatStr,over_temp) < 0) {
     774:	80 91 90 0c 	lds	r24, 0x0C90
     778:	90 91 91 0c 	lds	r25, 0x0C91
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	df 92       	push	r13
     782:	cf 92       	push	r12
     784:	1f 93       	push	r17
     786:	0f 93       	push	r16
     788:	00 d6       	rcall	.+3072   	; 0x138a <sprintf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	99 23       	and	r25, r25
     798:	14 f4       	brge	.+4      	; 0x79e <io_controller+0x1fe>
							str = "Formatting Error\n\r";
     79a:	06 e3       	ldi	r16, 0x36	; 54
     79c:	12 e0       	ldi	r17, 0x02	; 2
						}
						Serial_write_string(0, str, strlen(str));
     79e:	f8 01       	movw	r30, r16
     7a0:	01 90       	ld	r0, Z+
     7a2:	00 20       	and	r0, r0
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <io_controller+0x200>
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	af 01       	movw	r20, r30
     7aa:	40 1b       	sub	r20, r16
     7ac:	51 0b       	sbc	r21, r17
     7ae:	b8 01       	movw	r22, r16
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	c8 d3       	rcall	.+1936   	; 0xf46 <Serial_write_string>
     7b6:	fb c0       	rjmp	.+502    	; 0x9ae <io_controller+0x40e>
					} 
					else if (!strcmp(opcode, "SO")) {
     7b8:	63 e8       	ldi	r22, 0x83	; 131
     7ba:	73 e0       	ldi	r23, 0x03	; 3
     7bc:	ce 01       	movw	r24, r28
     7be:	06 96       	adiw	r24, 0x06	; 6
     7c0:	d3 d5       	rcall	.+2982   	; 0x1368 <strcmp>
     7c2:	89 2b       	or	r24, r25
     7c4:	49 f5       	brne	.+82     	; 0x818 <io_controller+0x278>
						timeout = operand[0] * 60;
     7c6:	34 9c       	mul	r3, r4
     7c8:	c0 01       	movw	r24, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	90 93 01 02 	sts	0x0201, r25
     7d0:	80 93 00 02 	sts	0x0200, r24
						formatStr = "Timeout set to %d seconds\n\r";
						if (sprintf(str,formatStr,timeout) < 0) {
     7d4:	80 91 00 02 	lds	r24, 0x0200
     7d8:	90 91 01 02 	lds	r25, 0x0201
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	1f 93       	push	r17
     7e6:	0f 93       	push	r16
     7e8:	d0 d5       	rcall	.+2976   	; 0x138a <sprintf>
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	99 23       	and	r25, r25
     7f8:	14 f4       	brge	.+4      	; 0x7fe <io_controller+0x25e>
							str = "Formatting Error\n\r";
     7fa:	06 e3       	ldi	r16, 0x36	; 54
     7fc:	12 e0       	ldi	r17, 0x02	; 2
						}
						Serial_write_string(0, str, strlen(str));
     7fe:	f8 01       	movw	r30, r16
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <io_controller+0x260>
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	af 01       	movw	r20, r30
     80a:	40 1b       	sub	r20, r16
     80c:	51 0b       	sbc	r21, r17
     80e:	b8 01       	movw	r22, r16
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	98 d3       	rcall	.+1840   	; 0xf46 <Serial_write_string>
     816:	cb c0       	rjmp	.+406    	; 0x9ae <io_controller+0x40e>
					}
					else {
						str = "Unrecognized command\n\r";
						Serial_write_string(0,str,strlen(str));
     818:	46 e1       	ldi	r20, 0x16	; 22
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	68 e1       	ldi	r22, 0x18	; 24
     81e:	73 e0       	ldi	r23, 0x03	; 3
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 d3       	rcall	.+1824   	; 0xf46 <Serial_write_string>
							str = "Formatting Error\n\r";
						}
						Serial_write_string(0, str, strlen(str));
					}
					else {
						str = "Unrecognized command\n\r";
     826:	08 e1       	ldi	r16, 0x18	; 24
     828:	13 e0       	ldi	r17, 0x03	; 3
     82a:	c1 c0       	rjmp	.+386    	; 0x9ae <io_controller+0x40e>
						Serial_write_string(0,str,strlen(str));
					}
				} else {
					operand[0] = command[2];
     82c:	4b 80       	ldd	r4, Y+3	; 0x03
     82e:	49 86       	std	Y+9, r4	; 0x09
					operand[1] = 0x00;
     830:	1a 86       	std	Y+10, r1	; 0x0a
					if (command[3] != 0x00)
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	81 11       	cpse	r24, r1
					{
						operand[1] = command[3];
     836:	8a 87       	std	Y+10, r24	; 0x0a
					}
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
     838:	62 ea       	ldi	r22, 0xA2	; 162
     83a:	73 e0       	ldi	r23, 0x03	; 3
     83c:	ce 01       	movw	r24, r28
     83e:	06 96       	adiw	r24, 0x06	; 6
     840:	93 d5       	rcall	.+2854   	; 0x1368 <strcmp>
     842:	89 2b       	or	r24, r25
     844:	d1 f5       	brne	.+116    	; 0x8ba <io_controller+0x31a>
						//set temperature
						target_temp = atoi(operand);
     846:	ce 01       	movw	r24, r28
     848:	09 96       	adiw	r24, 0x09	; 9
     84a:	71 d5       	rcall	.+2786   	; 0x132e <atoi>
     84c:	90 93 93 0c 	sts	0x0C93, r25
     850:	80 93 92 0c 	sts	0x0C92, r24
						if (target_temp < 0 || target_temp > 125) {
     854:	80 91 92 0c 	lds	r24, 0x0C92
     858:	90 91 93 0c 	lds	r25, 0x0C93
     85c:	99 23       	and	r25, r25
     85e:	ec f0       	brlt	.+58     	; 0x89a <io_controller+0x2fa>
     860:	80 91 92 0c 	lds	r24, 0x0C92
     864:	90 91 93 0c 	lds	r25, 0x0C93
     868:	8e 37       	cpi	r24, 0x7E	; 126
     86a:	91 05       	cpc	r25, r1
     86c:	c4 f4       	brge	.+48     	; 0x89e <io_controller+0x2fe>
							str = "Invalid temperature selection. Sucks to suck.\n\r";
						} else {
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							if (sprintf(str,formatStr,target_temp) < 0) {
     86e:	80 91 92 0c 	lds	r24, 0x0C92
     872:	90 91 93 0c 	lds	r25, 0x0C93
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	bf 92       	push	r11
     87c:	af 92       	push	r10
     87e:	1f 93       	push	r17
     880:	0f 93       	push	r16
     882:	83 d5       	rcall	.+2822   	; 0x138a <sprintf>
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	99 23       	and	r25, r25
     892:	34 f4       	brge	.+12     	; 0x8a0 <io_controller+0x300>
								str = "Formatting Error\n\r";
     894:	06 e3       	ldi	r16, 0x36	; 54
     896:	12 e0       	ldi	r17, 0x02	; 2
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <io_controller+0x300>
					//do operating mode things
					if (!strcmp(opcode, "ST")) {
						//set temperature
						target_temp = atoi(operand);
						if (target_temp < 0 || target_temp > 125) {
							str = "Invalid temperature selection. Sucks to suck.\n\r";
     89a:	83 01       	movw	r16, r6
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <io_controller+0x300>
     89e:	83 01       	movw	r16, r6
							formatStr = "Set target temperature to %d degrees Celsius\n\r";
							if (sprintf(str,formatStr,target_temp) < 0) {
								str = "Formatting Error\n\r";
							}
						}
						Serial_write_string(0,str,strlen(str));
     8a0:	f8 01       	movw	r30, r16
     8a2:	01 90       	ld	r0, Z+
     8a4:	00 20       	and	r0, r0
     8a6:	e9 f7       	brne	.-6      	; 0x8a2 <io_controller+0x302>
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	af 01       	movw	r20, r30
     8ac:	40 1b       	sub	r20, r16
     8ae:	51 0b       	sbc	r21, r17
     8b0:	b8 01       	movw	r22, r16
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	47 d3       	rcall	.+1678   	; 0xf46 <Serial_write_string>
     8b8:	7a c0       	rjmp	.+244    	; 0x9ae <io_controller+0x40e>
					} else if (!strcmp(opcode, "SR")) {
     8ba:	64 ed       	ldi	r22, 0xD4	; 212
     8bc:	73 e0       	ldi	r23, 0x03	; 3
     8be:	ce 01       	movw	r24, r28
     8c0:	06 96       	adiw	r24, 0x06	; 6
     8c2:	52 d5       	rcall	.+2724   	; 0x1368 <strcmp>
     8c4:	89 2b       	or	r24, r25
     8c6:	81 f4       	brne	.+32     	; 0x8e8 <io_controller+0x348>
						//set sample rate
						sample_rate = operand[0];
     8c8:	40 92 05 02 	sts	0x0205, r4
						format="Last temp: %x raw hex";
     8cc:	90 92 04 02 	sts	0x0204, r9
     8d0:	80 92 03 02 	sts	0x0203, r8
						str = "Set format to Celsius Hexadecimal\n\r";
						Serial_write_string(0,str,strlen(str));
     8d4:	43 e2       	ldi	r20, 0x23	; 35
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	63 ec       	ldi	r22, 0xC3	; 195
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	32 d3       	rcall	.+1636   	; 0xf46 <Serial_write_string>
						Serial_write_string(0,str,strlen(str));
					} else if (!strcmp(opcode, "SR")) {
						//set sample rate
						sample_rate = operand[0];
						format="Last temp: %x raw hex";
						str = "Set format to Celsius Hexadecimal\n\r";
     8e2:	03 ec       	ldi	r16, 0xC3	; 195
     8e4:	12 e0       	ldi	r17, 0x02	; 2
     8e6:	63 c0       	rjmp	.+198    	; 0x9ae <io_controller+0x40e>
						Serial_write_string(0,str,strlen(str));
					} else if (!strcmp(opcode, "SD")) {
     8e8:	6d ee       	ldi	r22, 0xED	; 237
     8ea:	73 e0       	ldi	r23, 0x03	; 3
     8ec:	ce 01       	movw	r24, r28
     8ee:	06 96       	adiw	r24, 0x06	; 6
     8f0:	3b d5       	rcall	.+2678   	; 0x1368 <strcmp>
     8f2:	89 2b       	or	r24, r25
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <io_controller+0x358>
     8f6:	48 c0       	rjmp	.+144    	; 0x988 <io_controller+0x3e8>
						//set display format
						switch (operand[0]) {
     8f8:	86 e4       	ldi	r24, 0x46	; 70
     8fa:	48 16       	cp	r4, r24
     8fc:	39 f0       	breq	.+14     	; 0x90c <io_controller+0x36c>
     8fe:	98 e5       	ldi	r25, 0x58	; 88
     900:	49 16       	cp	r4, r25
     902:	41 f1       	breq	.+80     	; 0x954 <io_controller+0x3b4>
     904:	83 e4       	ldi	r24, 0x43	; 67
     906:	48 12       	cpse	r4, r24
     908:	35 c0       	rjmp	.+106    	; 0x974 <io_controller+0x3d4>
     90a:	12 c0       	rjmp	.+36     	; 0x930 <io_controller+0x390>
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
     90c:	80 ef       	ldi	r24, 0xF0	; 240
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	90 93 04 02 	sts	0x0204, r25
     914:	80 93 03 02 	sts	0x0203, r24
								celsius = 0;
     918:	10 92 02 02 	sts	0x0202, r1
								str = "Set format to Fahrenheit\n\r";
								Serial_write_string(0,str,strlen(str));
     91c:	4a e1       	ldi	r20, 0x1A	; 26
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	6d ef       	ldi	r22, 0xFD	; 253
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e d3       	rcall	.+1564   	; 0xf46 <Serial_write_string>
						//set display format
						switch (operand[0]) {
							case 'F':
								format = "Last temp: %d degrees Fahrenheit\n\r";
								celsius = 0;
								str = "Set format to Fahrenheit\n\r";
     92a:	0d ef       	ldi	r16, 0xFD	; 253
     92c:	12 e0       	ldi	r17, 0x02	; 2
								Serial_write_string(0,str,strlen(str));
								break;
     92e:	3f c0       	rjmp	.+126    	; 0x9ae <io_controller+0x40e>
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
     930:	83 e1       	ldi	r24, 0x13	; 19
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	90 93 04 02 	sts	0x0204, r25
     938:	80 93 03 02 	sts	0x0203, r24
								celsius = 1;
     93c:	50 92 02 02 	sts	0x0202, r5
								str = "Set format to Celsius\n\r";
								Serial_write_string(0,str,strlen(str));
     940:	47 e1       	ldi	r20, 0x17	; 23
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	6f e2       	ldi	r22, 0x2F	; 47
     946:	73 e0       	ldi	r23, 0x03	; 3
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	fc d2       	rcall	.+1528   	; 0xf46 <Serial_write_string>
								Serial_write_string(0,str,strlen(str));
								break;
							case 'C':
								format = "Last temp: %d degrees Celsius\n\r";
								celsius = 1;
								str = "Set format to Celsius\n\r";
     94e:	0f e2       	ldi	r16, 0x2F	; 47
     950:	13 e0       	ldi	r17, 0x03	; 3
								Serial_write_string(0,str,strlen(str));
								break;
     952:	2d c0       	rjmp	.+90     	; 0x9ae <io_controller+0x40e>
							case 'X':
								celsius = 1;
     954:	50 92 02 02 	sts	0x0202, r5
								format="Last temp: %x raw hex";
     958:	90 92 04 02 	sts	0x0204, r9
     95c:	80 92 03 02 	sts	0x0203, r8
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
     960:	43 e2       	ldi	r20, 0x23	; 35
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	63 ec       	ldi	r22, 0xC3	; 195
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	ec d2       	rcall	.+1496   	; 0xf46 <Serial_write_string>
								Serial_write_string(0,str,strlen(str));
								break;
							case 'X':
								celsius = 1;
								format="Last temp: %x raw hex";
								str = "Set format to Celsius Hexadecimal\n\r";
     96e:	03 ec       	ldi	r16, 0xC3	; 195
     970:	12 e0       	ldi	r17, 0x02	; 2
								Serial_write_string(0,str,strlen(str));
								break;
     972:	1d c0       	rjmp	.+58     	; 0x9ae <io_controller+0x40e>
							default:
								str = "Unrecognized format\n\r";
								Serial_write_string(0,str,strlen(str));
     974:	45 e1       	ldi	r20, 0x15	; 21
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	67 ee       	ldi	r22, 0xE7	; 231
     97a:	72 e0       	ldi	r23, 0x02	; 2
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	e2 d2       	rcall	.+1476   	; 0xf46 <Serial_write_string>
								format="Last temp: %x raw hex";
								str = "Set format to Celsius Hexadecimal\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
							default:
								str = "Unrecognized format\n\r";
     982:	07 ee       	ldi	r16, 0xE7	; 231
     984:	12 e0       	ldi	r17, 0x02	; 2
								Serial_write_string(0,str,strlen(str));
								break;
     986:	13 c0       	rjmp	.+38     	; 0x9ae <io_controller+0x40e>
						}
					} else {
						str = "Unrecognized command\n\r";
						Serial_write_string(0,str,strlen(str));
     988:	46 e1       	ldi	r20, 0x16	; 22
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	68 e1       	ldi	r22, 0x18	; 24
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	d8 d2       	rcall	.+1456   	; 0xf46 <Serial_write_string>
								str = "Unrecognized format\n\r";
								Serial_write_string(0,str,strlen(str));
								break;
						}
					} else {
						str = "Unrecognized command\n\r";
     996:	08 e1       	ldi	r16, 0x18	; 24
     998:	13 e0       	ldi	r17, 0x03	; 3
     99a:	09 c0       	rjmp	.+18     	; 0x9ae <io_controller+0x40e>
				}
			}

		} else {
			str = "Error reading command\n\r";
			Serial_write_string(0,str,strlen(str));
     99c:	47 e1       	ldi	r20, 0x17	; 23
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	63 e9       	ldi	r22, 0x93	; 147
     9a2:	72 e0       	ldi	r23, 0x02	; 2
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	ce d2       	rcall	.+1436   	; 0xf46 <Serial_write_string>
					}
				}
			}

		} else {
			str = "Error reading command\n\r";
     9aa:	03 e9       	ldi	r16, 0x93	; 147
     9ac:	12 e0       	ldi	r17, 0x02	; 2
			Serial_write_string(0,str,strlen(str));
		}
		x_delay(1000);
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	e4 dc       	rcall	.-1592   	; 0x37c <x_delay>
	}
     9b4:	30 ce       	rjmp	.-928    	; 0x616 <io_controller+0x76>

000009b6 <box_controller>:
/*
 * Controller for the box
 */
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
     9b6:	24 9a       	sbi	0x04, 4	; 4
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
		//_delay_ms(1000);
		PORTB ^= 0x10;
     9b8:	c0 e1       	ldi	r28, 0x10	; 16
void box_controller(void) {
	//TODO: blink LED
	DDRB |= 0x1 << PB4;
	//PORTB |= 0x1 << PB4;
	while(1) {
		x_delay(sample_rate);
     9ba:	80 91 05 02 	lds	r24, 0x0205
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	dd dc       	rcall	.-1606   	; 0x37c <x_delay>
		//_delay_ms(1000);
		PORTB ^= 0x10;
     9c2:	85 b1       	in	r24, 0x05	; 5
     9c4:	8c 27       	eor	r24, r28
     9c6:	85 b9       	out	0x05, r24	; 5
		//x_yield();
	}
     9c8:	f8 cf       	rjmp	.-16     	; 0x9ba <box_controller+0x4>

000009ca <sensor_controller>:
/*
 * Polls sensor for temperature every second
 */
void sensor_controller(void) {
	//Check for sensor presence
	char presence = ow_reset();
     9ca:	3a dd       	rcall	.-1420   	; 0x440 <ow_reset>
	//keep checking until we detect a sensor
	while (! presence) {
     9cc:	81 11       	cpse	r24, r1
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <sensor_controller+0x10>
		presence = ow_reset();
     9d0:	37 dd       	rcall	.-1426   	; 0x440 <ow_reset>
     9d2:	c8 2f       	mov	r28, r24
		//give other threads a chance to act during this process
		x_yield();
     9d4:	a8 db       	rcall	.-2224   	; 0x126 <x_yield>
 */
void sensor_controller(void) {
	//Check for sensor presence
	char presence = ow_reset();
	//keep checking until we detect a sensor
	while (! presence) {
     9d6:	cc 23       	and	r28, r28
     9d8:	d9 f3       	breq	.-10     	; 0x9d0 <sensor_controller+0x6>
		//give other threads a chance to act during this process
		x_yield();
	}
	//monitor temperature
	while(1) {
		last_temp = ow_read_temperature();
     9da:	9d dd       	rcall	.-1222   	; 0x516 <ow_read_temperature>
     9dc:	80 93 52 04 	sts	0x0452, r24
		x_delay(sample_rate);
     9e0:	80 91 05 02 	lds	r24, 0x0205
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	ca dc       	rcall	.-1644   	; 0x37c <x_delay>
	}
     9e8:	f8 cf       	rjmp	.-16     	; 0x9da <sensor_controller+0x10>

000009ea <main>:
}

int main(void)
{
	x_init();
     9ea:	51 dc       	rcall	.-1886   	; 0x28e <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
     9ec:	41 e0       	ldi	r20, 0x01	; 1
     9ee:	60 ed       	ldi	r22, 0xD0	; 208
     9f0:	72 e0       	ldi	r23, 0x02	; 2
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0b dc       	rcall	.-2026   	; 0x20c <x_new>
	x_new(1, sensor_controller, 1);
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	65 ee       	ldi	r22, 0xE5	; 229
     9fa:	74 e0       	ldi	r23, 0x04	; 4
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	06 dc       	rcall	.-2036   	; 0x20c <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	6b ed       	ldi	r22, 0xDB	; 219
     a04:	74 e0       	ldi	r23, 0x04	; 4
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	01 dc       	rcall	.-2046   	; 0x20c <x_new>
}
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	08 95       	ret

00000a10 <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
	QCB *qcb = &queues[qid];
     a14:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 1)
     a16:	fc 01       	movw	r30, r24
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	eb 56       	subi	r30, 0x6B	; 107
     a26:	f3 4f       	sbci	r31, 0xF3	; 243
     a28:	23 81       	ldd	r18, Z+3	; 0x03
     a2a:	21 30       	cpi	r18, 0x01	; 1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <Q_putc+0x20>
     a2e:	58 c0       	rjmp	.+176    	; 0xae0 <Q_putc+0xd0>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a30:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
     a34:	fc 01       	movw	r30, r24
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	eb 56       	subi	r30, 0x6B	; 107
     a44:	f3 4f       	sbci	r31, 0xF3	; 243
     a46:	20 81       	ld	r18, Z
     a48:	c6 81       	ldd	r28, Z+6	; 0x06
     a4a:	d7 81       	ldd	r29, Z+7	; 0x07
     a4c:	c2 0f       	add	r28, r18
     a4e:	d1 1d       	adc	r29, r1
     a50:	68 83       	st	Y, r22
			qcb->available += 1;
     a52:	24 81       	ldd	r18, Z+4	; 0x04
     a54:	35 81       	ldd	r19, Z+5	; 0x05
     a56:	2f 5f       	subi	r18, 0xFF	; 255
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	35 83       	std	Z+5, r19	; 0x05
     a5c:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 2)
     a5e:	23 81       	ldd	r18, Z+3	; 0x03
     a60:	22 30       	cpi	r18, 0x02	; 2
     a62:	51 f4       	brne	.+20     	; 0xa78 <Q_putc+0x68>
			{
				qcb->flags = 0;
     a64:	fc 01       	movw	r30, r24
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	eb 56       	subi	r30, 0x6B	; 107
     a74:	f3 4f       	sbci	r31, 0xF3	; 243
     a76:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     a78:	fc 01       	movw	r30, r24
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	eb 56       	subi	r30, 0x6B	; 107
     a88:	f3 4f       	sbci	r31, 0xF3	; 243
     a8a:	30 81       	ld	r19, Z
     a8c:	22 81       	ldd	r18, Z+2	; 0x02
     a8e:	63 2f       	mov	r22, r19
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	42 2f       	mov	r20, r18
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	64 23       	and	r22, r20
     a9c:	75 23       	and	r23, r21
     a9e:	41 81       	ldd	r20, Z+1	; 0x01
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	64 17       	cp	r22, r20
     aa4:	75 07       	cpc	r23, r21
     aa6:	69 f0       	breq	.+26     	; 0xac2 <Q_putc+0xb2>
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	eb 56       	subi	r30, 0x6B	; 107
     ab8:	f3 4f       	sbci	r31, 0xF3	; 243
     aba:	3f 5f       	subi	r19, 0xFF	; 255
     abc:	23 23       	and	r18, r19
     abe:	20 83       	st	Z, r18
     ac0:	11 c0       	rjmp	.+34     	; 0xae4 <Q_putc+0xd4>
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	fc 01       	movw	r30, r24
     ad0:	eb 56       	subi	r30, 0x6B	; 107
     ad2:	f3 4f       	sbci	r31, 0xF3	; 243
     ad4:	3f 5f       	subi	r19, 0xFF	; 255
     ad6:	23 23       	and	r18, r19
     ad8:	20 83       	st	Z, r18
				qcb->flags = 1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	83 83       	std	Z+3, r24	; 0x03
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <Q_putc+0xd4>
		}
		return 1;
	}
	else
	{
		return 0;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <Q_putc+0xd8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae4:	af bf       	out	0x3f, r26	; 63
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
			}
		}
		return 1;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
	QCB *qcb = &queues[qid];
     af2:	90 e0       	ldi	r25, 0x00	; 0
	if (qcb->flags != 2)
     af4:	fc 01       	movw	r30, r24
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	eb 56       	subi	r30, 0x6B	; 107
     b04:	f3 4f       	sbci	r31, 0xF3	; 243
     b06:	23 81       	ldd	r18, Z+3	; 0x03
     b08:	22 30       	cpi	r18, 0x02	; 2
     b0a:	09 f4       	brne	.+2      	; 0xb0e <Q_getc+0x20>
     b0c:	5a c0       	rjmp	.+180    	; 0xbc2 <Q_getc+0xd4>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b0e:	af b7       	in	r26, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b10:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
     b12:	fc 01       	movw	r30, r24
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	eb 56       	subi	r30, 0x6B	; 107
     b22:	f3 4f       	sbci	r31, 0xF3	; 243
     b24:	21 81       	ldd	r18, Z+1	; 0x01
     b26:	c6 81       	ldd	r28, Z+6	; 0x06
     b28:	d7 81       	ldd	r29, Z+7	; 0x07
     b2a:	c2 0f       	add	r28, r18
     b2c:	d1 1d       	adc	r29, r1
     b2e:	28 81       	ld	r18, Y
     b30:	eb 01       	movw	r28, r22
     b32:	28 83       	st	Y, r18
			qcb->available -= 1;
     b34:	24 81       	ldd	r18, Z+4	; 0x04
     b36:	35 81       	ldd	r19, Z+5	; 0x05
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	31 09       	sbc	r19, r1
     b3c:	35 83       	std	Z+5, r19	; 0x05
     b3e:	24 83       	std	Z+4, r18	; 0x04
			if (qcb->flags == 1)
     b40:	23 81       	ldd	r18, Z+3	; 0x03
     b42:	21 30       	cpi	r18, 0x01	; 1
     b44:	51 f4       	brne	.+20     	; 0xb5a <Q_getc+0x6c>
			{
				qcb->flags = 0;
     b46:	fc 01       	movw	r30, r24
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	eb 56       	subi	r30, 0x6B	; 107
     b56:	f3 4f       	sbci	r31, 0xF3	; 243
     b58:	13 82       	std	Z+3, r1	; 0x03
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     b5a:	fc 01       	movw	r30, r24
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	eb 56       	subi	r30, 0x6B	; 107
     b6a:	f3 4f       	sbci	r31, 0xF3	; 243
     b6c:	31 81       	ldd	r19, Z+1	; 0x01
     b6e:	22 81       	ldd	r18, Z+2	; 0x02
     b70:	63 2f       	mov	r22, r19
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	6f 5f       	subi	r22, 0xFF	; 255
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	42 2f       	mov	r20, r18
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	64 23       	and	r22, r20
     b7e:	75 23       	and	r23, r21
     b80:	40 81       	ld	r20, Z
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	64 17       	cp	r22, r20
     b86:	75 07       	cpc	r23, r21
     b88:	69 f0       	breq	.+26     	; 0xba4 <Q_getc+0xb6>
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	fc 01       	movw	r30, r24
     b98:	eb 56       	subi	r30, 0x6B	; 107
     b9a:	f3 4f       	sbci	r31, 0xF3	; 243
     b9c:	3f 5f       	subi	r19, 0xFF	; 255
     b9e:	23 23       	and	r18, r19
     ba0:	21 83       	std	Z+1, r18	; 0x01
     ba2:	11 c0       	rjmp	.+34     	; 0xbc6 <Q_getc+0xd8>
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	fc 01       	movw	r30, r24
     bb2:	eb 56       	subi	r30, 0x6B	; 107
     bb4:	f3 4f       	sbci	r31, 0xF3	; 243
     bb6:	3f 5f       	subi	r19, 0xFF	; 255
     bb8:	23 23       	and	r18, r19
     bba:	21 83       	std	Z+1, r18	; 0x01
				qcb->flags = 2;
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	83 83       	std	Z+3, r24	; 0x03
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <Q_getc+0xd8>
			}
		}
		return 1;
	}
	return 0;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <Q_getc+0xdc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bc6:	af bf       	out	0x3f, r26	; 63
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
			}
		}
		return 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
     bd0:	9c 01       	movw	r18, r24
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	31 09       	sbc	r19, r1
     bd6:	2f 3f       	cpi	r18, 0xFF	; 255
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f0       	breq	.+2      	; 0xbde <Q_create+0xe>
     bdc:	98 f5       	brcc	.+102    	; 0xc44 <Q_create+0x74>
     bde:	28 23       	and	r18, r24
     be0:	39 23       	and	r19, r25
     be2:	23 2b       	or	r18, r19
     be4:	89 f5       	brne	.+98     	; 0xc48 <Q_create+0x78>
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
     be6:	20 91 53 04 	lds	r18, 0x0453
     bea:	22 23       	and	r18, r18
     bec:	41 f0       	breq	.+16     	; 0xbfe <Q_create+0x2e>
     bee:	e4 e5       	ldi	r30, 0x54	; 84
     bf0:	f4 e0       	ldi	r31, 0x04	; 4
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (occupied[i] == false)
     bf6:	41 91       	ld	r20, Z+
     bf8:	41 11       	cpse	r20, r1
     bfa:	1d c0       	rjmp	.+58     	; 0xc36 <Q_create+0x66>
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <Q_create+0x32>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
		{
			queues[i].in = 0;
     c02:	f9 01       	movw	r30, r18
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	eb 56       	subi	r30, 0x6B	; 107
     c12:	f3 4f       	sbci	r31, 0xF3	; 243
     c14:	10 82       	st	Z, r1
			queues[i].out = 0;
     c16:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
     c20:	15 82       	std	Z+5, r1	; 0x05
     c22:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
     c24:	77 83       	std	Z+7, r23	; 0x07
     c26:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
     c28:	f9 01       	movw	r30, r18
     c2a:	ed 5a       	subi	r30, 0xAD	; 173
     c2c:	fb 4f       	sbci	r31, 0xFB	; 251
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 83       	st	Z, r24
			return i;
     c32:	82 2f       	mov	r24, r18
     c34:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     c36:	2f 5f       	subi	r18, 0xFF	; 255
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	28 30       	cpi	r18, 0x08	; 8
     c3c:	31 05       	cpc	r19, r1
     c3e:	d9 f6       	brne	.-74     	; 0xbf6 <Q_create+0x26>
			queues[i].pQ = pbuffer;
			occupied[i] = true;
			return i;
		}
	}
	return -1;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	08 95       	ret

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	08 95       	ret
     c48:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
     c4a:	08 95       	ret

00000c4c <Serial_open>:
}

int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
}
     c4c:	6f 92       	push	r6
     c4e:	7f 92       	push	r7
     c50:	8f 92       	push	r8
     c52:	9f 92       	push	r9
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	91 05       	cpc	r25, r1
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <Serial_open+0x22>
     c6c:	e1 c0       	rjmp	.+450    	; 0xe30 <Serial_open+0x1e4>
     c6e:	12 2f       	mov	r17, r18
     c70:	6a 01       	movw	r12, r20
     c72:	7b 01       	movw	r14, r22
     c74:	3c 01       	movw	r6, r24
     c76:	4c 01       	movw	r8, r24
     c78:	88 0c       	add	r8, r8
     c7a:	99 1c       	adc	r9, r9
     c7c:	5c 01       	movw	r10, r24
     c7e:	aa 0c       	add	r10, r10
     c80:	bb 1c       	adc	r11, r11
     c82:	aa 0c       	add	r10, r10
     c84:	bb 1c       	adc	r11, r11
     c86:	aa 0c       	add	r10, r10
     c88:	bb 1c       	adc	r11, r11
     c8a:	c4 01       	movw	r24, r8
     c8c:	8a 0d       	add	r24, r10
     c8e:	9b 1d       	adc	r25, r11
     c90:	ec 01       	movw	r28, r24
     c92:	c2 5f       	subi	r28, 0xF2	; 242
     c94:	dd 4f       	sbci	r29, 0xFD	; 253
     c96:	6a 81       	ldd	r22, Y+2	; 0x02
     c98:	7b 81       	ldd	r23, Y+3	; 0x03
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	98 df       	rcall	.-208    	; 0xbd0 <Q_create>
     ca0:	88 83       	st	Y, r24
     ca2:	6e 81       	ldd	r22, Y+6	; 0x06
     ca4:	7f 81       	ldd	r23, Y+7	; 0x07
     ca6:	88 85       	ldd	r24, Y+8	; 0x08
     ca8:	99 85       	ldd	r25, Y+9	; 0x09
     caa:	92 df       	rcall	.-220    	; 0xbd0 <Q_create>
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	f4 01       	movw	r30, r8
     cb0:	ea 5f       	subi	r30, 0xFA	; 250
     cb2:	fd 4f       	sbci	r31, 0xFD	; 253
     cb4:	01 90       	ld	r0, Z+
     cb6:	f0 81       	ld	r31, Z
     cb8:	e0 2d       	mov	r30, r0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	80 83       	st	Z, r24
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	c8 16       	cp	r12, r24
     cc4:	80 e7       	ldi	r24, 0x70	; 112
     cc6:	d8 06       	cpc	r13, r24
     cc8:	e1 04       	cpc	r14, r1
     cca:	f1 04       	cpc	r15, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <Serial_open+0x84>
     cce:	73 c0       	rjmp	.+230    	; 0xdb6 <Serial_open+0x16a>
     cd0:	54 f5       	brge	.+84     	; 0xd26 <Serial_open+0xda>
     cd2:	80 e8       	ldi	r24, 0x80	; 128
     cd4:	c8 16       	cp	r12, r24
     cd6:	85 e2       	ldi	r24, 0x25	; 37
     cd8:	d8 06       	cpc	r13, r24
     cda:	e1 04       	cpc	r14, r1
     cdc:	f1 04       	cpc	r15, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <Serial_open+0x96>
     ce0:	5b c0       	rjmp	.+182    	; 0xd98 <Serial_open+0x14c>
     ce2:	8c f4       	brge	.+34     	; 0xd06 <Serial_open+0xba>
     ce4:	80 e6       	ldi	r24, 0x60	; 96
     ce6:	c8 16       	cp	r12, r24
     ce8:	89 e0       	ldi	r24, 0x09	; 9
     cea:	d8 06       	cpc	r13, r24
     cec:	e1 04       	cpc	r14, r1
     cee:	f1 04       	cpc	r15, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <Serial_open+0xa8>
     cf2:	48 c0       	rjmp	.+144    	; 0xd84 <Serial_open+0x138>
     cf4:	80 ec       	ldi	r24, 0xC0	; 192
     cf6:	c8 16       	cp	r12, r24
     cf8:	82 e1       	ldi	r24, 0x12	; 18
     cfa:	d8 06       	cpc	r13, r24
     cfc:	e1 04       	cpc	r14, r1
     cfe:	f1 04       	cpc	r15, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <Serial_open+0xb8>
     d02:	45 c0       	rjmp	.+138    	; 0xd8e <Serial_open+0x142>
     d04:	7b c0       	rjmp	.+246    	; 0xdfc <Serial_open+0x1b0>
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	c8 16       	cp	r12, r24
     d0a:	88 e3       	ldi	r24, 0x38	; 56
     d0c:	d8 06       	cpc	r13, r24
     d0e:	e1 04       	cpc	r14, r1
     d10:	f1 04       	cpc	r15, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <Serial_open+0xca>
     d14:	46 c0       	rjmp	.+140    	; 0xda2 <Serial_open+0x156>
     d16:	c1 14       	cp	r12, r1
     d18:	8b e4       	ldi	r24, 0x4B	; 75
     d1a:	d8 06       	cpc	r13, r24
     d1c:	e1 04       	cpc	r14, r1
     d1e:	f1 04       	cpc	r15, r1
     d20:	09 f4       	brne	.+2      	; 0xd24 <Serial_open+0xd8>
     d22:	44 c0       	rjmp	.+136    	; 0xdac <Serial_open+0x160>
     d24:	6b c0       	rjmp	.+214    	; 0xdfc <Serial_open+0x1b0>
     d26:	c1 14       	cp	r12, r1
     d28:	8c e2       	ldi	r24, 0x2C	; 44
     d2a:	d8 06       	cpc	r13, r24
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	e8 06       	cpc	r14, r24
     d30:	f1 04       	cpc	r15, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <Serial_open+0xea>
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <Serial_open+0x188>
     d36:	6c f4       	brge	.+26     	; 0xd52 <Serial_open+0x106>
     d38:	c1 14       	cp	r12, r1
     d3a:	86 e9       	ldi	r24, 0x96	; 150
     d3c:	d8 06       	cpc	r13, r24
     d3e:	e1 04       	cpc	r14, r1
     d40:	f1 04       	cpc	r15, r1
     d42:	f1 f1       	breq	.+124    	; 0xdc0 <Serial_open+0x174>
     d44:	c1 14       	cp	r12, r1
     d46:	81 ee       	ldi	r24, 0xE1	; 225
     d48:	d8 06       	cpc	r13, r24
     d4a:	e1 04       	cpc	r14, r1
     d4c:	f1 04       	cpc	r15, r1
     d4e:	e9 f1       	breq	.+122    	; 0xdca <Serial_open+0x17e>
     d50:	55 c0       	rjmp	.+170    	; 0xdfc <Serial_open+0x1b0>
     d52:	c1 14       	cp	r12, r1
     d54:	84 e8       	ldi	r24, 0x84	; 132
     d56:	d8 06       	cpc	r13, r24
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	e8 06       	cpc	r14, r24
     d5c:	f1 04       	cpc	r15, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <Serial_open+0x116>
     d60:	43 c0       	rjmp	.+134    	; 0xde8 <Serial_open+0x19c>
     d62:	80 e9       	ldi	r24, 0x90	; 144
     d64:	c8 16       	cp	r12, r24
     d66:	80 ed       	ldi	r24, 0xD0	; 208
     d68:	d8 06       	cpc	r13, r24
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	e8 06       	cpc	r14, r24
     d6e:	f1 04       	cpc	r15, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <Serial_open+0x128>
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <Serial_open+0x1a6>
     d74:	c1 14       	cp	r12, r1
     d76:	82 ec       	ldi	r24, 0xC2	; 194
     d78:	d8 06       	cpc	r13, r24
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	e8 06       	cpc	r14, r24
     d7e:	f1 04       	cpc	r15, r1
     d80:	e9 f5       	brne	.+122    	; 0xdfc <Serial_open+0x1b0>
     d82:	2d c0       	rjmp	.+90     	; 0xdde <Serial_open+0x192>
     d84:	40 e4       	ldi	r20, 0x40	; 64
     d86:	53 e0       	ldi	r21, 0x03	; 3
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	3a c0       	rjmp	.+116    	; 0xe02 <Serial_open+0x1b6>
     d8e:	40 ea       	ldi	r20, 0xA0	; 160
     d90:	51 e0       	ldi	r21, 0x01	; 1
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	35 c0       	rjmp	.+106    	; 0xe02 <Serial_open+0x1b6>
     d98:	4f ec       	ldi	r20, 0xCF	; 207
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	30 c0       	rjmp	.+96     	; 0xe02 <Serial_open+0x1b6>
     da2:	4a e8       	ldi	r20, 0x8A	; 138
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	2b c0       	rjmp	.+86     	; 0xe02 <Serial_open+0x1b6>
     dac:	47 e6       	ldi	r20, 0x67	; 103
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	26 c0       	rjmp	.+76     	; 0xe02 <Serial_open+0x1b6>
     db6:	44 e4       	ldi	r20, 0x44	; 68
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	21 c0       	rjmp	.+66     	; 0xe02 <Serial_open+0x1b6>
     dc0:	43 e3       	ldi	r20, 0x33	; 51
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	1c c0       	rjmp	.+56     	; 0xe02 <Serial_open+0x1b6>
     dca:	42 e2       	ldi	r20, 0x22	; 34
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <Serial_open+0x1b6>
     dd4:	49 e1       	ldi	r20, 0x19	; 25
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	12 c0       	rjmp	.+36     	; 0xe02 <Serial_open+0x1b6>
     dde:	40 e1       	ldi	r20, 0x10	; 16
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <Serial_open+0x1b6>
     de8:	48 e0       	ldi	r20, 0x08	; 8
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	08 c0       	rjmp	.+16     	; 0xe02 <Serial_open+0x1b6>
     df2:	47 e0       	ldi	r20, 0x07	; 7
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <Serial_open+0x1b6>
     dfc:	4f ef       	ldi	r20, 0xFF	; 255
     dfe:	5f ef       	ldi	r21, 0xFF	; 255
     e00:	ba 01       	movw	r22, r20
     e02:	8f b7       	in	r24, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	e3 01       	movw	r28, r6
     e08:	cc 0f       	add	r28, r28
     e0a:	dd 1f       	adc	r29, r29
     e0c:	ca 5f       	subi	r28, 0xFA	; 250
     e0e:	dd 4f       	sbci	r29, 0xFD	; 253
     e10:	e8 81       	ld	r30, Y
     e12:	f9 81       	ldd	r31, Y+1	; 0x01
     e14:	55 83       	std	Z+5, r21	; 0x05
     e16:	44 83       	std	Z+4, r20	; 0x04
     e18:	e8 81       	ld	r30, Y
     e1a:	f9 81       	ldd	r31, Y+1	; 0x01
     e1c:	12 83       	std	Z+2, r17	; 0x02
     e1e:	e8 81       	ld	r30, Y
     e20:	f9 81       	ldd	r31, Y+1	; 0x01
     e22:	98 e9       	ldi	r25, 0x98	; 152
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	8f bf       	out	0x3f, r24	; 63
     e28:	78 94       	sei
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Serial_open+0x1e8>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	9f ef       	ldi	r25, 0xFF	; 255
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	08 95       	ret

00000e50 <Serial_read>:

int Serial_read(int port)
{
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	1f 92       	push	r1
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	char qdata = 0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	int data;
	
	if (Q_getc(ports[port].rx_qid, &qdata))
     e5c:	fc 01       	movw	r30, r24
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	e2 5f       	subi	r30, 0xF2	; 242
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	be 01       	movw	r22, r28
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	80 81       	ld	r24, Z
     e7e:	37 de       	rcall	.-914    	; 0xaee <Q_getc>
     e80:	88 23       	and	r24, r24
     e82:	19 f0       	breq	.+6      	; 0xe8a <Serial_read+0x3a>
	{
		data = qdata;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	90 e0       	ldi	r25, 0x00	; 0
		return data;
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <Serial_read+0x3e>
	}
	else
	{
		return -1;
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <Serial_read_string>:
		Serial_write(port, data[i]);
	}
	return 1;
}

int Serial_read_string(int port, char * data, int data_length) {
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
	char latest;
	int i = 0;
	
	//loop until end of data
	while (i < data_length) {
     ea6:	14 16       	cp	r1, r20
     ea8:	15 06       	cpc	r1, r21
     eaa:	ec f4       	brge	.+58     	; 0xee6 <Serial_read_string+0x50>
     eac:	8a 01       	movw	r16, r20
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
     eb2:	c0 e0       	ldi	r28, 0x00	; 0
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
		//get latest character
		latest = Serial_read(port);
     eb6:	c7 01       	movw	r24, r14
     eb8:	cb df       	rcall	.-106    	; 0xe50 <Serial_read>
		if (latest != 0xFF) {
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	69 f0       	breq	.+26     	; 0xed8 <Serial_read_string+0x42>
			if (latest == 0x0D) {
     ebe:	8d 30       	cpi	r24, 0x0D	; 13
     ec0:	31 f4       	brne	.+12     	; 0xece <Serial_read_string+0x38>
				//the input has terminated
				data[i] = 0x00;//null terminate string
     ec2:	cc 0d       	add	r28, r12
     ec4:	dd 1d       	adc	r29, r13
     ec6:	18 82       	st	Y, r1
				return 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e c0       	rjmp	.+28     	; 0xeea <Serial_read_string+0x54>
			}
			//write the next character into the buffer
			data[i++]=latest;
     ece:	f6 01       	movw	r30, r12
     ed0:	ec 0f       	add	r30, r28
     ed2:	fd 1f       	adc	r31, r29
     ed4:	80 83       	st	Z, r24
     ed6:	21 96       	adiw	r28, 0x01	; 1
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
     ed8:	26 d9       	rcall	.-3508   	; 0x126 <x_yield>
int Serial_read_string(int port, char * data, int data_length) {
	char latest;
	int i = 0;
	
	//loop until end of data
	while (i < data_length) {
     eda:	c0 17       	cp	r28, r16
     edc:	d1 07       	cpc	r29, r17
     ede:	5c f3       	brlt	.-42     	; 0xeb6 <Serial_read_string+0x20>
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
	}
	//we've used more than the whole array, error
	return 0;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <Serial_read_string+0x54>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
}
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	08 95       	ret

00000efc <Serial_write>:

int Serial_write(int port, char data)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
	if (Q_putc(ports[port].tx_qid, data))
     f02:	fc 01       	movw	r30, r24
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	e2 5f       	subi	r30, 0xF2	; 242
     f1a:	fd 4f       	sbci	r31, 0xFD	; 253
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	78 dd       	rcall	.-1296   	; 0xa10 <Q_putc>
     f20:	88 23       	and	r24, r24
     f22:	61 f0       	breq	.+24     	; 0xf3c <Serial_write+0x40>
	{
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line	
		regs[port]->ucsrb |= (1<<UDRIE0); 
     f24:	cc 0f       	add	r28, r28
     f26:	dd 1f       	adc	r29, r29
     f28:	ca 5f       	subi	r28, 0xFA	; 250
     f2a:	dd 4f       	sbci	r29, 0xFD	; 253
     f2c:	e8 81       	ld	r30, Y
     f2e:	f9 81       	ldd	r31, Y+1	; 0x01
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	81 83       	std	Z+1, r24	; 0x01
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;	
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <Serial_write+0x44>
	}
	return -1;
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
	
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <Serial_write_string>:
	{
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
	for (int i = 0; i < data_length; i++) {
     f52:	14 16       	cp	r1, r20
     f54:	15 06       	cpc	r1, r21
     f56:	5c f4       	brge	.+22     	; 0xf6e <Serial_write_string+0x28>
     f58:	8b 01       	movw	r16, r22
     f5a:	7c 01       	movw	r14, r24
     f5c:	eb 01       	movw	r28, r22
     f5e:	04 0f       	add	r16, r20
     f60:	15 1f       	adc	r17, r21
		Serial_write(port, data[i]);
     f62:	69 91       	ld	r22, Y+
     f64:	c7 01       	movw	r24, r14
     f66:	ca df       	rcall	.-108    	; 0xefc <Serial_write>
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
	for (int i = 0; i < data_length; i++) {
     f68:	c0 17       	cp	r28, r16
     f6a:	d1 07       	cpc	r29, r17
     f6c:	d1 f7       	brne	.-12     	; 0xf62 <Serial_write_string+0x1c>
		Serial_write(port, data[i]);
	}
	return 1;
}
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	08 95       	ret

00000f80 <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	0b b6       	in	r0, 0x3b	; 59
     f8c:	0f 92       	push	r0
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	1f 92       	push	r1
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
     fb0:	be 01       	movw	r22, r28
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	80 91 0f 02 	lds	r24, 0x020F
     fba:	99 dd       	rcall	.-1230   	; 0xaee <Q_getc>
     fbc:	88 23       	and	r24, r24
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <__vector_26+0x48>
	{
		UDR0 = data;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	80 93 c6 00 	sts	0x00C6, r24
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
     fc8:	e0 91 06 02 	lds	r30, 0x0206
     fcc:	f0 91 07 02 	lds	r31, 0x0207
     fd0:	81 81       	ldd	r24, Z+1	; 0x01
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	81 83       	std	Z+1, r24	; 0x01
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0b be       	out	0x3b, r0	; 59
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_37>:


ISR(USART1_UDRE_vect)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	0b b6       	in	r0, 0x3b	; 59
    100e:	0f 92       	push	r0
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	1f 92       	push	r1
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	80 91 19 02 	lds	r24, 0x0219
    103c:	58 dd       	rcall	.-1360   	; 0xaee <Q_getc>
    103e:	88 23       	and	r24, r24
    1040:	21 f0       	breq	.+8      	; 0x104a <__vector_37+0x48>
	{
		UDR1 = data;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	80 93 ce 00 	sts	0x00CE, r24
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
    104a:	e0 91 08 02 	lds	r30, 0x0208
    104e:	f0 91 09 02 	lds	r31, 0x0209
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	8f 7d       	andi	r24, 0xDF	; 223
    1056:	81 83       	std	Z+1, r24	; 0x01
	}
}
    1058:	0f 90       	pop	r0
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0b be       	out	0x3b, r0	; 59
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	0b b6       	in	r0, 0x3b	; 59
    1090:	0f 92       	push	r0
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	1f 92       	push	r1
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	80 91 23 02 	lds	r24, 0x0223
    10be:	17 dd       	rcall	.-1490   	; 0xaee <Q_getc>
    10c0:	88 23       	and	r24, r24
    10c2:	21 f0       	breq	.+8      	; 0x10cc <__vector_52+0x48>
	{
		UDR2 = data;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	80 93 d6 00 	sts	0x00D6, r24
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
    10cc:	e0 91 0a 02 	lds	r30, 0x020A
    10d0:	f0 91 0b 02 	lds	r31, 0x020B
    10d4:	81 81       	ldd	r24, Z+1	; 0x01
    10d6:	8f 7d       	andi	r24, 0xDF	; 223
    10d8:	81 83       	std	Z+1, r24	; 0x01
	}
}
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0b be       	out	0x3b, r0	; 59
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	0b b6       	in	r0, 0x3b	; 59
    1112:	0f 92       	push	r0
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
    1136:	be 01       	movw	r22, r28
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	80 91 2d 02 	lds	r24, 0x022D
    1140:	d6 dc       	rcall	.-1620   	; 0xaee <Q_getc>
    1142:	88 23       	and	r24, r24
    1144:	21 f0       	breq	.+8      	; 0x114e <__vector_55+0x48>
	{
		UDR3 = data;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	80 93 36 01 	sts	0x0136, r24
    114c:	07 c0       	rjmp	.+14     	; 0x115c <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
    114e:	e0 91 0c 02 	lds	r30, 0x020C
    1152:	f0 91 0d 02 	lds	r31, 0x020D
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	8f 7d       	andi	r24, 0xDF	; 223
    115a:	81 83       	std	Z+1, r24	; 0x01
	}
}
    115c:	0f 90       	pop	r0
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_25>:

ISR(USART0_RX_vect)
{
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	0b b6       	in	r0, 0x3b	; 59
    1194:	0f 92       	push	r0
    1196:	2f 93       	push	r18
    1198:	3f 93       	push	r19
    119a:	4f 93       	push	r20
    119c:	5f 93       	push	r21
    119e:	6f 93       	push	r22
    11a0:	7f 93       	push	r23
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
    11a6:	af 93       	push	r26
    11a8:	bf 93       	push	r27
    11aa:	ef 93       	push	r30
    11ac:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
    11ae:	60 91 c6 00 	lds	r22, 0x00C6
    11b2:	80 91 0e 02 	lds	r24, 0x020E
    11b6:	2c dc       	rcall	.-1960   	; 0xa10 <Q_putc>
}
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0b be       	out	0x3b, r0	; 59
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_36>:

ISR(USART1_RX_vect)
{
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	0b b6       	in	r0, 0x3b	; 59
    11ea:	0f 92       	push	r0
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
    1204:	60 91 ce 00 	lds	r22, 0x00CE
    1208:	80 91 18 02 	lds	r24, 0x0218
    120c:	01 dc       	rcall	.-2046   	; 0xa10 <Q_putc>
}
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <__vector_51>:

ISR(USART2_RX_vect)
{
    1234:	1f 92       	push	r1
    1236:	0f 92       	push	r0
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	0f 92       	push	r0
    123c:	11 24       	eor	r1, r1
    123e:	0b b6       	in	r0, 0x3b	; 59
    1240:	0f 92       	push	r0
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
    125a:	60 91 d6 00 	lds	r22, 0x00D6
    125e:	80 91 22 02 	lds	r24, 0x0222
    1262:	d6 db       	rcall	.-2132   	; 0xa10 <Q_putc>
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_54>:

ISR(USART3_RX_vect)
{
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	0b b6       	in	r0, 0x3b	; 59
    1296:	0f 92       	push	r0
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
    12b0:	60 91 36 01 	lds	r22, 0x0136
    12b4:	80 91 2c 02 	lds	r24, 0x022C
    12b8:	ab db       	rcall	.-2218   	; 0xa10 <Q_putc>
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__divmodhi4>:
    12e0:	97 fb       	bst	r25, 7
    12e2:	07 2e       	mov	r0, r23
    12e4:	16 f4       	brtc	.+4      	; 0x12ea <__divmodhi4+0xa>
    12e6:	00 94       	com	r0
    12e8:	06 d0       	rcall	.+12     	; 0x12f6 <__divmodhi4_neg1>
    12ea:	77 fd       	sbrc	r23, 7
    12ec:	08 d0       	rcall	.+16     	; 0x12fe <__divmodhi4_neg2>
    12ee:	0b d0       	rcall	.+22     	; 0x1306 <__udivmodhi4>
    12f0:	07 fc       	sbrc	r0, 7
    12f2:	05 d0       	rcall	.+10     	; 0x12fe <__divmodhi4_neg2>
    12f4:	3e f4       	brtc	.+14     	; 0x1304 <__divmodhi4_exit>

000012f6 <__divmodhi4_neg1>:
    12f6:	90 95       	com	r25
    12f8:	81 95       	neg	r24
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	08 95       	ret

000012fe <__divmodhi4_neg2>:
    12fe:	70 95       	com	r23
    1300:	61 95       	neg	r22
    1302:	7f 4f       	sbci	r23, 0xFF	; 255

00001304 <__divmodhi4_exit>:
    1304:	08 95       	ret

00001306 <__udivmodhi4>:
    1306:	aa 1b       	sub	r26, r26
    1308:	bb 1b       	sub	r27, r27
    130a:	51 e1       	ldi	r21, 0x11	; 17
    130c:	07 c0       	rjmp	.+14     	; 0x131c <__udivmodhi4_ep>

0000130e <__udivmodhi4_loop>:
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	a6 17       	cp	r26, r22
    1314:	b7 07       	cpc	r27, r23
    1316:	10 f0       	brcs	.+4      	; 0x131c <__udivmodhi4_ep>
    1318:	a6 1b       	sub	r26, r22
    131a:	b7 0b       	sbc	r27, r23

0000131c <__udivmodhi4_ep>:
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	5a 95       	dec	r21
    1322:	a9 f7       	brne	.-22     	; 0x130e <__udivmodhi4_loop>
    1324:	80 95       	com	r24
    1326:	90 95       	com	r25
    1328:	bc 01       	movw	r22, r24
    132a:	cd 01       	movw	r24, r26
    132c:	08 95       	ret

0000132e <atoi>:
    132e:	fc 01       	movw	r30, r24
    1330:	88 27       	eor	r24, r24
    1332:	99 27       	eor	r25, r25
    1334:	e8 94       	clt
    1336:	21 91       	ld	r18, Z+
    1338:	20 32       	cpi	r18, 0x20	; 32
    133a:	e9 f3       	breq	.-6      	; 0x1336 <atoi+0x8>
    133c:	29 30       	cpi	r18, 0x09	; 9
    133e:	10 f0       	brcs	.+4      	; 0x1344 <atoi+0x16>
    1340:	2e 30       	cpi	r18, 0x0E	; 14
    1342:	c8 f3       	brcs	.-14     	; 0x1336 <atoi+0x8>
    1344:	2b 32       	cpi	r18, 0x2B	; 43
    1346:	39 f0       	breq	.+14     	; 0x1356 <atoi+0x28>
    1348:	2d 32       	cpi	r18, 0x2D	; 45
    134a:	31 f4       	brne	.+12     	; 0x1358 <atoi+0x2a>
    134c:	68 94       	set
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <atoi+0x28>
    1350:	14 d0       	rcall	.+40     	; 0x137a <__mulhi_const_10>
    1352:	82 0f       	add	r24, r18
    1354:	91 1d       	adc	r25, r1
    1356:	21 91       	ld	r18, Z+
    1358:	20 53       	subi	r18, 0x30	; 48
    135a:	2a 30       	cpi	r18, 0x0A	; 10
    135c:	c8 f3       	brcs	.-14     	; 0x1350 <atoi+0x22>
    135e:	1e f4       	brtc	.+6      	; 0x1366 <atoi+0x38>
    1360:	90 95       	com	r25
    1362:	81 95       	neg	r24
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <strcmp>:
    1368:	fb 01       	movw	r30, r22
    136a:	dc 01       	movw	r26, r24
    136c:	8d 91       	ld	r24, X+
    136e:	01 90       	ld	r0, Z+
    1370:	80 19       	sub	r24, r0
    1372:	01 10       	cpse	r0, r1
    1374:	d9 f3       	breq	.-10     	; 0x136c <strcmp+0x4>
    1376:	99 0b       	sbc	r25, r25
    1378:	08 95       	ret

0000137a <__mulhi_const_10>:
    137a:	7a e0       	ldi	r23, 0x0A	; 10
    137c:	97 9f       	mul	r25, r23
    137e:	90 2d       	mov	r25, r0
    1380:	87 9f       	mul	r24, r23
    1382:	80 2d       	mov	r24, r0
    1384:	91 0d       	add	r25, r1
    1386:	11 24       	eor	r1, r1
    1388:	08 95       	ret

0000138a <sprintf>:
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	2e 97       	sbiw	r28, 0x0e	; 14
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	0e 89       	ldd	r16, Y+22	; 0x16
    13a4:	1f 89       	ldd	r17, Y+23	; 0x17
    13a6:	86 e0       	ldi	r24, 0x06	; 6
    13a8:	8c 83       	std	Y+4, r24	; 0x04
    13aa:	1a 83       	std	Y+2, r17	; 0x02
    13ac:	09 83       	std	Y+1, r16	; 0x01
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	9f e7       	ldi	r25, 0x7F	; 127
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
    13b6:	ae 01       	movw	r20, r28
    13b8:	46 5e       	subi	r20, 0xE6	; 230
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	68 8d       	ldd	r22, Y+24	; 0x18
    13be:	79 8d       	ldd	r23, Y+25	; 0x19
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	11 d0       	rcall	.+34     	; 0x13e8 <vfprintf>
    13c6:	2f 81       	ldd	r18, Y+7	; 0x07
    13c8:	38 85       	ldd	r19, Y+8	; 0x08
    13ca:	f8 01       	movw	r30, r16
    13cc:	e2 0f       	add	r30, r18
    13ce:	f3 1f       	adc	r31, r19
    13d0:	10 82       	st	Z, r1
    13d2:	2e 96       	adiw	r28, 0x0e	; 14
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <vfprintf>:
    13e8:	2f 92       	push	r2
    13ea:	3f 92       	push	r3
    13ec:	4f 92       	push	r4
    13ee:	5f 92       	push	r5
    13f0:	6f 92       	push	r6
    13f2:	7f 92       	push	r7
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	2c 97       	sbiw	r28, 0x0c	; 12
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	7c 01       	movw	r14, r24
    141e:	6b 01       	movw	r12, r22
    1420:	8a 01       	movw	r16, r20
    1422:	fc 01       	movw	r30, r24
    1424:	17 82       	std	Z+7, r1	; 0x07
    1426:	16 82       	std	Z+6, r1	; 0x06
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	81 ff       	sbrs	r24, 1
    142c:	b0 c1       	rjmp	.+864    	; 0x178e <vfprintf+0x3a6>
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	4c 01       	movw	r8, r24
    1434:	f7 01       	movw	r30, r14
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	f6 01       	movw	r30, r12
    143a:	93 fd       	sbrc	r25, 3
    143c:	85 91       	lpm	r24, Z+
    143e:	93 ff       	sbrs	r25, 3
    1440:	81 91       	ld	r24, Z+
    1442:	6f 01       	movw	r12, r30
    1444:	88 23       	and	r24, r24
    1446:	09 f4       	brne	.+2      	; 0x144a <vfprintf+0x62>
    1448:	9e c1       	rjmp	.+828    	; 0x1786 <vfprintf+0x39e>
    144a:	85 32       	cpi	r24, 0x25	; 37
    144c:	39 f4       	brne	.+14     	; 0x145c <vfprintf+0x74>
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	6f 01       	movw	r12, r30
    1458:	85 32       	cpi	r24, 0x25	; 37
    145a:	21 f4       	brne	.+8      	; 0x1464 <vfprintf+0x7c>
    145c:	b7 01       	movw	r22, r14
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	c7 d1       	rcall	.+910    	; 0x17f0 <fputc>
    1462:	e8 cf       	rjmp	.-48     	; 0x1434 <vfprintf+0x4c>
    1464:	51 2c       	mov	r5, r1
    1466:	31 2c       	mov	r3, r1
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	20 32       	cpi	r18, 0x20	; 32
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <vfprintf+0xae>
    146e:	8b 32       	cpi	r24, 0x2B	; 43
    1470:	69 f0       	breq	.+26     	; 0x148c <vfprintf+0xa4>
    1472:	30 f4       	brcc	.+12     	; 0x1480 <vfprintf+0x98>
    1474:	80 32       	cpi	r24, 0x20	; 32
    1476:	59 f0       	breq	.+22     	; 0x148e <vfprintf+0xa6>
    1478:	83 32       	cpi	r24, 0x23	; 35
    147a:	69 f4       	brne	.+26     	; 0x1496 <vfprintf+0xae>
    147c:	20 61       	ori	r18, 0x10	; 16
    147e:	2c c0       	rjmp	.+88     	; 0x14d8 <vfprintf+0xf0>
    1480:	8d 32       	cpi	r24, 0x2D	; 45
    1482:	39 f0       	breq	.+14     	; 0x1492 <vfprintf+0xaa>
    1484:	80 33       	cpi	r24, 0x30	; 48
    1486:	39 f4       	brne	.+14     	; 0x1496 <vfprintf+0xae>
    1488:	21 60       	ori	r18, 0x01	; 1
    148a:	26 c0       	rjmp	.+76     	; 0x14d8 <vfprintf+0xf0>
    148c:	22 60       	ori	r18, 0x02	; 2
    148e:	24 60       	ori	r18, 0x04	; 4
    1490:	23 c0       	rjmp	.+70     	; 0x14d8 <vfprintf+0xf0>
    1492:	28 60       	ori	r18, 0x08	; 8
    1494:	21 c0       	rjmp	.+66     	; 0x14d8 <vfprintf+0xf0>
    1496:	27 fd       	sbrc	r18, 7
    1498:	27 c0       	rjmp	.+78     	; 0x14e8 <vfprintf+0x100>
    149a:	30 ed       	ldi	r19, 0xD0	; 208
    149c:	38 0f       	add	r19, r24
    149e:	3a 30       	cpi	r19, 0x0A	; 10
    14a0:	78 f4       	brcc	.+30     	; 0x14c0 <vfprintf+0xd8>
    14a2:	26 ff       	sbrs	r18, 6
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0xca>
    14a6:	fa e0       	ldi	r31, 0x0A	; 10
    14a8:	5f 9e       	mul	r5, r31
    14aa:	30 0d       	add	r19, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	53 2e       	mov	r5, r19
    14b0:	13 c0       	rjmp	.+38     	; 0x14d8 <vfprintf+0xf0>
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	38 9e       	mul	r3, r24
    14b6:	30 0d       	add	r19, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	33 2e       	mov	r3, r19
    14bc:	20 62       	ori	r18, 0x20	; 32
    14be:	0c c0       	rjmp	.+24     	; 0x14d8 <vfprintf+0xf0>
    14c0:	8e 32       	cpi	r24, 0x2E	; 46
    14c2:	21 f4       	brne	.+8      	; 0x14cc <vfprintf+0xe4>
    14c4:	26 fd       	sbrc	r18, 6
    14c6:	5f c1       	rjmp	.+702    	; 0x1786 <vfprintf+0x39e>
    14c8:	20 64       	ori	r18, 0x40	; 64
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0xf0>
    14cc:	8c 36       	cpi	r24, 0x6C	; 108
    14ce:	11 f4       	brne	.+4      	; 0x14d4 <vfprintf+0xec>
    14d0:	20 68       	ori	r18, 0x80	; 128
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <vfprintf+0xf0>
    14d4:	88 36       	cpi	r24, 0x68	; 104
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <vfprintf+0x100>
    14d8:	f6 01       	movw	r30, r12
    14da:	93 fd       	sbrc	r25, 3
    14dc:	85 91       	lpm	r24, Z+
    14de:	93 ff       	sbrs	r25, 3
    14e0:	81 91       	ld	r24, Z+
    14e2:	6f 01       	movw	r12, r30
    14e4:	81 11       	cpse	r24, r1
    14e6:	c1 cf       	rjmp	.-126    	; 0x146a <vfprintf+0x82>
    14e8:	98 2f       	mov	r25, r24
    14ea:	9f 7d       	andi	r25, 0xDF	; 223
    14ec:	95 54       	subi	r25, 0x45	; 69
    14ee:	93 30       	cpi	r25, 0x03	; 3
    14f0:	28 f4       	brcc	.+10     	; 0x14fc <vfprintf+0x114>
    14f2:	0c 5f       	subi	r16, 0xFC	; 252
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	ff e3       	ldi	r31, 0x3F	; 63
    14f8:	f9 83       	std	Y+1, r31	; 0x01
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <vfprintf+0x12e>
    14fc:	83 36       	cpi	r24, 0x63	; 99
    14fe:	31 f0       	breq	.+12     	; 0x150c <vfprintf+0x124>
    1500:	83 37       	cpi	r24, 0x73	; 115
    1502:	71 f0       	breq	.+28     	; 0x1520 <vfprintf+0x138>
    1504:	83 35       	cpi	r24, 0x53	; 83
    1506:	09 f0       	breq	.+2      	; 0x150a <vfprintf+0x122>
    1508:	57 c0       	rjmp	.+174    	; 0x15b8 <vfprintf+0x1d0>
    150a:	21 c0       	rjmp	.+66     	; 0x154e <vfprintf+0x166>
    150c:	f8 01       	movw	r30, r16
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	44 24       	eor	r4, r4
    1518:	43 94       	inc	r4
    151a:	51 2c       	mov	r5, r1
    151c:	54 01       	movw	r10, r8
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <vfprintf+0x160>
    1520:	38 01       	movw	r6, r16
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	6f 0e       	add	r6, r31
    1526:	71 1c       	adc	r7, r1
    1528:	f8 01       	movw	r30, r16
    152a:	a0 80       	ld	r10, Z
    152c:	b1 80       	ldd	r11, Z+1	; 0x01
    152e:	26 ff       	sbrs	r18, 6
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <vfprintf+0x150>
    1532:	65 2d       	mov	r22, r5
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x154>
    1538:	6f ef       	ldi	r22, 0xFF	; 255
    153a:	7f ef       	ldi	r23, 0xFF	; 255
    153c:	c5 01       	movw	r24, r10
    153e:	2c 87       	std	Y+12, r18	; 0x0c
    1540:	4c d1       	rcall	.+664    	; 0x17da <strnlen>
    1542:	2c 01       	movw	r4, r24
    1544:	83 01       	movw	r16, r6
    1546:	2c 85       	ldd	r18, Y+12	; 0x0c
    1548:	2f 77       	andi	r18, 0x7F	; 127
    154a:	22 2e       	mov	r2, r18
    154c:	16 c0       	rjmp	.+44     	; 0x157a <vfprintf+0x192>
    154e:	38 01       	movw	r6, r16
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	6f 0e       	add	r6, r31
    1554:	71 1c       	adc	r7, r1
    1556:	f8 01       	movw	r30, r16
    1558:	a0 80       	ld	r10, Z
    155a:	b1 80       	ldd	r11, Z+1	; 0x01
    155c:	26 ff       	sbrs	r18, 6
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfprintf+0x17e>
    1560:	65 2d       	mov	r22, r5
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0x182>
    1566:	6f ef       	ldi	r22, 0xFF	; 255
    1568:	7f ef       	ldi	r23, 0xFF	; 255
    156a:	c5 01       	movw	r24, r10
    156c:	2c 87       	std	Y+12, r18	; 0x0c
    156e:	2a d1       	rcall	.+596    	; 0x17c4 <strnlen_P>
    1570:	2c 01       	movw	r4, r24
    1572:	2c 85       	ldd	r18, Y+12	; 0x0c
    1574:	20 68       	ori	r18, 0x80	; 128
    1576:	22 2e       	mov	r2, r18
    1578:	83 01       	movw	r16, r6
    157a:	23 fc       	sbrc	r2, 3
    157c:	19 c0       	rjmp	.+50     	; 0x15b0 <vfprintf+0x1c8>
    157e:	83 2d       	mov	r24, r3
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	48 16       	cp	r4, r24
    1584:	59 06       	cpc	r5, r25
    1586:	a0 f4       	brcc	.+40     	; 0x15b0 <vfprintf+0x1c8>
    1588:	b7 01       	movw	r22, r14
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	30 d1       	rcall	.+608    	; 0x17f0 <fputc>
    1590:	3a 94       	dec	r3
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <vfprintf+0x196>
    1594:	f5 01       	movw	r30, r10
    1596:	27 fc       	sbrc	r2, 7
    1598:	85 91       	lpm	r24, Z+
    159a:	27 fe       	sbrs	r2, 7
    159c:	81 91       	ld	r24, Z+
    159e:	5f 01       	movw	r10, r30
    15a0:	b7 01       	movw	r22, r14
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	25 d1       	rcall	.+586    	; 0x17f0 <fputc>
    15a6:	31 10       	cpse	r3, r1
    15a8:	3a 94       	dec	r3
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	4f 1a       	sub	r4, r31
    15ae:	51 08       	sbc	r5, r1
    15b0:	41 14       	cp	r4, r1
    15b2:	51 04       	cpc	r5, r1
    15b4:	79 f7       	brne	.-34     	; 0x1594 <vfprintf+0x1ac>
    15b6:	de c0       	rjmp	.+444    	; 0x1774 <vfprintf+0x38c>
    15b8:	84 36       	cpi	r24, 0x64	; 100
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <vfprintf+0x1d8>
    15bc:	89 36       	cpi	r24, 0x69	; 105
    15be:	31 f5       	brne	.+76     	; 0x160c <vfprintf+0x224>
    15c0:	f8 01       	movw	r30, r16
    15c2:	27 ff       	sbrs	r18, 7
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <vfprintf+0x1ec>
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	0c 5f       	subi	r16, 0xFC	; 252
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x1fc>
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	07 2e       	mov	r0, r23
    15da:	00 0c       	add	r0, r0
    15dc:	88 0b       	sbc	r24, r24
    15de:	99 0b       	sbc	r25, r25
    15e0:	0e 5f       	subi	r16, 0xFE	; 254
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	2f 76       	andi	r18, 0x6F	; 111
    15e6:	72 2e       	mov	r7, r18
    15e8:	97 ff       	sbrs	r25, 7
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x216>
    15ec:	90 95       	com	r25
    15ee:	80 95       	com	r24
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	20 68       	ori	r18, 0x80	; 128
    15fc:	72 2e       	mov	r7, r18
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a4 01       	movw	r20, r8
    1604:	2d d1       	rcall	.+602    	; 0x1860 <__ultoa_invert>
    1606:	a8 2e       	mov	r10, r24
    1608:	a8 18       	sub	r10, r8
    160a:	43 c0       	rjmp	.+134    	; 0x1692 <vfprintf+0x2aa>
    160c:	85 37       	cpi	r24, 0x75	; 117
    160e:	29 f4       	brne	.+10     	; 0x161a <vfprintf+0x232>
    1610:	2f 7e       	andi	r18, 0xEF	; 239
    1612:	b2 2e       	mov	r11, r18
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	25 c0       	rjmp	.+74     	; 0x1664 <vfprintf+0x27c>
    161a:	f2 2f       	mov	r31, r18
    161c:	f9 7f       	andi	r31, 0xF9	; 249
    161e:	bf 2e       	mov	r11, r31
    1620:	8f 36       	cpi	r24, 0x6F	; 111
    1622:	c1 f0       	breq	.+48     	; 0x1654 <vfprintf+0x26c>
    1624:	18 f4       	brcc	.+6      	; 0x162c <vfprintf+0x244>
    1626:	88 35       	cpi	r24, 0x58	; 88
    1628:	79 f0       	breq	.+30     	; 0x1648 <vfprintf+0x260>
    162a:	ad c0       	rjmp	.+346    	; 0x1786 <vfprintf+0x39e>
    162c:	80 37       	cpi	r24, 0x70	; 112
    162e:	19 f0       	breq	.+6      	; 0x1636 <vfprintf+0x24e>
    1630:	88 37       	cpi	r24, 0x78	; 120
    1632:	21 f0       	breq	.+8      	; 0x163c <vfprintf+0x254>
    1634:	a8 c0       	rjmp	.+336    	; 0x1786 <vfprintf+0x39e>
    1636:	2f 2f       	mov	r18, r31
    1638:	20 61       	ori	r18, 0x10	; 16
    163a:	b2 2e       	mov	r11, r18
    163c:	b4 fe       	sbrs	r11, 4
    163e:	0d c0       	rjmp	.+26     	; 0x165a <vfprintf+0x272>
    1640:	8b 2d       	mov	r24, r11
    1642:	84 60       	ori	r24, 0x04	; 4
    1644:	b8 2e       	mov	r11, r24
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x272>
    1648:	24 ff       	sbrs	r18, 4
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <vfprintf+0x278>
    164c:	9f 2f       	mov	r25, r31
    164e:	96 60       	ori	r25, 0x06	; 6
    1650:	b9 2e       	mov	r11, r25
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <vfprintf+0x278>
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x27c>
    165a:	20 e1       	ldi	r18, 0x10	; 16
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x27c>
    1660:	20 e1       	ldi	r18, 0x10	; 16
    1662:	32 e0       	ldi	r19, 0x02	; 2
    1664:	f8 01       	movw	r30, r16
    1666:	b7 fe       	sbrs	r11, 7
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <vfprintf+0x290>
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0c 5f       	subi	r16, 0xFC	; 252
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <vfprintf+0x29c>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 5f       	subi	r16, 0xFE	; 254
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	a4 01       	movw	r20, r8
    1686:	ec d0       	rcall	.+472    	; 0x1860 <__ultoa_invert>
    1688:	a8 2e       	mov	r10, r24
    168a:	a8 18       	sub	r10, r8
    168c:	fb 2d       	mov	r31, r11
    168e:	ff 77       	andi	r31, 0x7F	; 127
    1690:	7f 2e       	mov	r7, r31
    1692:	76 fe       	sbrs	r7, 6
    1694:	0b c0       	rjmp	.+22     	; 0x16ac <vfprintf+0x2c4>
    1696:	37 2d       	mov	r19, r7
    1698:	3e 7f       	andi	r19, 0xFE	; 254
    169a:	a5 14       	cp	r10, r5
    169c:	50 f4       	brcc	.+20     	; 0x16b2 <vfprintf+0x2ca>
    169e:	74 fe       	sbrs	r7, 4
    16a0:	0a c0       	rjmp	.+20     	; 0x16b6 <vfprintf+0x2ce>
    16a2:	72 fc       	sbrc	r7, 2
    16a4:	08 c0       	rjmp	.+16     	; 0x16b6 <vfprintf+0x2ce>
    16a6:	37 2d       	mov	r19, r7
    16a8:	3e 7e       	andi	r19, 0xEE	; 238
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <vfprintf+0x2ce>
    16ac:	ba 2c       	mov	r11, r10
    16ae:	37 2d       	mov	r19, r7
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <vfprintf+0x2d0>
    16b2:	ba 2c       	mov	r11, r10
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <vfprintf+0x2d0>
    16b6:	b5 2c       	mov	r11, r5
    16b8:	34 ff       	sbrs	r19, 4
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <vfprintf+0x2ee>
    16bc:	fe 01       	movw	r30, r28
    16be:	ea 0d       	add	r30, r10
    16c0:	f1 1d       	adc	r31, r1
    16c2:	80 81       	ld	r24, Z
    16c4:	80 33       	cpi	r24, 0x30	; 48
    16c6:	11 f4       	brne	.+4      	; 0x16cc <vfprintf+0x2e4>
    16c8:	39 7e       	andi	r19, 0xE9	; 233
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x2f6>
    16cc:	32 ff       	sbrs	r19, 2
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <vfprintf+0x2f4>
    16d0:	b3 94       	inc	r11
    16d2:	b3 94       	inc	r11
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <vfprintf+0x2f6>
    16d6:	83 2f       	mov	r24, r19
    16d8:	86 78       	andi	r24, 0x86	; 134
    16da:	09 f0       	breq	.+2      	; 0x16de <vfprintf+0x2f6>
    16dc:	b3 94       	inc	r11
    16de:	33 fd       	sbrc	r19, 3
    16e0:	12 c0       	rjmp	.+36     	; 0x1706 <vfprintf+0x31e>
    16e2:	30 ff       	sbrs	r19, 0
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x30a>
    16e6:	5a 2c       	mov	r5, r10
    16e8:	b3 14       	cp	r11, r3
    16ea:	18 f4       	brcc	.+6      	; 0x16f2 <vfprintf+0x30a>
    16ec:	53 0c       	add	r5, r3
    16ee:	5b 18       	sub	r5, r11
    16f0:	b3 2c       	mov	r11, r3
    16f2:	b3 14       	cp	r11, r3
    16f4:	60 f4       	brcc	.+24     	; 0x170e <vfprintf+0x326>
    16f6:	b7 01       	movw	r22, r14
    16f8:	80 e2       	ldi	r24, 0x20	; 32
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	3c 87       	std	Y+12, r19	; 0x0c
    16fe:	78 d0       	rcall	.+240    	; 0x17f0 <fputc>
    1700:	b3 94       	inc	r11
    1702:	3c 85       	ldd	r19, Y+12	; 0x0c
    1704:	f6 cf       	rjmp	.-20     	; 0x16f2 <vfprintf+0x30a>
    1706:	b3 14       	cp	r11, r3
    1708:	10 f4       	brcc	.+4      	; 0x170e <vfprintf+0x326>
    170a:	3b 18       	sub	r3, r11
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <vfprintf+0x328>
    170e:	31 2c       	mov	r3, r1
    1710:	34 ff       	sbrs	r19, 4
    1712:	11 c0       	rjmp	.+34     	; 0x1736 <vfprintf+0x34e>
    1714:	b7 01       	movw	r22, r14
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	3c 87       	std	Y+12, r19	; 0x0c
    171c:	69 d0       	rcall	.+210    	; 0x17f0 <fputc>
    171e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1720:	32 ff       	sbrs	r19, 2
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <vfprintf+0x368>
    1724:	31 fd       	sbrc	r19, 1
    1726:	03 c0       	rjmp	.+6      	; 0x172e <vfprintf+0x346>
    1728:	88 e7       	ldi	r24, 0x78	; 120
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0x34a>
    172e:	88 e5       	ldi	r24, 0x58	; 88
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	b7 01       	movw	r22, r14
    1734:	0c c0       	rjmp	.+24     	; 0x174e <vfprintf+0x366>
    1736:	83 2f       	mov	r24, r19
    1738:	86 78       	andi	r24, 0x86	; 134
    173a:	51 f0       	breq	.+20     	; 0x1750 <vfprintf+0x368>
    173c:	31 ff       	sbrs	r19, 1
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x35c>
    1740:	8b e2       	ldi	r24, 0x2B	; 43
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vfprintf+0x35e>
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	37 fd       	sbrc	r19, 7
    1748:	8d e2       	ldi	r24, 0x2D	; 45
    174a:	b7 01       	movw	r22, r14
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	50 d0       	rcall	.+160    	; 0x17f0 <fputc>
    1750:	a5 14       	cp	r10, r5
    1752:	30 f4       	brcc	.+12     	; 0x1760 <vfprintf+0x378>
    1754:	b7 01       	movw	r22, r14
    1756:	80 e3       	ldi	r24, 0x30	; 48
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	4a d0       	rcall	.+148    	; 0x17f0 <fputc>
    175c:	5a 94       	dec	r5
    175e:	f8 cf       	rjmp	.-16     	; 0x1750 <vfprintf+0x368>
    1760:	aa 94       	dec	r10
    1762:	f4 01       	movw	r30, r8
    1764:	ea 0d       	add	r30, r10
    1766:	f1 1d       	adc	r31, r1
    1768:	80 81       	ld	r24, Z
    176a:	b7 01       	movw	r22, r14
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	40 d0       	rcall	.+128    	; 0x17f0 <fputc>
    1770:	a1 10       	cpse	r10, r1
    1772:	f6 cf       	rjmp	.-20     	; 0x1760 <vfprintf+0x378>
    1774:	33 20       	and	r3, r3
    1776:	09 f4       	brne	.+2      	; 0x177a <vfprintf+0x392>
    1778:	5d ce       	rjmp	.-838    	; 0x1434 <vfprintf+0x4c>
    177a:	b7 01       	movw	r22, r14
    177c:	80 e2       	ldi	r24, 0x20	; 32
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	37 d0       	rcall	.+110    	; 0x17f0 <fputc>
    1782:	3a 94       	dec	r3
    1784:	f7 cf       	rjmp	.-18     	; 0x1774 <vfprintf+0x38c>
    1786:	f7 01       	movw	r30, r14
    1788:	86 81       	ldd	r24, Z+6	; 0x06
    178a:	97 81       	ldd	r25, Z+7	; 0x07
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x3aa>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	2c 96       	adiw	r28, 0x0c	; 12
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	df 90       	pop	r13
    17ac:	cf 90       	pop	r12
    17ae:	bf 90       	pop	r11
    17b0:	af 90       	pop	r10
    17b2:	9f 90       	pop	r9
    17b4:	8f 90       	pop	r8
    17b6:	7f 90       	pop	r7
    17b8:	6f 90       	pop	r6
    17ba:	5f 90       	pop	r5
    17bc:	4f 90       	pop	r4
    17be:	3f 90       	pop	r3
    17c0:	2f 90       	pop	r2
    17c2:	08 95       	ret

000017c4 <strnlen_P>:
    17c4:	fc 01       	movw	r30, r24
    17c6:	05 90       	lpm	r0, Z+
    17c8:	61 50       	subi	r22, 0x01	; 1
    17ca:	70 40       	sbci	r23, 0x00	; 0
    17cc:	01 10       	cpse	r0, r1
    17ce:	d8 f7       	brcc	.-10     	; 0x17c6 <strnlen_P+0x2>
    17d0:	80 95       	com	r24
    17d2:	90 95       	com	r25
    17d4:	8e 0f       	add	r24, r30
    17d6:	9f 1f       	adc	r25, r31
    17d8:	08 95       	ret

000017da <strnlen>:
    17da:	fc 01       	movw	r30, r24
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	70 40       	sbci	r23, 0x00	; 0
    17e0:	01 90       	ld	r0, Z+
    17e2:	01 10       	cpse	r0, r1
    17e4:	d8 f7       	brcc	.-10     	; 0x17dc <strnlen+0x2>
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	8e 0f       	add	r24, r30
    17ec:	9f 1f       	adc	r25, r31
    17ee:	08 95       	ret

000017f0 <fputc>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	fb 01       	movw	r30, r22
    17fa:	23 81       	ldd	r18, Z+3	; 0x03
    17fc:	21 fd       	sbrc	r18, 1
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <fputc+0x16>
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	9f ef       	ldi	r25, 0xFF	; 255
    1804:	28 c0       	rjmp	.+80     	; 0x1856 <fputc+0x66>
    1806:	22 ff       	sbrs	r18, 2
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <fputc+0x46>
    180a:	46 81       	ldd	r20, Z+6	; 0x06
    180c:	57 81       	ldd	r21, Z+7	; 0x07
    180e:	24 81       	ldd	r18, Z+4	; 0x04
    1810:	35 81       	ldd	r19, Z+5	; 0x05
    1812:	42 17       	cp	r20, r18
    1814:	53 07       	cpc	r21, r19
    1816:	44 f4       	brge	.+16     	; 0x1828 <fputc+0x38>
    1818:	a0 81       	ld	r26, Z
    181a:	b1 81       	ldd	r27, Z+1	; 0x01
    181c:	9d 01       	movw	r18, r26
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    1826:	8c 93       	st	X, r24
    1828:	26 81       	ldd	r18, Z+6	; 0x06
    182a:	37 81       	ldd	r19, Z+7	; 0x07
    182c:	2f 5f       	subi	r18, 0xFF	; 255
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	37 83       	std	Z+7, r19	; 0x07
    1832:	26 83       	std	Z+6, r18	; 0x06
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <fputc+0x66>
    1836:	eb 01       	movw	r28, r22
    1838:	09 2f       	mov	r16, r25
    183a:	18 2f       	mov	r17, r24
    183c:	00 84       	ldd	r0, Z+8	; 0x08
    183e:	f1 85       	ldd	r31, Z+9	; 0x09
    1840:	e0 2d       	mov	r30, r0
    1842:	19 95       	eicall
    1844:	89 2b       	or	r24, r25
    1846:	e1 f6       	brne	.-72     	; 0x1800 <fputc+0x10>
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	9f 81       	ldd	r25, Y+7	; 0x07
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	9f 83       	std	Y+7, r25	; 0x07
    1850:	8e 83       	std	Y+6, r24	; 0x06
    1852:	81 2f       	mov	r24, r17
    1854:	90 2f       	mov	r25, r16
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <__ultoa_invert>:
    1860:	fa 01       	movw	r30, r20
    1862:	aa 27       	eor	r26, r26
    1864:	28 30       	cpi	r18, 0x08	; 8
    1866:	51 f1       	breq	.+84     	; 0x18bc <__ultoa_invert+0x5c>
    1868:	20 31       	cpi	r18, 0x10	; 16
    186a:	81 f1       	breq	.+96     	; 0x18cc <__ultoa_invert+0x6c>
    186c:	e8 94       	clt
    186e:	6f 93       	push	r22
    1870:	6e 7f       	andi	r22, 0xFE	; 254
    1872:	6e 5f       	subi	r22, 0xFE	; 254
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	8f 4f       	sbci	r24, 0xFF	; 255
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	af 4f       	sbci	r26, 0xFF	; 255
    187c:	b1 e0       	ldi	r27, 0x01	; 1
    187e:	3e d0       	rcall	.+124    	; 0x18fc <__ultoa_invert+0x9c>
    1880:	b4 e0       	ldi	r27, 0x04	; 4
    1882:	3c d0       	rcall	.+120    	; 0x18fc <__ultoa_invert+0x9c>
    1884:	67 0f       	add	r22, r23
    1886:	78 1f       	adc	r23, r24
    1888:	89 1f       	adc	r24, r25
    188a:	9a 1f       	adc	r25, r26
    188c:	a1 1d       	adc	r26, r1
    188e:	68 0f       	add	r22, r24
    1890:	79 1f       	adc	r23, r25
    1892:	8a 1f       	adc	r24, r26
    1894:	91 1d       	adc	r25, r1
    1896:	a1 1d       	adc	r26, r1
    1898:	6a 0f       	add	r22, r26
    189a:	71 1d       	adc	r23, r1
    189c:	81 1d       	adc	r24, r1
    189e:	91 1d       	adc	r25, r1
    18a0:	a1 1d       	adc	r26, r1
    18a2:	20 d0       	rcall	.+64     	; 0x18e4 <__ultoa_invert+0x84>
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <__ultoa_invert+0x48>
    18a6:	68 94       	set
    18a8:	3f 91       	pop	r19
    18aa:	2a e0       	ldi	r18, 0x0A	; 10
    18ac:	26 9f       	mul	r18, r22
    18ae:	11 24       	eor	r1, r1
    18b0:	30 19       	sub	r19, r0
    18b2:	30 5d       	subi	r19, 0xD0	; 208
    18b4:	31 93       	st	Z+, r19
    18b6:	de f6       	brtc	.-74     	; 0x186e <__ultoa_invert+0xe>
    18b8:	cf 01       	movw	r24, r30
    18ba:	08 95       	ret
    18bc:	46 2f       	mov	r20, r22
    18be:	47 70       	andi	r20, 0x07	; 7
    18c0:	40 5d       	subi	r20, 0xD0	; 208
    18c2:	41 93       	st	Z+, r20
    18c4:	b3 e0       	ldi	r27, 0x03	; 3
    18c6:	0f d0       	rcall	.+30     	; 0x18e6 <__ultoa_invert+0x86>
    18c8:	c9 f7       	brne	.-14     	; 0x18bc <__ultoa_invert+0x5c>
    18ca:	f6 cf       	rjmp	.-20     	; 0x18b8 <__ultoa_invert+0x58>
    18cc:	46 2f       	mov	r20, r22
    18ce:	4f 70       	andi	r20, 0x0F	; 15
    18d0:	40 5d       	subi	r20, 0xD0	; 208
    18d2:	4a 33       	cpi	r20, 0x3A	; 58
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <__ultoa_invert+0x7c>
    18d6:	49 5d       	subi	r20, 0xD9	; 217
    18d8:	31 fd       	sbrc	r19, 1
    18da:	40 52       	subi	r20, 0x20	; 32
    18dc:	41 93       	st	Z+, r20
    18de:	02 d0       	rcall	.+4      	; 0x18e4 <__ultoa_invert+0x84>
    18e0:	a9 f7       	brne	.-22     	; 0x18cc <__ultoa_invert+0x6c>
    18e2:	ea cf       	rjmp	.-44     	; 0x18b8 <__ultoa_invert+0x58>
    18e4:	b4 e0       	ldi	r27, 0x04	; 4
    18e6:	a6 95       	lsr	r26
    18e8:	97 95       	ror	r25
    18ea:	87 95       	ror	r24
    18ec:	77 95       	ror	r23
    18ee:	67 95       	ror	r22
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__ultoa_invert+0x86>
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	61 05       	cpc	r22, r1
    18f8:	71 05       	cpc	r23, r1
    18fa:	08 95       	ret
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	0a 2e       	mov	r0, r26
    1902:	06 94       	lsr	r0
    1904:	57 95       	ror	r21
    1906:	47 95       	ror	r20
    1908:	37 95       	ror	r19
    190a:	27 95       	ror	r18
    190c:	ba 95       	dec	r27
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__ultoa_invert+0xa2>
    1910:	62 0f       	add	r22, r18
    1912:	73 1f       	adc	r23, r19
    1914:	84 1f       	adc	r24, r20
    1916:	95 1f       	adc	r25, r21
    1918:	a0 1d       	adc	r26, r0
    191a:	08 95       	ret

0000191c <_exit>:
    191c:	f8 94       	cli

0000191e <__stop_program>:
    191e:	ff cf       	rjmp	.-2      	; 0x191e <__stop_program>
