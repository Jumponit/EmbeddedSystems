
System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b4  00800200  00001898  0000192c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a86  008004b4  008004b4  00001be0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001c80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea9  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001594  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  00005d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018fc  00000000  00000000  00006b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008491  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c1       	rjmp	.+880    	; 0x3c6 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_25>
      68:	47 c7       	rjmp	.+3726   	; 0xef8 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_36>
      94:	72 c7       	rjmp	.+3812   	; 0xf7a <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_51>
      d0:	95 c7       	rjmp	.+3882   	; 0xffc <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_54>
      dc:	d0 c7       	rjmp	.+4000   	; 0x107e <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e9       	ldi	r30, 0x98	; 152
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2f e0       	ldi	r18, 0x0F	; 15
     110:	a4 eb       	ldi	r26, 0xB4	; 180
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 33       	cpi	r26, 0x3A	; 58
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	a9 d4       	rcall	.+2386   	; 0xa72 <main>
     120:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <x_yield>:

		.section .text
		.global x_yield
x_yield:
	// Save "callee-save" registers
		push  r2
     126:	2f 92       	push	r2
		push  r3
     128:	3f 92       	push	r3
		push  r4
     12a:	4f 92       	push	r4
		push  r5
     12c:	5f 92       	push	r5
		push  r6
     12e:	6f 92       	push	r6
		push  r7
     130:	7f 92       	push	r7
		push  r8
     132:	8f 92       	push	r8
		push  r9
     134:	9f 92       	push	r9
		push  r10
     136:	af 92       	push	r10
		push  r11
     138:	bf 92       	push	r11
		push  r12
     13a:	cf 92       	push	r12
		push  r13
     13c:	df 92       	push	r13
		push  r14
     13e:	ef 92       	push	r14
		push  r15
     140:	ff 92       	push	r15
		push  r16
     142:	0f 93       	push	r16
		push  r17
     144:	1f 93       	push	r17
		push  r28
     146:	cf 93       	push	r28
		push  r29
     148:	df 93       	push	r29

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------
		lds   r18,x_thread_id
     14a:	20 91 c5 04 	lds	r18, 0x04C5
		lds   r19,x_thread_mask
     14e:	30 91 f9 0c 	lds	r19, 0x0CF9

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		cli					;disable interrupts
     152:	f8 94       	cli
		in		r14,SPL
     154:	ed b6       	in	r14, 0x3d	; 61
		in		r15,SPH
     156:	fe b6       	in	r15, 0x3e	; 62
		sei					;re-enable interrupts--assumes that interrupts must be enabled--does not save state of flags
     158:	78 94       	sei


		ldi		r30,lo8(stack)
     15a:	e7 ec       	ldi	r30, 0xC7	; 199
		ldi		r31,hi8(stack)
     15c:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r18
     15e:	22 0f       	add	r18, r18
		lsl		r18
     160:	22 0f       	add	r18, r18
		add		r30,r18
     162:	e2 0f       	add	r30, r18
		adc		r31,r1  ;z = stacks+(id*4) to give pointer to stacks[thread_id].ps
     164:	f1 1d       	adc	r31, r1
		st		z+,r14	;save SPL
     166:	e1 92       	st	Z+, r14
		st		z,r15	;save SPH
     168:	f0 82       	st	Z, r15

0000016a <x_schedule>:
;                         if reached from k_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds		r18,x_disable_status
     16a:	20 91 f8 0c 	lds	r18, 0x0CF8
		lds		r19,x_delay_status
     16e:	30 91 c6 04 	lds	r19, 0x04C6
		lds		r20,x_suspend_status
     172:	40 91 e7 04 	lds	r20, 0x04E7
		or		r18,r19
     176:	23 2b       	or	r18, r19
		or		r18,r20
     178:	24 2b       	or	r18, r20
		lds		r19, x_thread_id		;get current thread
     17a:	30 91 c5 04 	lds	r19, 0x04C5
		lds		r20, x_thread_mask
     17e:	40 91 f9 0c 	lds	r20, 0x0CF9
		ldi		r22,NUM_THREADS		;max number of threads
     182:	68 e0       	ldi	r22, 0x08	; 8
		clc							;make sure Carry flag is clear
     184:	88 94       	clc
;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
1:
		inc		r19					;inc to next thread id...
     186:	33 95       	inc	r19
		andi	r19,7				;...modulo 8
     188:	37 70       	andi	r19, 0x07	; 7
		rol		r20					;shift mask left
     18a:	44 1f       	adc	r20, r20
		brcc	2f					;skip next instruction if C is clear
     18c:	08 f4       	brcc	.+2      	; 0x190 <x_schedule+0x26>
		rol		r20					;perform second rotate if bit7 was set (to rotate through Carry flag)
     18e:	44 1f       	adc	r20, r20
2:
		mov		r23,r20				;save copy of mask
     190:	74 2f       	mov	r23, r20
		and		r20,r18				;test bit corresponding to status of next thread
     192:	42 23       	and	r20, r18
		breq	restore				;break out if READY
     194:	19 f0       	breq	.+6      	; 0x19c <restore>
		dec		r22					;decrement thread count
     196:	6a 95       	dec	r22
		brne	1b					;back to test next thread
     198:	b1 f7       	brne	.-20     	; 0x186 <x_schedule+0x1c>
;  SLEEP HERE:  Here's where we sleep (no threads are READY)
;  but for now we'll jump back to schedule loop again
;----------------------------------------------------------
		; add sleep instructions here...

		rjmp	x_schedule			
     19a:	e7 cf       	rjmp	.-50     	; 0x16a <x_schedule>

0000019c <restore>:

;---------------------------------------------------
; Restore context of next READY thread
;---------------------------------------------------
restore:
		sts		x_thread_id,r19
     19c:	30 93 c5 04 	sts	0x04C5, r19
		sts		x_thread_mask,r23
     1a0:	70 93 f9 0c 	sts	0x0CF9, r23

		ldi		r30,lo8(stack)
     1a4:	e7 ec       	ldi	r30, 0xC7	; 199
		ldi		r31,hi8(stack)
     1a6:	f4 e0       	ldi	r31, 0x04	; 4
		lsl		r19
     1a8:	33 0f       	add	r19, r19
		lsl		r19
     1aa:	33 0f       	add	r19, r19
		add		r30,r19
     1ac:	e3 0f       	add	r30, r19
		adc		r31,r1	;z = stacks+(id*4) to give pointer to stacks[thread_id].sp
     1ae:	f1 1d       	adc	r31, r1
		ld		r18,z+	;get SPL
     1b0:	21 91       	ld	r18, Z+
		ld		r19,z	;get SPH
     1b2:	30 81       	ld	r19, Z
		
		cli
     1b4:	f8 94       	cli
		out		SPL,r18		;restore SP
     1b6:	2d bf       	out	0x3d, r18	; 61
		out		SPH,r19
     1b8:	3e bf       	out	0x3e, r19	; 62
		sei
     1ba:	78 94       	sei


		// Restore registers
		pop		r29
     1bc:	df 91       	pop	r29
		pop		r28
     1be:	cf 91       	pop	r28
		pop		r17
     1c0:	1f 91       	pop	r17
		pop		r16
     1c2:	0f 91       	pop	r16
		pop		r15
     1c4:	ff 90       	pop	r15
		pop		r14
     1c6:	ef 90       	pop	r14
		pop		r13
     1c8:	df 90       	pop	r13
		pop		r12
     1ca:	cf 90       	pop	r12
		pop		r11
     1cc:	bf 90       	pop	r11
		pop		r10
     1ce:	af 90       	pop	r10
		pop		r9
     1d0:	9f 90       	pop	r9
		pop		r8
     1d2:	8f 90       	pop	r8
		pop		r7
     1d4:	7f 90       	pop	r7
		pop		r6
     1d6:	6f 90       	pop	r6
		pop		r5
     1d8:	5f 90       	pop	r5
		pop		r4
     1da:	4f 90       	pop	r4
		pop		r3
     1dc:	3f 90       	pop	r3
		pop		r2
     1de:	2f 90       	pop	r2

		// Return to next thread
		ret
     1e0:	08 95       	ret

000001e2 <bit2mask8>:
//						  (interpreted as bit number)
//-----------------------------------------------------------------------------------------------
		.global bit2mask8
bit2mask8:
		;r24 containts thread ID input
		ldi r30,lo8(bitmask8_table)
     1e2:	ee ee       	ldi	r30, 0xEE	; 238
		ldi r31,hi8(bitmask8_table)
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
		add r30,r24
     1e6:	e8 0f       	add	r30, r24
		adc r31,r1		;r1 always has 0 in it--so just add carry
     1e8:	f1 1d       	adc	r31, r1
		lpm r24,Z		;lpm accesses program memory (FLASH) indirectly using Z reg pair (r31:r30)
     1ea:	84 91       	lpm	r24, Z
		ret
     1ec:	08 95       	ret

000001ee <bitmask8_table>:
     1ee:	01 02       	muls	r16, r17
     1f0:	04 08       	sbc	r0, r4
     1f2:	10 20       	and	r1, r0
     1f4:	40 80       	ld	r4, Z

000001f6 <delay_usec>:
// Date:    3/24/16
//
		.section .text
		.global delay_usec
delay_usec:			//when called, takes 2 cycles to load parameter
		mov	r22,r24
     1f6:	68 2f       	mov	r22, r24
		or  r22,r25
     1f8:	69 2b       	or	r22, r25
		nop
     1fa:	00 00       	nop
		breq 1f	        // 5 cycles if branch taken, 4 if not
     1fc:	31 f0       	breq	.+12     	; 0x20a <delay_usec+0x14>
2:
		rcall	1f	// 9 cycles for call/ret
     1fe:	05 d0       	rcall	.+10     	; 0x20a <delay_usec+0x14>
		rjmp	3f      // 2 cycles
     200:	00 c0       	rjmp	.+0      	; 0x202 <delay_usec+0xc>
3:	
		nop		// 1 cycle
     202:	00 00       	nop
		sbiw	r24,1   // 2 cycles
     204:	01 97       	sbiw	r24, 0x01	; 1
		brne	2b      // 2 cycles branch taken, 1 cycle not taken
     206:	d9 f7       	brne	.-10     	; 0x1fe <delay_usec+0x8>
		nop             // 1 (added for prev branch not taken)
     208:	00 00       	nop
1:
     20a:	08 95       	ret

0000020c <x_new>:
   

---------------------------------------------------------------------------------------*/
void x_resume(byte tid)
{
	x_suspend_status &= ~(1 << tid);
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	1f 92       	push	r1
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	18 2f       	mov	r17, r24
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	dc 01       	movw	r26, r24
     222:	aa 0f       	add	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	aa 0f       	add	r26, r26
     228:	bb 1f       	adc	r27, r27
     22a:	9d 01       	movw	r18, r26
     22c:	29 53       	subi	r18, 0x39	; 57
     22e:	3b 4f       	sbci	r19, 0xFB	; 251
     230:	79 01       	movw	r14, r18
     232:	d9 01       	movw	r26, r18
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	ed 91       	ld	r30, X+
     238:	fc 91       	ld	r31, X
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	60 83       	st	Z, r22
     23e:	9f 01       	movw	r18, r30
     240:	21 50       	subi	r18, 0x01	; 1
     242:	31 09       	sbc	r19, r1
     244:	d9 01       	movw	r26, r18
     246:	7c 93       	st	X, r23
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	31 09       	sbc	r19, r1
     24c:	d9 01       	movw	r26, r18
     24e:	1c 92       	st	X, r1
     250:	75 97       	sbiw	r30, 0x15	; 21
     252:	d7 01       	movw	r26, r14
     254:	ed 93       	st	X+, r30
     256:	fc 93       	st	X, r31
     258:	49 83       	std	Y+1, r20	; 0x01
     25a:	c3 df       	rcall	.-122    	; 0x1e2 <bit2mask8>
     25c:	98 2f       	mov	r25, r24
     25e:	80 91 f8 0c 	lds	r24, 0x0CF8
     262:	49 81       	ldd	r20, Y+1	; 0x01
     264:	44 23       	and	r20, r20
     266:	29 f0       	breq	.+10     	; 0x272 <x_new+0x66>
     268:	29 2f       	mov	r18, r25
     26a:	20 95       	com	r18
     26c:	98 2f       	mov	r25, r24
     26e:	92 23       	and	r25, r18
     270:	01 c0       	rjmp	.+2      	; 0x274 <x_new+0x68>
     272:	98 2b       	or	r25, r24
     274:	90 93 f8 0c 	sts	0x0CF8, r25
     278:	80 91 c5 04 	lds	r24, 0x04C5
     27c:	18 13       	cpse	r17, r24
     27e:	07 c0       	rjmp	.+14     	; 0x28e <x_new+0x82>
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	6e cf       	rjmp	.-292    	; 0x16a <x_schedule>
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	08 95       	ret

0000029c <init_System_Timer>:
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	84 bd       	out	0x24, r24	; 36
     2a0:	9a ef       	ldi	r25, 0xFA	; 250
     2a2:	97 bd       	out	0x27, r25	; 39
     2a4:	80 93 6e 00 	sts	0x006E, r24
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	85 bd       	out	0x25, r24	; 37
     2ac:	08 95       	ret

000002ae <x_init>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	f8 94       	cli
     2b4:	8e ef       	ldi	r24, 0xFE	; 254
     2b6:	80 93 f8 0c 	sts	0x0CF8, r24
     2ba:	10 92 e7 04 	sts	0x04E7, r1
     2be:	10 92 c6 04 	sts	0x04C6, r1
     2c2:	10 92 c5 04 	sts	0x04C5, r1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 f9 0c 	sts	0x0CF9, r24
     2cc:	c7 ec       	ldi	r28, 0xC7	; 199
     2ce:	d4 e0       	ldi	r29, 0x04	; 4
     2d0:	87 ee       	ldi	r24, 0xE7	; 231
     2d2:	95 e0       	ldi	r25, 0x05	; 5
     2d4:	99 83       	std	Y+1, r25	; 0x01
     2d6:	88 83       	st	Y, r24
     2d8:	9b 83       	std	Y+3, r25	; 0x03
     2da:	8a 83       	std	Y+2, r24	; 0x02
     2dc:	87 ee       	ldi	r24, 0xE7	; 231
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	9d 83       	std	Y+5, r25	; 0x05
     2e2:	8c 83       	std	Y+4, r24	; 0x04
     2e4:	9f 83       	std	Y+7, r25	; 0x07
     2e6:	8e 83       	std	Y+6, r24	; 0x06
     2e8:	87 ee       	ldi	r24, 0xE7	; 231
     2ea:	97 e0       	ldi	r25, 0x07	; 7
     2ec:	99 87       	std	Y+9, r25	; 0x09
     2ee:	88 87       	std	Y+8, r24	; 0x08
     2f0:	9b 87       	std	Y+11, r25	; 0x0b
     2f2:	8a 87       	std	Y+10, r24	; 0x0a
     2f4:	87 ee       	ldi	r24, 0xE7	; 231
     2f6:	98 e0       	ldi	r25, 0x08	; 8
     2f8:	9d 87       	std	Y+13, r25	; 0x0d
     2fa:	8c 87       	std	Y+12, r24	; 0x0c
     2fc:	9f 87       	std	Y+15, r25	; 0x0f
     2fe:	8e 87       	std	Y+14, r24	; 0x0e
     300:	87 ee       	ldi	r24, 0xE7	; 231
     302:	99 e0       	ldi	r25, 0x09	; 9
     304:	99 8b       	std	Y+17, r25	; 0x11
     306:	88 8b       	std	Y+16, r24	; 0x10
     308:	9b 8b       	std	Y+19, r25	; 0x13
     30a:	8a 8b       	std	Y+18, r24	; 0x12
     30c:	87 ee       	ldi	r24, 0xE7	; 231
     30e:	9a e0       	ldi	r25, 0x0A	; 10
     310:	9d 8b       	std	Y+21, r25	; 0x15
     312:	8c 8b       	std	Y+20, r24	; 0x14
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	8e 8b       	std	Y+22, r24	; 0x16
     318:	87 ee       	ldi	r24, 0xE7	; 231
     31a:	9b e0       	ldi	r25, 0x0B	; 11
     31c:	99 8f       	std	Y+25, r25	; 0x19
     31e:	88 8f       	std	Y+24, r24	; 0x18
     320:	9b 8f       	std	Y+27, r25	; 0x1b
     322:	8a 8f       	std	Y+26, r24	; 0x1a
     324:	87 ee       	ldi	r24, 0xE7	; 231
     326:	9c e0       	ldi	r25, 0x0C	; 12
     328:	9d 8f       	std	Y+29, r25	; 0x1d
     32a:	8c 8f       	std	Y+28, r24	; 0x1c
     32c:	9f 8f       	std	Y+31, r25	; 0x1f
     32e:	8e 8f       	std	Y+30, r24	; 0x1e
     330:	8a ea       	ldi	r24, 0xAA	; 170
     332:	80 93 e8 04 	sts	0x04E8, r24
     336:	80 93 e8 05 	sts	0x05E8, r24
     33a:	80 93 e8 06 	sts	0x06E8, r24
     33e:	80 93 e8 07 	sts	0x07E8, r24
     342:	80 93 e8 08 	sts	0x08E8, r24
     346:	80 93 e8 09 	sts	0x09E8, r24
     34a:	80 93 e8 0a 	sts	0x0AE8, r24
     34e:	80 93 e8 0b 	sts	0x0BE8, r24
     352:	a4 df       	rcall	.-184    	; 0x29c <init_System_Timer>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	a8 81       	ld	r26, Y
     35a:	b9 81       	ldd	r27, Y+1	; 0x01
     35c:	85 81       	ldd	r24, Z+5	; 0x05
     35e:	8c 93       	st	X, r24
     360:	a8 81       	ld	r26, Y
     362:	b9 81       	ldd	r27, Y+1	; 0x01
     364:	84 81       	ldd	r24, Z+4	; 0x04
     366:	11 97       	sbiw	r26, 0x01	; 1
     368:	8c 93       	st	X, r24
     36a:	a8 81       	ld	r26, Y
     36c:	b9 81       	ldd	r27, Y+1	; 0x01
     36e:	83 81       	ldd	r24, Z+3	; 0x03
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	8c 93       	st	X, r24
     374:	a8 81       	ld	r26, Y
     376:	b9 81       	ldd	r27, Y+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	13 97       	sbiw	r26, 0x03	; 3
     37c:	8c 93       	st	X, r24
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	21 81       	ldd	r18, Z+1	; 0x01
     384:	fc 01       	movw	r30, r24
     386:	34 97       	sbiw	r30, 0x04	; 4
     388:	20 83       	st	Z, r18
     38a:	88 81       	ld	r24, Y
     38c:	99 81       	ldd	r25, Y+1	; 0x01
     38e:	05 97       	sbiw	r24, 0x05	; 5
     390:	9e bf       	out	0x3e, r25	; 62
     392:	8d bf       	out	0x3d, r24	; 61
     394:	78 94       	sei
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <x_delay>:
     39c:	9c 01       	movw	r18, r24
     39e:	9f b7       	in	r25, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	e0 91 c5 04 	lds	r30, 0x04C5
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e8 51       	subi	r30, 0x18	; 24
     3ae:	f3 4f       	sbci	r31, 0xF3	; 243
     3b0:	31 83       	std	Z+1, r19	; 0x01
     3b2:	20 83       	st	Z, r18
     3b4:	20 91 c6 04 	lds	r18, 0x04C6
     3b8:	80 91 f9 0c 	lds	r24, 0x0CF9
     3bc:	82 2b       	or	r24, r18
     3be:	80 93 c6 04 	sts	0x04C6, r24
     3c2:	9f bf       	out	0x3f, r25	; 63
     3c4:	b0 ce       	rjmp	.-672    	; 0x126 <x_yield>

000003c6 <__vector_21>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b b6       	in	r0, 0x3b	; 59
     3d2:	0f 92       	push	r0
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
     3e4:	80 91 b4 04 	lds	r24, 0x04B4
     3e8:	90 91 b5 04 	lds	r25, 0x04B5
     3ec:	a0 91 b6 04 	lds	r26, 0x04B6
     3f0:	b0 91 b7 04 	lds	r27, 0x04B7
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	a1 1d       	adc	r26, r1
     3f8:	b1 1d       	adc	r27, r1
     3fa:	80 93 b4 04 	sts	0x04B4, r24
     3fe:	90 93 b5 04 	sts	0x04B5, r25
     402:	a0 93 b6 04 	sts	0x04B6, r26
     406:	b0 93 b7 04 	sts	0x04B7, r27
     40a:	20 91 c6 04 	lds	r18, 0x04C6
     40e:	e8 ee       	ldi	r30, 0xE8	; 232
     410:	fc e0       	ldi	r31, 0x0C	; 12
     412:	31 e0       	ldi	r19, 0x01	; 1
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	81 93       	st	Z+, r24
     41c:	91 93       	st	Z+, r25
     41e:	89 2b       	or	r24, r25
     420:	19 f4       	brne	.+6      	; 0x428 <__vector_21+0x62>
     422:	83 2f       	mov	r24, r19
     424:	80 95       	com	r24
     426:	28 23       	and	r18, r24
     428:	33 0f       	add	r19, r19
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	e8 3f       	cpi	r30, 0xF8	; 248
     42e:	f8 07       	cpc	r31, r24
     430:	89 f7       	brne	.-30     	; 0x414 <__vector_21+0x4e>
     432:	20 93 c6 04 	sts	0x04C6, r18
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0b be       	out	0x3b, r0	; 59
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <x_disable>:
   

---------------------------------------------------------------------------------------*/
void x_disable(byte tid)
{
	x_disable_status |= (1 << tid);
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <x_disable+0x8>
     45a:	22 0f       	add	r18, r18
     45c:	8a 95       	dec	r24
     45e:	ea f7       	brpl	.-6      	; 0x45a <x_disable+0x6>
     460:	80 91 f8 0c 	lds	r24, 0x0CF8
     464:	28 2b       	or	r18, r24
     466:	20 93 f8 0c 	sts	0x0CF8, r18
     46a:	08 95       	ret

0000046c <ow_reset>:

/************************************************************************/
/* Attempts to determine whether there is a sensor attached.            */
/************************************************************************/
unsigned char ow_reset(void)
{
     46c:	cf 93       	push	r28
	unsigned char presence;

 // pull DQ line low
	DDRE |= (1 << PE4); //set for output
     46e:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4); //set value low
     470:	74 98       	cbi	0x0e, 4	; 14

 // leave it low for 480us
	delay_usec(479);
     472:	8f ed       	ldi	r24, 0xDF	; 223
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	bf de       	rcall	.-642    	; 0x1f6 <delay_usec>

 // allow line to return high
	PORTE |= (1 << PE4); //set value high
     478:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     47a:	6c 98       	cbi	0x0d, 4	; 13
	//PORTE &= ~(1 << PE4); //set value low?

 // wait for presence
	delay_usec(69);
     47c:	85 e4       	ldi	r24, 0x45	; 69
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	ba de       	rcall	.-652    	; 0x1f6 <delay_usec>

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     482:	cc b1       	in	r28, 0x0c	; 12

// wait for end of timeslot
	delay_usec(229); 
     484:	85 ee       	ldi	r24, 0xE5	; 229
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	b6 de       	rcall	.-660    	; 0x1f6 <delay_usec>

 // wait for presence
	delay_usec(69);

 // get presence signal
	presence = !(PINE & (1 << PE4)); //read for presence
     48a:	c2 95       	swap	r28
     48c:	c1 70       	andi	r28, 0x01	; 1

// wait for end of timeslot
	delay_usec(229); 

	return(presence); // presence signal returned
} // 1=presence, 0=no sensor
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	8c 27       	eor	r24, r28
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <ow_read_bit>:
/* Read a single bit from the sensor                                    */
/************************************************************************/
unsigned char ow_read_bit(void)
{
	//pull low
	DDRE |= (1 << PE4);
     496:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     498:	74 98       	cbi	0x0e, 4	; 14
	//let return to high
	PORTE |= (1 << PE4); //set value high
     49a:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     49c:	6c 98       	cbi	0x0d, 4	; 13
	
	delay_usec(14); //wait 15us
     49e:	8e e0       	ldi	r24, 0x0E	; 14
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a9 de       	rcall	.-686    	; 0x1f6 <delay_usec>
	
	return(PINE & (1 << PE4));
     4a4:	8c b1       	in	r24, 0x0c	; 12
}
     4a6:	80 71       	andi	r24, 0x10	; 16
     4a8:	08 95       	ret

000004aa <ow_write_bit>:
/* Write a single bit                                                   */
/************************************************************************/
void ow_write_bit(char bitval)
{
	//pull low
	DDRE |= (1 << PE4);
     4aa:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE &= ~(1 << PE4);
     4ac:	74 98       	cbi	0x0e, 4	; 14
	
	//if writing a one, go high
	if (bitval == 1) {
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <ow_write_bit+0xa>
		PORTE |= (1 << PE4); //set value high
     4b2:	74 9a       	sbi	0x0e, 4	; 14
	}
	
	delay_usec(59); //wait 60us
     4b4:	8b e3       	ldi	r24, 0x3B	; 59
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9e de       	rcall	.-708    	; 0x1f6 <delay_usec>
	
	PORTE |= (1 << PE4); //set value high
     4ba:	74 9a       	sbi	0x0e, 4	; 14
	DDRE &= ~(1 << PE4); //set for input
     4bc:	6c 98       	cbi	0x0d, 4	; 13
     4be:	08 95       	ret

000004c0 <ow_read_byte>:

/************************************************************************/
/* Read a single byte from the sensor                                   */
/************************************************************************/
unsigned char ow_read_byte(void) 
{
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	c0 e0       	ldi	r28, 0x00	; 0
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char value = 0;
     4ce:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4d0:	ee 24       	eor	r14, r14
     4d2:	e3 94       	inc	r14
     4d4:	f1 2c       	mov	r15, r1
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
		if (ow_read_bit()) {
     4d6:	df df       	rcall	.-66     	; 0x496 <ow_read_bit>
     4d8:	88 23       	and	r24, r24
     4da:	39 f0       	breq	.+14     	; 0x4ea <ow_read_byte+0x2a>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
     4dc:	c7 01       	movw	r24, r14
     4de:	0c 2e       	mov	r0, r28
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <ow_read_byte+0x24>
     4e2:	88 0f       	add	r24, r24
     4e4:	0a 94       	dec	r0
     4e6:	ea f7       	brpl	.-6      	; 0x4e2 <ow_read_byte+0x22>
     4e8:	18 2b       	or	r17, r24
		}
		delay_usec(19); //wait 20us
     4ea:	83 e1       	ldi	r24, 0x13	; 19
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	83 de       	rcall	.-762    	; 0x1f6 <delay_usec>
     4f0:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
unsigned char ow_read_byte(void) 
{
	unsigned char value = 0;
	unsigned char i;
	for (i = 0; i < 8; i++) {
     4f2:	c8 30       	cpi	r28, 0x08	; 8
     4f4:	d1 05       	cpc	r29, r1
     4f6:	79 f7       	brne	.-34     	; 0x4d6 <ow_read_byte+0x16>
			value |= 0x01 << i; //reads a bit and left-shifts it into place
		}
		delay_usec(19); //wait 20us
	}
	return value;
}
     4f8:	81 2f       	mov	r24, r17
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <ow_write_byte>:

/************************************************************************/
/* Write a single byte to the sensor                                    */
/************************************************************************/
void ow_write_byte(char val)
{
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
		temp = val >> i;
     512:	08 2f       	mov	r16, r24
     514:	10 e0       	ldi	r17, 0x00	; 0
     516:	c8 01       	movw	r24, r16
     518:	0c 2e       	mov	r0, r28
     51a:	02 c0       	rjmp	.+4      	; 0x520 <ow_write_byte+0x1a>
     51c:	95 95       	asr	r25
     51e:	87 95       	ror	r24
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <ow_write_byte+0x16>
		temp &= 0x01;
		ow_write_bit(temp);
     524:	81 70       	andi	r24, 0x01	; 1
     526:	c1 df       	rcall	.-126    	; 0x4aa <ow_write_bit>
     528:	21 96       	adiw	r28, 0x01	; 1
/************************************************************************/
void ow_write_byte(char val)
{
	unsigned char i;
	unsigned char temp;
	for (i = 0; i < 8; i++) {
     52a:	c8 30       	cpi	r28, 0x08	; 8
     52c:	d1 05       	cpc	r29, r1
     52e:	99 f7       	brne	.-26     	; 0x516 <ow_write_byte+0x10>
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     530:	87 e7       	ldi	r24, 0x77	; 119
     532:	90 e0       	ldi	r25, 0x00	; 0
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
		temp = val >> i;
		temp &= 0x01;
		ow_write_bit(temp);
	}
	
	delay_usec(119); //wait 120us
     53c:	5c ce       	rjmp	.-840    	; 0x1f6 <delay_usec>

0000053e <ow_read_temperature>:

/************************************************************************/
/* Read the current temperature from the sensor                         */
/************************************************************************/
int ow_read_temperature(void)
{
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	2a 97       	sbiw	r28, 0x0a	; 10
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
	char temp_lsb,temp_msb;
	int k;
	char temp_c;
	char shift_val = 4;
	//char temp_f;
	ow_reset();
     55a:	88 df       	rcall	.-240    	; 0x46c <ow_reset>
	ow_write_byte(0xCC); //Skip ROM
     55c:	8c ec       	ldi	r24, 0xCC	; 204
     55e:	d3 df       	rcall	.-90     	; 0x506 <ow_write_byte>
	ow_write_byte(0x44); // Start Conversion
     560:	84 e4       	ldi	r24, 0x44	; 68
     562:	d1 df       	rcall	.-94     	; 0x506 <ow_write_byte>
	delay_usec(119); //wait 120us
     564:	87 e7       	ldi	r24, 0x77	; 119
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	46 de       	rcall	.-884    	; 0x1f6 <delay_usec>
	ow_reset();
     56a:	80 df       	rcall	.-256    	; 0x46c <ow_reset>
	ow_write_byte(0xCC); // Skip ROM
     56c:	8c ec       	ldi	r24, 0xCC	; 204
     56e:	cb df       	rcall	.-106    	; 0x506 <ow_write_byte>
	ow_write_byte(0xBE); // Read Scratch Pad
     570:	8e eb       	ldi	r24, 0xBE	; 190
     572:	c9 df       	rcall	.-110    	; 0x506 <ow_write_byte>
     574:	8e 01       	movw	r16, r28
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	7e 01       	movw	r14, r28
     57c:	4a e0       	ldi	r20, 0x0A	; 10
     57e:	e4 0e       	add	r14, r20
     580:	f1 1c       	adc	r15, r1
	for (k=0; k<9; k++) {
		get[k] = ow_read_byte();
     582:	9e df       	rcall	.-196    	; 0x4c0 <ow_read_byte>
     584:	f8 01       	movw	r30, r16
     586:	81 93       	st	Z+, r24
     588:	8f 01       	movw	r16, r30
	ow_write_byte(0x44); // Start Conversion
	delay_usec(119); //wait 120us
	ow_reset();
	ow_write_byte(0xCC); // Skip ROM
	ow_write_byte(0xBE); // Read Scratch Pad
	for (k=0; k<9; k++) {
     58a:	ee 15       	cp	r30, r14
     58c:	ff 05       	cpc	r31, r15
     58e:	c9 f7       	brne	.-14     	; 0x582 <ow_read_temperature+0x44>
		get[k] = ow_read_byte();
	}
	temp_msb = get[1]; // Sign byte + lsbit
     590:	9a 81       	ldd	r25, Y+2	; 0x02
	temp_lsb = get[0]; // Temp data plus lsb
     592:	89 81       	ldd	r24, Y+1	; 0x01
	if (temp_msb <= 0x80){temp_lsb = (temp_lsb>>shift_val) | (temp_msb<<(8-shift_val));} // shift to get whole degree
     594:	91 38       	cpi	r25, 0x81	; 129
     596:	38 f4       	brcc	.+14     	; 0x5a6 <ow_read_temperature+0x68>
     598:	f0 e1       	ldi	r31, 0x10	; 16
     59a:	9f 9f       	mul	r25, r31
     59c:	90 01       	movw	r18, r0
     59e:	11 24       	eor	r1, r1
     5a0:	82 95       	swap	r24
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	82 2b       	or	r24, r18
	temp_msb = temp_msb & 0x80; // mask all but the sign bit
	if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
     5a6:	97 ff       	sbrs	r25, 7
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <ow_read_temperature+0x76>
     5aa:	81 95       	neg	r24
	if (temp_msb >= 0x80) {temp_lsb = (temp_lsb>>shift_val) | ((~temp_msb)<<(8-shift_val));}// shift to get whole degree
     5ac:	82 95       	swap	r24
     5ae:	8f 70       	andi	r24, 0x0F	; 15
     5b0:	80 6f       	ori	r24, 0xF0	; 240
	if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
     5b2:	81 95       	neg	r24
	temp_c = temp_lsb; // ready for conversion to Fahrenheit
	//temp_f = (((int)temp_c)* 9)/5 + 32;
	return temp_c;
}
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	2a 96       	adiw	r28, 0x0a	; 10
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <io_controller>:
/*
 * Reverse the effects of shut down.
 */
void start_up(void) {
	PORTB |= ~(0x1 << fans);
	x_enable(0);
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	c0 55       	subi	r28, 0x50	; 80
     5da:	d1 09       	sbc	r29, r1
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	26 e0       	ldi	r18, 0x06	; 6
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	5b e4       	ldi	r21, 0x4B	; 75
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	18 d3       	rcall	.+1584   	; 0xc28 <Serial_open>
     5f8:	47 e3       	ldi	r20, 0x37	; 55
     5fa:	e4 2e       	mov	r14, r20
     5fc:	42 e0       	ldi	r20, 0x02	; 2
     5fe:	f4 2e       	mov	r15, r20
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	65 2e       	mov	r6, r21
     604:	71 2c       	mov	r7, r1
     606:	6c 0e       	add	r6, r28
     608:	7d 1e       	adc	r7, r29
     60a:	42 e0       	ldi	r20, 0x02	; 2
     60c:	64 0e       	add	r6, r20
     60e:	71 1c       	adc	r7, r1
     610:	69 e4       	ldi	r22, 0x49	; 73
     612:	86 2e       	mov	r8, r22
     614:	91 2c       	mov	r9, r1
     616:	8c 0e       	add	r8, r28
     618:	9d 1e       	adc	r9, r29
     61a:	56 e0       	ldi	r21, 0x06	; 6
     61c:	85 0e       	add	r8, r21
     61e:	91 1c       	adc	r9, r1
     620:	71 ec       	ldi	r23, 0xC1	; 193
     622:	c7 2e       	mov	r12, r23
     624:	73 e0       	ldi	r23, 0x03	; 3
     626:	d7 2e       	mov	r13, r23
     628:	8e 01       	movw	r16, r28
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
     62e:	ef e8       	ldi	r30, 0x8F	; 143
     630:	ae 2e       	mov	r10, r30
     632:	e3 e0       	ldi	r30, 0x03	; 3
     634:	be 2e       	mov	r11, r30
     636:	48 e0       	ldi	r20, 0x08	; 8
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	be 01       	movw	r22, r28
     63c:	6f 5b       	subi	r22, 0xBF	; 191
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fa d3       	rcall	.+2036   	; 0xe3a <Serial_read_string>
     646:	89 2b       	or	r24, r25
     648:	09 f4       	brne	.+2      	; 0x64c <io_controller+0x7c>
     64a:	99 c1       	rjmp	.+818    	; 0x97e <io_controller+0x3ae>
     64c:	22 96       	adiw	r28, 0x02	; 2
     64e:	8f ad       	ldd	r24, Y+63	; 0x3f
     650:	22 97       	sbiw	r28, 0x02	; 2
     652:	60 96       	adiw	r28, 0x10	; 16
     654:	8f af       	std	Y+63, r24	; 0x3f
     656:	60 97       	sbiw	r28, 0x10	; 16
     658:	23 96       	adiw	r28, 0x03	; 3
     65a:	8f ad       	ldd	r24, Y+63	; 0x3f
     65c:	23 97       	sbiw	r28, 0x03	; 3
     65e:	61 96       	adiw	r28, 0x11	; 17
     660:	8f af       	std	Y+63, r24	; 0x3f
     662:	61 97       	sbiw	r28, 0x11	; 17
     664:	d3 01       	movw	r26, r6
     666:	fe 01       	movw	r30, r28
     668:	e7 5b       	subi	r30, 0xB7	; 183
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	8d 91       	ld	r24, X+
     66e:	88 23       	and	r24, r24
     670:	11 f0       	breq	.+4      	; 0x676 <io_controller+0xa6>
     672:	80 83       	st	Z, r24
     674:	01 c0       	rjmp	.+2      	; 0x678 <io_controller+0xa8>
     676:	10 82       	st	Z, r1
     678:	31 96       	adiw	r30, 0x01	; 1
     67a:	e8 15       	cp	r30, r8
     67c:	f9 05       	cpc	r31, r9
     67e:	b1 f7       	brne	.-20     	; 0x66c <io_controller+0x9c>
     680:	60 e9       	ldi	r22, 0x90	; 144
     682:	72 e0       	ldi	r23, 0x02	; 2
     684:	ce 01       	movw	r24, r28
     686:	81 5b       	subi	r24, 0xB1	; 177
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	2a d6       	rcall	.+3156   	; 0x12e0 <strcmp>
     68c:	89 2b       	or	r24, r25
     68e:	59 f4       	brne	.+22     	; 0x6a6 <io_controller+0xd6>
     690:	47 e1       	ldi	r20, 0x17	; 23
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	63 e9       	ldi	r22, 0x93	; 147
     696:	72 e0       	ldi	r23, 0x02	; 2
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	1a d4       	rcall	.+2100   	; 0xed2 <Serial_write_string>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 b8 04 	sts	0x04B8, r24
     6a4:	73 c1       	rjmp	.+742    	; 0x98c <io_controller+0x3bc>
     6a6:	6b ea       	ldi	r22, 0xAB	; 171
     6a8:	72 e0       	ldi	r23, 0x02	; 2
     6aa:	ce 01       	movw	r24, r28
     6ac:	81 5b       	subi	r24, 0xB1	; 177
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	17 d6       	rcall	.+3118   	; 0x12e0 <strcmp>
     6b2:	89 2b       	or	r24, r25
     6b4:	a9 f4       	brne	.+42     	; 0x6e0 <io_controller+0x110>
     6b6:	90 91 b8 04 	lds	r25, 0x04B8
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	91 11       	cpse	r25, r1
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	80 93 b8 04 	sts	0x04B8, r24
     6c4:	80 91 b8 04 	lds	r24, 0x04B8
     6c8:	88 23       	and	r24, r24
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <io_controller+0x106>
     6cc:	47 e1       	ldi	r20, 0x17	; 23
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	63 e9       	ldi	r22, 0x93	; 147
     6d2:	72 e0       	ldi	r23, 0x02	; 2
     6d4:	58 c1       	rjmp	.+688    	; 0x986 <io_controller+0x3b6>
     6d6:	49 e1       	ldi	r20, 0x19	; 25
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	6e ea       	ldi	r22, 0xAE	; 174
     6dc:	72 e0       	ldi	r23, 0x02	; 2
     6de:	53 c1       	rjmp	.+678    	; 0x986 <io_controller+0x3b6>
     6e0:	68 ec       	ldi	r22, 0xC8	; 200
     6e2:	72 e0       	ldi	r23, 0x02	; 2
     6e4:	ce 01       	movw	r24, r28
     6e6:	81 5b       	subi	r24, 0xB1	; 177
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	fa d5       	rcall	.+3060   	; 0x12e0 <strcmp>
     6ec:	89 2b       	or	r24, r25
     6ee:	51 f4       	brne	.+20     	; 0x704 <io_controller+0x134>
     6f0:	49 e1       	ldi	r20, 0x19	; 25
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	6e ea       	ldi	r22, 0xAE	; 174
     6f6:	72 e0       	ldi	r23, 0x02	; 2
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	ea d3       	rcall	.+2004   	; 0xed2 <Serial_write_string>
     6fe:	10 92 b8 04 	sts	0x04B8, r1
     702:	44 c1       	rjmp	.+648    	; 0x98c <io_controller+0x3bc>
     704:	80 91 b8 04 	lds	r24, 0x04B8
     708:	88 23       	and	r24, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <io_controller+0x13e>
     70c:	98 c0       	rjmp	.+304    	; 0x83e <io_controller+0x26e>
     70e:	6b ec       	ldi	r22, 0xCB	; 203
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	ce 01       	movw	r24, r28
     714:	81 5b       	subi	r24, 0xB1	; 177
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	e3 d5       	rcall	.+3014   	; 0x12e0 <strcmp>
     71a:	89 2b       	or	r24, r25
     71c:	e1 f4       	brne	.+56     	; 0x756 <io_controller+0x186>
     71e:	60 91 bb 04 	lds	r22, 0x04BB
     722:	70 91 bc 04 	lds	r23, 0x04BC
     726:	80 91 04 02 	lds	r24, 0x0204
     72a:	81 11       	cpse	r24, r1
     72c:	0f c0       	rjmp	.+30     	; 0x74c <io_controller+0x17c>
     72e:	77 27       	eor	r23, r23
     730:	cb 01       	movw	r24, r22
     732:	33 e0       	ldi	r19, 0x03	; 3
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	3a 95       	dec	r19
     73a:	e1 f7       	brne	.-8      	; 0x734 <io_controller+0x164>
     73c:	68 0f       	add	r22, r24
     73e:	79 1f       	adc	r23, r25
     740:	cb 01       	movw	r24, r22
     742:	80 56       	subi	r24, 0x60	; 96
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	65 e0       	ldi	r22, 0x05	; 5
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	86 d5       	rcall	.+2828   	; 0x1258 <__divmodhi4>
     74c:	1f 92       	push	r1
     74e:	6f 93       	push	r22
     750:	ff 92       	push	r15
     752:	ef 92       	push	r14
     754:	b7 c0       	rjmp	.+366    	; 0x8c4 <io_controller+0x2f4>
     756:	6e ec       	ldi	r22, 0xCE	; 206
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	ce 01       	movw	r24, r28
     75c:	81 5b       	subi	r24, 0xB1	; 177
     75e:	9f 4f       	sbci	r25, 0xFF	; 255
     760:	bf d5       	rcall	.+2942   	; 0x12e0 <strcmp>
     762:	89 2b       	or	r24, r25
     764:	99 f4       	brne	.+38     	; 0x78c <io_controller+0x1bc>
     766:	ce 01       	movw	r24, r28
     768:	87 5b       	subi	r24, 0xB7	; 183
     76a:	9f 4f       	sbci	r25, 0xFF	; 255
     76c:	9c d5       	rcall	.+2872   	; 0x12a6 <atoi>
     76e:	90 93 03 02 	sts	0x0203, r25
     772:	80 93 02 02 	sts	0x0202, r24
     776:	80 91 02 02 	lds	r24, 0x0202
     77a:	90 91 03 02 	lds	r25, 0x0203
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	81 ed       	ldi	r24, 0xD1	; 209
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	9c c0       	rjmp	.+312    	; 0x8c4 <io_controller+0x2f4>
     78c:	6e ef       	ldi	r22, 0xFE	; 254
     78e:	72 e0       	ldi	r23, 0x02	; 2
     790:	ce 01       	movw	r24, r28
     792:	81 5b       	subi	r24, 0xB1	; 177
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	a4 d5       	rcall	.+2888   	; 0x12e0 <strcmp>
     798:	89 2b       	or	r24, r25
     79a:	71 f5       	brne	.+92     	; 0x7f8 <io_controller+0x228>
     79c:	ce 01       	movw	r24, r28
     79e:	87 5b       	subi	r24, 0xB7	; 183
     7a0:	9f 4f       	sbci	r25, 0xFF	; 255
     7a2:	81 d5       	rcall	.+2818   	; 0x12a6 <atoi>
     7a4:	2c e3       	ldi	r18, 0x3C	; 60
     7a6:	ac 01       	movw	r20, r24
     7a8:	24 9f       	mul	r18, r20
     7aa:	c0 01       	movw	r24, r0
     7ac:	25 9f       	mul	r18, r21
     7ae:	90 0d       	add	r25, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	90 93 01 02 	sts	0x0201, r25
     7b6:	80 93 00 02 	sts	0x0200, r24
     7ba:	80 91 00 02 	lds	r24, 0x0200
     7be:	90 91 01 02 	lds	r25, 0x0201
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	1f 93       	push	r17
     7d0:	0f 93       	push	r16
     7d2:	97 d5       	rcall	.+2862   	; 0x1302 <sprintf>
     7d4:	f8 01       	movw	r30, r16
     7d6:	01 90       	ld	r0, Z+
     7d8:	00 20       	and	r0, r0
     7da:	e9 f7       	brne	.-6      	; 0x7d6 <io_controller+0x206>
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	af 01       	movw	r20, r30
     7e0:	40 1b       	sub	r20, r16
     7e2:	51 0b       	sbc	r21, r17
     7e4:	b8 01       	movw	r22, r16
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	73 d3       	rcall	.+1766   	; 0xed2 <Serial_write_string>
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	65 ee       	ldi	r22, 0xE5	; 229
     7f0:	74 e0       	ldi	r23, 0x04	; 4
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	0b dd       	rcall	.-1514   	; 0x20c <x_new>
     7f6:	75 c0       	rjmp	.+234    	; 0x8e2 <io_controller+0x312>
     7f8:	6d e1       	ldi	r22, 0x1D	; 29
     7fa:	73 e0       	ldi	r23, 0x03	; 3
     7fc:	ce 01       	movw	r24, r28
     7fe:	81 5b       	subi	r24, 0xB1	; 177
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	6e d5       	rcall	.+2780   	; 0x12e0 <strcmp>
     804:	89 2b       	or	r24, r25
     806:	49 f4       	brne	.+18     	; 0x81a <io_controller+0x24a>
     808:	95 b1       	in	r25, 0x05	; 5
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	89 27       	eor	r24, r25
     80e:	85 b9       	out	0x05, r24	; 5
     810:	41 e1       	ldi	r20, 0x11	; 17
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e2       	ldi	r22, 0x20	; 32
     816:	73 e0       	ldi	r23, 0x03	; 3
     818:	b6 c0       	rjmp	.+364    	; 0x986 <io_controller+0x3b6>
     81a:	62 e3       	ldi	r22, 0x32	; 50
     81c:	73 e0       	ldi	r23, 0x03	; 3
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	5d d5       	rcall	.+2746   	; 0x12e0 <strcmp>
     826:	89 2b       	or	r24, r25
     828:	09 f0       	breq	.+2      	; 0x82c <io_controller+0x25c>
     82a:	a4 c0       	rjmp	.+328    	; 0x974 <io_controller+0x3a4>
     82c:	95 b1       	in	r25, 0x05	; 5
     82e:	80 e1       	ldi	r24, 0x10	; 16
     830:	89 27       	eor	r24, r25
     832:	85 b9       	out	0x05, r24	; 5
     834:	4f e0       	ldi	r20, 0x0F	; 15
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	65 e3       	ldi	r22, 0x35	; 53
     83a:	73 e0       	ldi	r23, 0x03	; 3
     83c:	a4 c0       	rjmp	.+328    	; 0x986 <io_controller+0x3b6>
     83e:	6c e5       	ldi	r22, 0x5C	; 92
     840:	73 e0       	ldi	r23, 0x03	; 3
     842:	ce 01       	movw	r24, r28
     844:	81 5b       	subi	r24, 0xB1	; 177
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	4b d5       	rcall	.+2710   	; 0x12e0 <strcmp>
     84a:	89 2b       	or	r24, r25
     84c:	19 f5       	brne	.+70     	; 0x894 <io_controller+0x2c4>
     84e:	ce 01       	movw	r24, r28
     850:	87 5b       	subi	r24, 0xB7	; 183
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	28 d5       	rcall	.+2640   	; 0x12a6 <atoi>
     856:	90 93 ba 04 	sts	0x04BA, r25
     85a:	80 93 b9 04 	sts	0x04B9, r24
     85e:	80 91 b9 04 	lds	r24, 0x04B9
     862:	90 91 ba 04 	lds	r25, 0x04BA
     866:	97 fd       	sbrc	r25, 7
     868:	07 c0       	rjmp	.+14     	; 0x878 <io_controller+0x2a8>
     86a:	80 91 b9 04 	lds	r24, 0x04B9
     86e:	90 91 ba 04 	lds	r25, 0x04BA
     872:	8e 37       	cpi	r24, 0x7E	; 126
     874:	91 05       	cpc	r25, r1
     876:	2c f0       	brlt	.+10     	; 0x882 <io_controller+0x2b2>
     878:	4f e2       	ldi	r20, 0x2F	; 47
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	6f e5       	ldi	r22, 0x5F	; 95
     87e:	73 e0       	ldi	r23, 0x03	; 3
     880:	82 c0       	rjmp	.+260    	; 0x986 <io_controller+0x3b6>
     882:	80 91 b9 04 	lds	r24, 0x04B9
     886:	90 91 ba 04 	lds	r25, 0x04BA
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	bf 92       	push	r11
     890:	af 92       	push	r10
     892:	18 c0       	rjmp	.+48     	; 0x8c4 <io_controller+0x2f4>
     894:	6e eb       	ldi	r22, 0xBE	; 190
     896:	73 e0       	ldi	r23, 0x03	; 3
     898:	ce 01       	movw	r24, r28
     89a:	81 5b       	subi	r24, 0xB1	; 177
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	20 d5       	rcall	.+2624   	; 0x12e0 <strcmp>
     8a0:	89 2b       	or	r24, r25
     8a2:	31 f5       	brne	.+76     	; 0x8f0 <io_controller+0x320>
     8a4:	ce 01       	movw	r24, r28
     8a6:	87 5b       	subi	r24, 0xB7	; 183
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fd d4       	rcall	.+2554   	; 0x12a6 <atoi>
     8ac:	90 93 06 02 	sts	0x0206, r25
     8b0:	80 93 05 02 	sts	0x0205, r24
     8b4:	80 91 05 02 	lds	r24, 0x0205
     8b8:	90 91 06 02 	lds	r25, 0x0206
     8bc:	9f 93       	push	r25
     8be:	8f 93       	push	r24
     8c0:	df 92       	push	r13
     8c2:	cf 92       	push	r12
     8c4:	1f 93       	push	r17
     8c6:	0f 93       	push	r16
     8c8:	1c d5       	rcall	.+2616   	; 0x1302 <sprintf>
     8ca:	f8 01       	movw	r30, r16
     8cc:	01 90       	ld	r0, Z+
     8ce:	00 20       	and	r0, r0
     8d0:	e9 f7       	brne	.-6      	; 0x8cc <io_controller+0x2fc>
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	af 01       	movw	r20, r30
     8d6:	40 1b       	sub	r20, r16
     8d8:	51 0b       	sbc	r21, r17
     8da:	b8 01       	movw	r22, r16
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	f8 d2       	rcall	.+1520   	; 0xed2 <Serial_write_string>
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	4e c0       	rjmp	.+156    	; 0x98c <io_controller+0x3bc>
     8f0:	69 ed       	ldi	r22, 0xD9	; 217
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	ce 01       	movw	r24, r28
     8f6:	81 5b       	subi	r24, 0xB1	; 177
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	f2 d4       	rcall	.+2532   	; 0x12e0 <strcmp>
     8fc:	89 2b       	or	r24, r25
     8fe:	d1 f5       	brne	.+116    	; 0x974 <io_controller+0x3a4>
     900:	2a 96       	adiw	r28, 0x0a	; 10
     902:	8f ad       	ldd	r24, Y+63	; 0x3f
     904:	2a 97       	sbiw	r28, 0x0a	; 10
     906:	86 34       	cpi	r24, 0x46	; 70
     908:	99 f0       	breq	.+38     	; 0x930 <io_controller+0x360>
     90a:	88 35       	cpi	r24, 0x58	; 88
     90c:	f9 f0       	breq	.+62     	; 0x94c <io_controller+0x37c>
     90e:	83 34       	cpi	r24, 0x43	; 67
     910:	61 f5       	brne	.+88     	; 0x96a <io_controller+0x39a>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 04 02 	sts	0x0204, r24
     918:	47 e1       	ldi	r20, 0x17	; 23
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	67 ef       	ldi	r22, 0xF7	; 247
     91e:	73 e0       	ldi	r23, 0x03	; 3
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	d6 d2       	rcall	.+1452   	; 0xed2 <Serial_write_string>
     926:	97 e3       	ldi	r25, 0x37	; 55
     928:	e9 2e       	mov	r14, r25
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	f9 2e       	mov	r15, r25
     92e:	2e c0       	rjmp	.+92     	; 0x98c <io_controller+0x3bc>
     930:	10 92 04 02 	sts	0x0204, r1
     934:	4a e1       	ldi	r20, 0x1A	; 26
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	6c ed       	ldi	r22, 0xDC	; 220
     93a:	73 e0       	ldi	r23, 0x03	; 3
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	c8 d2       	rcall	.+1424   	; 0xed2 <Serial_write_string>
     942:	2d e6       	ldi	r18, 0x6D	; 109
     944:	e2 2e       	mov	r14, r18
     946:	22 e0       	ldi	r18, 0x02	; 2
     948:	f2 2e       	mov	r15, r18
     94a:	20 c0       	rjmp	.+64     	; 0x98c <io_controller+0x3bc>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 04 02 	sts	0x0204, r24
     952:	43 e2       	ldi	r20, 0x23	; 35
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	6f e0       	ldi	r22, 0x0F	; 15
     958:	74 e0       	ldi	r23, 0x04	; 4
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	b9 d2       	rcall	.+1394   	; 0xed2 <Serial_write_string>
     960:	87 e5       	ldi	r24, 0x57	; 87
     962:	e8 2e       	mov	r14, r24
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	f8 2e       	mov	r15, r24
     968:	11 c0       	rjmp	.+34     	; 0x98c <io_controller+0x3bc>
     96a:	45 e1       	ldi	r20, 0x15	; 21
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	63 e3       	ldi	r22, 0x33	; 51
     970:	74 e0       	ldi	r23, 0x04	; 4
     972:	09 c0       	rjmp	.+18     	; 0x986 <io_controller+0x3b6>
     974:	46 e1       	ldi	r20, 0x16	; 22
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	65 e4       	ldi	r22, 0x45	; 69
     97a:	73 e0       	ldi	r23, 0x03	; 3
     97c:	04 c0       	rjmp	.+8      	; 0x986 <io_controller+0x3b6>
     97e:	47 e1       	ldi	r20, 0x17	; 23
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	69 e4       	ldi	r22, 0x49	; 73
     984:	74 e0       	ldi	r23, 0x04	; 4
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	a3 d2       	rcall	.+1350   	; 0xed2 <Serial_write_string>
     98c:	cc db       	rcall	.-2152   	; 0x126 <x_yield>
     98e:	53 ce       	rjmp	.-858    	; 0x636 <io_controller+0x66>

00000990 <sensor_controller>:
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	1f 92       	push	r1
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	68 dd       	rcall	.-1328   	; 0x46c <ow_reset>
     99c:	81 11       	cpse	r24, r1
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <sensor_controller+0x1a>
     9a0:	65 dd       	rcall	.-1334   	; 0x46c <ow_reset>
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	c0 db       	rcall	.-2176   	; 0x126 <x_yield>
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	f9 cf       	rjmp	.-14     	; 0x99c <sensor_controller+0xc>
     9aa:	c9 dd       	rcall	.-1134   	; 0x53e <ow_read_temperature>
     9ac:	90 93 bc 04 	sts	0x04BC, r25
     9b0:	80 93 bb 04 	sts	0x04BB, r24
     9b4:	80 91 05 02 	lds	r24, 0x0205
     9b8:	90 91 06 02 	lds	r25, 0x0206
     9bc:	ef dc       	rcall	.-1570   	; 0x39c <x_delay>
     9be:	f5 cf       	rjmp	.-22     	; 0x9aa <sensor_controller+0x1a>

000009c0 <shut_down>:
     9c0:	85 b1       	in	r24, 0x05	; 5
     9c2:	80 63       	ori	r24, 0x30	; 48
     9c4:	85 b9       	out	0x05, r24	; 5
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	45 cd       	rjmp	.-1398   	; 0x454 <x_disable>

000009ca <timeout_controller>:
     9ca:	c0 e0       	ldi	r28, 0x00	; 0
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	80 91 00 02 	lds	r24, 0x0200
     9d2:	90 91 01 02 	lds	r25, 0x0201
     9d6:	c8 17       	cp	r28, r24
     9d8:	d9 07       	cpc	r29, r25
     9da:	2c f4       	brge	.+10     	; 0x9e6 <timeout_controller+0x1c>
     9dc:	88 ee       	ldi	r24, 0xE8	; 232
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	dd dc       	rcall	.-1606   	; 0x39c <x_delay>
     9e2:	21 96       	adiw	r28, 0x01	; 1
     9e4:	f4 cf       	rjmp	.-24     	; 0x9ce <timeout_controller+0x4>
     9e6:	20 91 bb 04 	lds	r18, 0x04BB
     9ea:	30 91 bc 04 	lds	r19, 0x04BC
     9ee:	80 91 b9 04 	lds	r24, 0x04B9
     9f2:	90 91 ba 04 	lds	r25, 0x04BA
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	28 17       	cp	r18, r24
     9fa:	39 07       	cpc	r19, r25
     9fc:	34 f7       	brge	.-52     	; 0x9ca <timeout_controller>
     9fe:	42 e2       	ldi	r20, 0x22	; 34
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	61 e6       	ldi	r22, 0x61	; 97
     a04:	74 e0       	ldi	r23, 0x04	; 4
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	63 d2       	rcall	.+1222   	; 0xed2 <Serial_write_string>
     a0c:	d9 df       	rcall	.-78     	; 0x9c0 <shut_down>
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	21 dd       	rcall	.-1470   	; 0x454 <x_disable>
     a12:	db cf       	rjmp	.-74     	; 0x9ca <timeout_controller>

00000a14 <box_controller>:
     a14:	84 b1       	in	r24, 0x04	; 4
     a16:	80 63       	ori	r24, 0x30	; 48
     a18:	84 b9       	out	0x04, r24	; 4
     a1a:	2c 98       	cbi	0x05, 4	; 5
     a1c:	20 91 bb 04 	lds	r18, 0x04BB
     a20:	30 91 bc 04 	lds	r19, 0x04BC
     a24:	80 91 02 02 	lds	r24, 0x0202
     a28:	90 91 03 02 	lds	r25, 0x0203
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	44 f0       	brlt	.+16     	; 0xa42 <box_controller+0x2e>
     a32:	4e e2       	ldi	r20, 0x2E	; 46
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	64 e8       	ldi	r22, 0x84	; 132
     a38:	74 e0       	ldi	r23, 0x04	; 4
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	49 d2       	rcall	.+1170   	; 0xed2 <Serial_write_string>
     a40:	bf df       	rcall	.-130    	; 0x9c0 <shut_down>
     a42:	80 91 b8 04 	lds	r24, 0x04B8
     a46:	81 11       	cpse	r24, r1
     a48:	0e c0       	rjmp	.+28     	; 0xa66 <box_controller+0x52>
     a4a:	20 91 bb 04 	lds	r18, 0x04BB
     a4e:	30 91 bc 04 	lds	r19, 0x04BC
     a52:	80 91 b9 04 	lds	r24, 0x04B9
     a56:	90 91 ba 04 	lds	r25, 0x04BA
     a5a:	28 17       	cp	r18, r24
     a5c:	39 07       	cpc	r19, r25
     a5e:	14 f4       	brge	.+4      	; 0xa64 <box_controller+0x50>
     a60:	2d 98       	cbi	0x05, 5	; 5
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <box_controller+0x52>
     a64:	2d 9a       	sbi	0x05, 5	; 5
     a66:	80 91 05 02 	lds	r24, 0x0205
     a6a:	90 91 06 02 	lds	r25, 0x0206
     a6e:	96 dc       	rcall	.-1748   	; 0x39c <x_delay>
     a70:	d5 cf       	rjmp	.-86     	; 0xa1c <box_controller+0x8>

00000a72 <main>:
}


int main(void)
{
	x_init();
     a72:	1d dc       	rcall	.-1990   	; 0x2ae <x_init>
	//Launch main three threads
	x_new(2, io_controller, 1);
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	68 ee       	ldi	r22, 0xE8	; 232
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	c7 db       	rcall	.-2162   	; 0x20c <x_new>
	x_new(1, sensor_controller, 1);
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	68 ec       	ldi	r22, 0xC8	; 200
     a82:	74 e0       	ldi	r23, 0x04	; 4
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	c2 db       	rcall	.-2172   	; 0x20c <x_new>
	x_new(3, timeout_controller, 1);
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	65 ee       	ldi	r22, 0xE5	; 229
     a8c:	74 e0       	ldi	r23, 0x04	; 4
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	bd db       	rcall	.-2182   	; 0x20c <x_new>
	x_new(0, box_controller, 1); //replaces main with box control logic)
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	6a e0       	ldi	r22, 0x0A	; 10
     a96:	75 e0       	ldi	r23, 0x05	; 5
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	b8 db       	rcall	.-2192   	; 0x20c <x_new>
}
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	08 95       	ret

00000aa2 <Q_putc>:

QCB queues[QCB_MAX_COUNT];
bool occupied[8] = {false, false, false, false, false, false, false, false};

byte Q_putc(byte qid, char data)
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
	QCB *qcb = &queues[qid];
	if (qcb->flags != 1)
     aa6:	98 e0       	ldi	r25, 0x08	; 8
     aa8:	89 9f       	mul	r24, r25
     aaa:	f0 01       	movw	r30, r0
     aac:	11 24       	eor	r1, r1
     aae:	df 01       	movw	r26, r30
     ab0:	a6 50       	subi	r26, 0x06	; 6
     ab2:	b3 4f       	sbci	r27, 0xF3	; 243
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	8c 91       	ld	r24, X
     ab8:	13 97       	sbiw	r26, 0x03	; 3
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	a1 f1       	breq	.+104    	; 0xb26 <Q_putc+0x84>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     abe:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ac0:	f8 94       	cli
		{
			*(qcb->pQ + qcb->in) = data;
     ac2:	8c 91       	ld	r24, X
     ac4:	16 96       	adiw	r26, 0x06	; 6
     ac6:	cd 91       	ld	r28, X+
     ac8:	dc 91       	ld	r29, X
     aca:	17 97       	sbiw	r26, 0x07	; 7
     acc:	c8 0f       	add	r28, r24
     ace:	d1 1d       	adc	r29, r1
     ad0:	68 83       	st	Y, r22
			qcb->available += 1;
     ad2:	14 96       	adiw	r26, 0x04	; 4
     ad4:	2d 91       	ld	r18, X+
     ad6:	3c 91       	ld	r19, X
     ad8:	15 97       	sbiw	r26, 0x05	; 5
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	15 96       	adiw	r26, 0x05	; 5
     ae0:	3c 93       	st	X, r19
     ae2:	2e 93       	st	-X, r18
     ae4:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 2)
     ae6:	13 96       	adiw	r26, 0x03	; 3
     ae8:	8c 91       	ld	r24, X
     aea:	13 97       	sbiw	r26, 0x03	; 3
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	11 f4       	brne	.+4      	; 0xaf4 <Q_putc+0x52>
			{
				qcb->flags = 0;
     af0:	13 96       	adiw	r26, 0x03	; 3
     af2:	1c 92       	st	X, r1
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     af4:	e6 50       	subi	r30, 0x06	; 6
     af6:	f3 4f       	sbci	r31, 0xF3	; 243
     af8:	90 81       	ld	r25, Z
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	49 2f       	mov	r20, r25
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	4f 5f       	subi	r20, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	42 23       	and	r20, r18
     b0a:	53 23       	and	r21, r19
     b0c:	21 81       	ldd	r18, Z+1	; 0x01
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
     b12:	89 23       	and	r24, r25
     b14:	80 83       	st	Z, r24
			if (qcb->flags == 2)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->in + 1) & qcb->smask) != qcb->out)
     b16:	42 17       	cp	r20, r18
     b18:	53 07       	cpc	r21, r19
     b1a:	11 f4       	brne	.+4      	; 0xb20 <Q_putc+0x7e>
				qcb->in = (qcb->in + 1) & qcb->smask;
			}
			else
			{
				qcb->in = (qcb->in + 1) & qcb->smask;
				qcb->flags = 1;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b20:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <Q_putc+0x86>
	}
	else
	{
		return 0;
     b26:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <Q_getc>:

byte Q_getc(byte qid, char *pdata)
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	9b 01       	movw	r18, r22
	QCB *qcb = &queues[qid];
	if (qcb->flags != 2)
     b34:	98 e0       	ldi	r25, 0x08	; 8
     b36:	89 9f       	mul	r24, r25
     b38:	f0 01       	movw	r30, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	df 01       	movw	r26, r30
     b3e:	a6 50       	subi	r26, 0x06	; 6
     b40:	b3 4f       	sbci	r27, 0xF3	; 243
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	8c 91       	ld	r24, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	c1 f1       	breq	.+112    	; 0xbbc <Q_getc+0x8e>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b4c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b4e:	f8 94       	cli
		{
			*pdata = *(qcb->pQ + qcb->out);
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	8c 91       	ld	r24, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	16 96       	adiw	r26, 0x06	; 6
     b58:	cd 91       	ld	r28, X+
     b5a:	dc 91       	ld	r29, X
     b5c:	17 97       	sbiw	r26, 0x07	; 7
     b5e:	c8 0f       	add	r28, r24
     b60:	d1 1d       	adc	r29, r1
     b62:	88 81       	ld	r24, Y
     b64:	e9 01       	movw	r28, r18
     b66:	88 83       	st	Y, r24
			qcb->available -= 1;
     b68:	14 96       	adiw	r26, 0x04	; 4
     b6a:	2d 91       	ld	r18, X+
     b6c:	3c 91       	ld	r19, X
     b6e:	15 97       	sbiw	r26, 0x05	; 5
     b70:	21 50       	subi	r18, 0x01	; 1
     b72:	31 09       	sbc	r19, r1
     b74:	15 96       	adiw	r26, 0x05	; 5
     b76:	3c 93       	st	X, r19
     b78:	2e 93       	st	-X, r18
     b7a:	14 97       	sbiw	r26, 0x04	; 4
			if (qcb->flags == 1)
     b7c:	13 96       	adiw	r26, 0x03	; 3
     b7e:	8c 91       	ld	r24, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	11 f4       	brne	.+4      	; 0xb8a <Q_getc+0x5c>
			{
				qcb->flags = 0;
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	1c 92       	st	X, r1
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     b8a:	e6 50       	subi	r30, 0x06	; 6
     b8c:	f3 4f       	sbci	r31, 0xF3	; 243
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	49 2f       	mov	r20, r25
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	4f 5f       	subi	r20, 0xFF	; 255
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	42 23       	and	r20, r18
     ba0:	53 23       	and	r21, r19
     ba2:	20 81       	ld	r18, Z
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	9f 5f       	subi	r25, 0xFF	; 255
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
     ba8:	89 23       	and	r24, r25
     baa:	81 83       	std	Z+1, r24	; 0x01
			if (qcb->flags == 1)
			{
				qcb->flags = 0;
			}
			
			if (((qcb->out + 1) & qcb->smask) != qcb->in)
     bac:	42 17       	cp	r20, r18
     bae:	53 07       	cpc	r21, r19
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <Q_getc+0x88>
				qcb->out = (qcb->out + 1) & qcb->smask;
			}
			else
			{
				qcb->out = (qcb->out + 1) & qcb->smask;
				qcb->flags = 2;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	83 83       	std	Z+3, r24	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bb6:	7f bf       	out	0x3f, r23	; 63
			}
		}
		return 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <Q_getc+0x90>
	}
	return 0;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <Q_create>:

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
     bc4:	9c 01       	movw	r18, r24
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	31 09       	sbc	r19, r1
     bca:	2f 3f       	cpi	r18, 0xFF	; 255
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f0       	breq	.+2      	; 0xbd2 <Q_create+0xe>
     bd0:	48 f5       	brcc	.+82     	; 0xc24 <Q_create+0x60>
     bd2:	28 23       	and	r18, r24
     bd4:	39 23       	and	r19, r25
     bd6:	23 2b       	or	r18, r19
     bd8:	29 f5       	brne	.+74     	; 0xc24 <Q_create+0x60>
     bda:	ed eb       	ldi	r30, 0xBD	; 189
     bdc:	f4 e0       	ldi	r31, 0x04	; 4
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
	{
		if (occupied[i] == false)
     be2:	41 91       	ld	r20, Z+
     be4:	41 11       	cpse	r20, r1
     be6:	19 c0       	rjmp	.+50     	; 0xc1a <Q_create+0x56>
		{
			queues[i].in = 0;
     be8:	f9 01       	movw	r30, r18
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	9a 95       	dec	r25
     bf2:	e1 f7       	brne	.-8      	; 0xbec <Q_create+0x28>
     bf4:	e6 50       	subi	r30, 0x06	; 6
     bf6:	f3 4f       	sbci	r31, 0xF3	; 243
     bf8:	10 82       	st	Z, r1
			queues[i].out = 0;
     bfa:	11 82       	std	Z+1, r1	; 0x01
			queues[i].smask = qsize - 1;
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	82 83       	std	Z+2, r24	; 0x02
			queues[i].flags = 2;
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	83 83       	std	Z+3, r24	; 0x03
			queues[i].available = 0;
     c04:	15 82       	std	Z+5, r1	; 0x05
     c06:	14 82       	std	Z+4, r1	; 0x04
			queues[i].pQ = pbuffer;
     c08:	77 83       	std	Z+7, r23	; 0x07
     c0a:	66 83       	std	Z+6, r22	; 0x06
			occupied[i] = true;
     c0c:	f9 01       	movw	r30, r18
     c0e:	e3 54       	subi	r30, 0x43	; 67
     c10:	fb 4f       	sbci	r31, 0xFB	; 251
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 83       	st	Z, r24
			return i;
     c16:	82 2f       	mov	r24, r18
     c18:	08 95       	ret
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
	}
	
	for (int i = 0; i < QCB_MAX_COUNT; i++)
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	28 30       	cpi	r18, 0x08	; 8
     c20:	31 05       	cpc	r19, r1
     c22:	f9 f6       	brne	.-66     	; 0xbe2 <Q_create+0x1e>

uint8_t Q_create(int qsize, char * pbuffer)
{
	if ((qsize <= 0) || (qsize > 256) || (qsize & (qsize - 1)) != 0)
	{
		return -1;
     c24:	8f ef       	ldi	r24, 0xFF	; 255
			occupied[i] = true;
			return i;
		}
	}
	return -1;
}
     c26:	08 95       	ret

00000c28 <Serial_open>:
	Q_delete(ports[port].tx_qid);
}

int Serial_available(int port)
{
	return Q_used(ports[port].rx_qid);
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	91 05       	cpc	r25, r1
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <Serial_open+0x1a>
     c40:	d0 c0       	rjmp	.+416    	; 0xde2 <Serial_open+0x1ba>
     c42:	b2 2e       	mov	r11, r18
     c44:	6a 01       	movw	r12, r20
     c46:	7b 01       	movw	r14, r22
     c48:	8c 01       	movw	r16, r24
     c4a:	8a e0       	ldi	r24, 0x0A	; 10
     c4c:	80 9f       	mul	r24, r16
     c4e:	e0 01       	movw	r28, r0
     c50:	81 9f       	mul	r24, r17
     c52:	d0 0d       	add	r29, r0
     c54:	11 24       	eor	r1, r1
     c56:	c1 5f       	subi	r28, 0xF1	; 241
     c58:	dd 4f       	sbci	r29, 0xFD	; 253
     c5a:	6a 81       	ldd	r22, Y+2	; 0x02
     c5c:	7b 81       	ldd	r23, Y+3	; 0x03
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	b0 df       	rcall	.-160    	; 0xbc4 <Q_create>
     c64:	88 83       	st	Y, r24
     c66:	6e 81       	ldd	r22, Y+6	; 0x06
     c68:	7f 81       	ldd	r23, Y+7	; 0x07
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	99 85       	ldd	r25, Y+9	; 0x09
     c6e:	aa df       	rcall	.-172    	; 0xbc4 <Q_create>
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	00 0f       	add	r16, r16
     c74:	11 1f       	adc	r17, r17
     c76:	f8 01       	movw	r30, r16
     c78:	e9 5f       	subi	r30, 0xF9	; 249
     c7a:	fd 4f       	sbci	r31, 0xFD	; 253
     c7c:	a0 81       	ld	r26, Z
     c7e:	b1 81       	ldd	r27, Z+1	; 0x01
     c80:	9c 91       	ld	r25, X
     c82:	92 60       	ori	r25, 0x02	; 2
     c84:	9c 93       	st	X, r25
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	c8 16       	cp	r12, r24
     c8a:	80 e7       	ldi	r24, 0x70	; 112
     c8c:	d8 06       	cpc	r13, r24
     c8e:	e1 04       	cpc	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <Serial_open+0x6e>
     c94:	78 c0       	rjmp	.+240    	; 0xd86 <Serial_open+0x15e>
     c96:	94 f5       	brge	.+100    	; 0xcfc <Serial_open+0xd4>
     c98:	80 e8       	ldi	r24, 0x80	; 128
     c9a:	c8 16       	cp	r12, r24
     c9c:	85 e2       	ldi	r24, 0x25	; 37
     c9e:	d8 06       	cpc	r13, r24
     ca0:	e1 04       	cpc	r14, r1
     ca2:	f1 04       	cpc	r15, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <Serial_open+0x80>
     ca6:	65 c0       	rjmp	.+202    	; 0xd72 <Serial_open+0x14a>
     ca8:	ac f4       	brge	.+42     	; 0xcd4 <Serial_open+0xac>
     caa:	80 e6       	ldi	r24, 0x60	; 96
     cac:	c8 16       	cp	r12, r24
     cae:	89 e0       	ldi	r24, 0x09	; 9
     cb0:	d8 06       	cpc	r13, r24
     cb2:	e1 04       	cpc	r14, r1
     cb4:	f1 04       	cpc	r15, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <Serial_open+0x92>
     cb8:	57 c0       	rjmp	.+174    	; 0xd68 <Serial_open+0x140>
     cba:	80 ec       	ldi	r24, 0xC0	; 192
     cbc:	c8 16       	cp	r12, r24
     cbe:	82 e1       	ldi	r24, 0x12	; 18
     cc0:	d8 06       	cpc	r13, r24
     cc2:	e1 04       	cpc	r14, r1
     cc4:	f1 04       	cpc	r15, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <Serial_open+0xa2>
     cc8:	77 c0       	rjmp	.+238    	; 0xdb8 <Serial_open+0x190>
     cca:	40 ea       	ldi	r20, 0xA0	; 160
     ccc:	51 e0       	ldi	r21, 0x01	; 1
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	75 c0       	rjmp	.+234    	; 0xdbe <Serial_open+0x196>
     cd4:	80 e4       	ldi	r24, 0x40	; 64
     cd6:	c8 16       	cp	r12, r24
     cd8:	88 e3       	ldi	r24, 0x38	; 56
     cda:	d8 06       	cpc	r13, r24
     cdc:	e1 04       	cpc	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <Serial_open+0xbc>
     ce2:	4c c0       	rjmp	.+152    	; 0xd7c <Serial_open+0x154>
     ce4:	c1 14       	cp	r12, r1
     ce6:	8b e4       	ldi	r24, 0x4B	; 75
     ce8:	d8 06       	cpc	r13, r24
     cea:	e1 04       	cpc	r14, r1
     cec:	f1 04       	cpc	r15, r1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <Serial_open+0xca>
     cf0:	63 c0       	rjmp	.+198    	; 0xdb8 <Serial_open+0x190>
     cf2:	47 e6       	ldi	r20, 0x67	; 103
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	61 c0       	rjmp	.+194    	; 0xdbe <Serial_open+0x196>
     cfc:	c1 14       	cp	r12, r1
     cfe:	8c e2       	ldi	r24, 0x2C	; 44
     d00:	d8 06       	cpc	r13, r24
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	e8 06       	cpc	r14, r24
     d06:	f1 04       	cpc	r15, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <Serial_open+0xe4>
     d0a:	47 c0       	rjmp	.+142    	; 0xd9a <Serial_open+0x172>
     d0c:	94 f4       	brge	.+36     	; 0xd32 <Serial_open+0x10a>
     d0e:	c1 14       	cp	r12, r1
     d10:	86 e9       	ldi	r24, 0x96	; 150
     d12:	d8 06       	cpc	r13, r24
     d14:	e1 04       	cpc	r14, r1
     d16:	f1 04       	cpc	r15, r1
     d18:	d9 f1       	breq	.+118    	; 0xd90 <Serial_open+0x168>
     d1a:	c1 14       	cp	r12, r1
     d1c:	81 ee       	ldi	r24, 0xE1	; 225
     d1e:	d8 06       	cpc	r13, r24
     d20:	e1 04       	cpc	r14, r1
     d22:	f1 04       	cpc	r15, r1
     d24:	09 f0       	breq	.+2      	; 0xd28 <Serial_open+0x100>
     d26:	48 c0       	rjmp	.+144    	; 0xdb8 <Serial_open+0x190>
     d28:	42 e2       	ldi	r20, 0x22	; 34
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	46 c0       	rjmp	.+140    	; 0xdbe <Serial_open+0x196>
     d32:	c1 14       	cp	r12, r1
     d34:	84 e8       	ldi	r24, 0x84	; 132
     d36:	d8 06       	cpc	r13, r24
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	e8 06       	cpc	r14, r24
     d3c:	f1 04       	cpc	r15, r1
     d3e:	91 f1       	breq	.+100    	; 0xda4 <Serial_open+0x17c>
     d40:	80 e9       	ldi	r24, 0x90	; 144
     d42:	c8 16       	cp	r12, r24
     d44:	80 ed       	ldi	r24, 0xD0	; 208
     d46:	d8 06       	cpc	r13, r24
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	e8 06       	cpc	r14, r24
     d4c:	f1 04       	cpc	r15, r1
     d4e:	79 f1       	breq	.+94     	; 0xdae <Serial_open+0x186>
     d50:	c1 14       	cp	r12, r1
     d52:	82 ec       	ldi	r24, 0xC2	; 194
     d54:	d8 06       	cpc	r13, r24
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	e8 06       	cpc	r14, r24
     d5a:	f1 04       	cpc	r15, r1
     d5c:	69 f5       	brne	.+90     	; 0xdb8 <Serial_open+0x190>
     d5e:	40 e1       	ldi	r20, 0x10	; 16
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	2b c0       	rjmp	.+86     	; 0xdbe <Serial_open+0x196>
     d68:	40 e4       	ldi	r20, 0x40	; 64
     d6a:	53 e0       	ldi	r21, 0x03	; 3
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	26 c0       	rjmp	.+76     	; 0xdbe <Serial_open+0x196>
     d72:	4f ec       	ldi	r20, 0xCF	; 207
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	21 c0       	rjmp	.+66     	; 0xdbe <Serial_open+0x196>
     d7c:	4a e8       	ldi	r20, 0x8A	; 138
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	1c c0       	rjmp	.+56     	; 0xdbe <Serial_open+0x196>
     d86:	44 e4       	ldi	r20, 0x44	; 68
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	17 c0       	rjmp	.+46     	; 0xdbe <Serial_open+0x196>
     d90:	43 e3       	ldi	r20, 0x33	; 51
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <Serial_open+0x196>
     d9a:	49 e1       	ldi	r20, 0x19	; 25
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <Serial_open+0x196>
     da4:	48 e0       	ldi	r20, 0x08	; 8
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <Serial_open+0x196>
     dae:	47 e0       	ldi	r20, 0x07	; 7
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <Serial_open+0x196>
     db8:	4f ef       	ldi	r20, 0xFF	; 255
     dba:	5f ef       	ldi	r21, 0xFF	; 255
     dbc:	ba 01       	movw	r22, r20
     dbe:	8f b7       	in	r24, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	f8 01       	movw	r30, r16
     dc4:	e9 5f       	subi	r30, 0xF9	; 249
     dc6:	fd 4f       	sbci	r31, 0xFD	; 253
     dc8:	01 90       	ld	r0, Z+
     dca:	f0 81       	ld	r31, Z
     dcc:	e0 2d       	mov	r30, r0
     dce:	55 83       	std	Z+5, r21	; 0x05
     dd0:	44 83       	std	Z+4, r20	; 0x04
     dd2:	b2 82       	std	Z+2, r11	; 0x02
     dd4:	98 e9       	ldi	r25, 0x98	; 152
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	8f bf       	out	0x3f, r24	; 63
     dda:	78 94       	sei
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <Serial_open+0x1be>
     de2:	8f ef       	ldi	r24, 0xFF	; 255
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	08 95       	ret

00000dfa <Serial_read>:
}

int Serial_read(int port)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	1f 92       	push	r1
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	char qdata = 0;
     e04:	19 82       	std	Y+1, r1	; 0x01
	int data;
	
	if (Q_getc(ports[port].rx_qid, &qdata))
     e06:	2a e0       	ldi	r18, 0x0A	; 10
     e08:	ac 01       	movw	r20, r24
     e0a:	24 9f       	mul	r18, r20
     e0c:	c0 01       	movw	r24, r0
     e0e:	25 9f       	mul	r18, r21
     e10:	90 0d       	add	r25, r0
     e12:	11 24       	eor	r1, r1
     e14:	fc 01       	movw	r30, r24
     e16:	e1 5f       	subi	r30, 0xF1	; 241
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	be 01       	movw	r22, r28
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	85 de       	rcall	.-758    	; 0xb2e <Q_getc>
     e24:	88 23       	and	r24, r24
     e26:	19 f0       	breq	.+6      	; 0xe2e <Serial_read+0x34>
	{
		data = qdata;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	90 e0       	ldi	r25, 0x00	; 0
		return data;
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <Serial_read+0x38>
	}
	else
	{
		return -1;
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     e32:	0f 90       	pop	r0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <Serial_read_string>:
		i++;
	}
	return 1;
}

int Serial_read_string(int port, char * data, int data_length) {
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	7c 01       	movw	r14, r24
     e4c:	6b 01       	movw	r12, r22
     e4e:	8a 01       	movw	r16, r20
	char latest;
	int i = 0;
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	d0 e0       	ldi	r29, 0x00	; 0
	
	//loop until end of data
	while (i < data_length) {
     e54:	c0 17       	cp	r28, r16
     e56:	d1 07       	cpc	r29, r17
     e58:	8c f4       	brge	.+34     	; 0xe7c <Serial_read_string+0x42>
		//get latest character
		latest = Serial_read(port);
     e5a:	c7 01       	movw	r24, r14
     e5c:	ce df       	rcall	.-100    	; 0xdfa <Serial_read>
		if (latest != 0xFF) {
     e5e:	8f 3f       	cpi	r24, 0xFF	; 255
     e60:	59 f0       	breq	.+22     	; 0xe78 <Serial_read_string+0x3e>
     e62:	f6 01       	movw	r30, r12
     e64:	ec 0f       	add	r30, r28
     e66:	fd 1f       	adc	r31, r29
			if (latest == 0x0D) {
     e68:	8d 30       	cpi	r24, 0x0D	; 13
     e6a:	21 f4       	brne	.+8      	; 0xe74 <Serial_read_string+0x3a>
				//the input has terminated
				data[i] = 0x00;//null terminate string
     e6c:	10 82       	st	Z, r1
				return 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <Serial_read_string+0x46>
			}
			//write the next character into the buffer
			data[i++]=latest;
     e74:	80 83       	st	Z, r24
     e76:	21 96       	adiw	r28, 0x01	; 1
		}
		//if we got back a -1 from Serial_read, just loop again
		x_yield();
     e78:	56 d9       	rcall	.-3412   	; 0x126 <x_yield>
     e7a:	ec cf       	rjmp	.-40     	; 0xe54 <Serial_read_string+0x1a>
	}
	//we've used more than the whole array, error
	return 0;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	08 95       	ret

00000e92 <Serial_write>:

int Serial_write(int port, char data)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
	if (Q_putc(ports[port].tx_qid, data))
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	8c 9f       	mul	r24, r28
     e9c:	f0 01       	movw	r30, r0
     e9e:	8d 9f       	mul	r24, r29
     ea0:	f0 0d       	add	r31, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	e1 5f       	subi	r30, 0xF1	; 241
     ea6:	fd 4f       	sbci	r31, 0xFD	; 253
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	fb dd       	rcall	.-1034   	; 0xaa2 <Q_putc>
     eac:	88 23       	and	r24, r24
     eae:	61 f0       	breq	.+24     	; 0xec8 <Serial_write+0x36>
	{
		//regs[port].ucsrb |= (0x1 << 5); //Commented out line	
		regs[port]->ucsrb |= (1<<UDRIE0); 
     eb0:	cc 0f       	add	r28, r28
     eb2:	dd 1f       	adc	r29, r29
     eb4:	c9 5f       	subi	r28, 0xF9	; 249
     eb6:	dd 4f       	sbci	r29, 0xFD	; 253
     eb8:	e8 81       	ld	r30, Y
     eba:	f9 81       	ldd	r31, Y+1	; 0x01
     ebc:	81 81       	ldd	r24, Z+1	; 0x01
     ebe:	80 62       	ori	r24, 0x20	; 32
     ec0:	81 83       	std	Z+1, r24	; 0x01
		//regs[port].ucsra |= (0x1 << 5); //This might be wrong.
		return 1;	
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <Serial_write+0x3a>
	}
	return -1;
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
	
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <Serial_write_string>:
	{
		return -1;
	}
}

int Serial_write_string(int port, char * data, int data_length) {
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	8c 01       	movw	r16, r24
     edc:	eb 01       	movw	r28, r22
	int i = 0;
	while( data[i] != 0x00) {
     ede:	69 91       	ld	r22, Y+
     ee0:	66 23       	and	r22, r22
     ee2:	19 f0       	breq	.+6      	; 0xeea <Serial_write_string+0x18>
		Serial_write(port, data[i]);
     ee4:	c8 01       	movw	r24, r16
     ee6:	d5 df       	rcall	.-86     	; 0xe92 <Serial_write>
     ee8:	fa cf       	rjmp	.-12     	; 0xede <Serial_write_string+0xc>
		i++;
	}
	return 1;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <__vector_26>:
	return -1;
	
}

ISR(USART0_UDRE_vect)
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[0].tx_qid, &data))
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	80 91 10 02 	lds	r24, 0x0210
     f32:	fd dd       	rcall	.-1030   	; 0xb2e <Q_getc>
     f34:	88 23       	and	r24, r24
     f36:	21 f0       	breq	.+8      	; 0xf40 <__vector_26+0x48>
	{
		UDR0 = data;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	80 93 c6 00 	sts	0x00C6, r24
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <__vector_26+0x56>
	}
	else
	{
		regs[0]->ucsrb &= ~(0x1<<UDRIE0);
     f40:	e0 91 07 02 	lds	r30, 0x0207
     f44:	f0 91 08 02 	lds	r31, 0x0208
     f48:	81 81       	ldd	r24, Z+1	; 0x01
     f4a:	8f 7d       	andi	r24, 0xDF	; 223
     f4c:	81 83       	std	Z+1, r24	; 0x01
	}
}
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_37>:


ISR(USART1_UDRE_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	1f 92       	push	r1
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[1].tx_qid, &data))
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	80 91 1a 02 	lds	r24, 0x021A
     fb4:	bc dd       	rcall	.-1160   	; 0xb2e <Q_getc>
     fb6:	88 23       	and	r24, r24
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <__vector_37+0x48>
	{
		UDR1 = data;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 93 ce 00 	sts	0x00CE, r24
     fc0:	07 c0       	rjmp	.+14     	; 0xfd0 <__vector_37+0x56>
	}
	else
	{
		regs[1]->ucsrb &= ~(0x1 << 5);
     fc2:	e0 91 09 02 	lds	r30, 0x0209
     fc6:	f0 91 0a 02 	lds	r31, 0x020A
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	8f 7d       	andi	r24, 0xDF	; 223
     fce:	81 83       	std	Z+1, r24	; 0x01
	}
}
     fd0:	0f 90       	pop	r0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0b be       	out	0x3b, r0	; 59
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_52>:

ISR(USART2_UDRE_vect)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	0b b6       	in	r0, 0x3b	; 59
    1008:	0f 92       	push	r0
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	1f 92       	push	r1
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[2].tx_qid, &data))
    102c:	be 01       	movw	r22, r28
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	80 91 24 02 	lds	r24, 0x0224
    1036:	7b dd       	rcall	.-1290   	; 0xb2e <Q_getc>
    1038:	88 23       	and	r24, r24
    103a:	21 f0       	breq	.+8      	; 0x1044 <__vector_52+0x48>
	{
		UDR2 = data;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	80 93 d6 00 	sts	0x00D6, r24
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <__vector_52+0x56>
	}
	else
	{
		regs[2]->ucsrb &= ~(0x1 << 5);
    1044:	e0 91 0b 02 	lds	r30, 0x020B
    1048:	f0 91 0c 02 	lds	r31, 0x020C
    104c:	81 81       	ldd	r24, Z+1	; 0x01
    104e:	8f 7d       	andi	r24, 0xDF	; 223
    1050:	81 83       	std	Z+1, r24	; 0x01
	}
}
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0b be       	out	0x3b, r0	; 59
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <__vector_55>:

ISR(USART3_UDRE_vect)
{
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	0b b6       	in	r0, 0x3b	; 59
    108a:	0f 92       	push	r0
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	1f 92       	push	r1
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	char data;
	if (Q_getc(ports[3].tx_qid, &data))
    10ae:	be 01       	movw	r22, r28
    10b0:	6f 5f       	subi	r22, 0xFF	; 255
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	80 91 2e 02 	lds	r24, 0x022E
    10b8:	3a dd       	rcall	.-1420   	; 0xb2e <Q_getc>
    10ba:	88 23       	and	r24, r24
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <__vector_55+0x48>
	{
		UDR3 = data;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	80 93 36 01 	sts	0x0136, r24
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <__vector_55+0x56>
	}
	else
	{
		regs[3]->ucsrb &= ~(0x1 << 5);
    10c6:	e0 91 0d 02 	lds	r30, 0x020D
    10ca:	f0 91 0e 02 	lds	r31, 0x020E
    10ce:	81 81       	ldd	r24, Z+1	; 0x01
    10d0:	8f 7d       	andi	r24, 0xDF	; 223
    10d2:	81 83       	std	Z+1, r24	; 0x01
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0b be       	out	0x3b, r0	; 59
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_25>:

ISR(USART0_RX_vect)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	0b b6       	in	r0, 0x3b	; 59
    110c:	0f 92       	push	r0
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
	Q_putc(ports[0].rx_qid, UDR0);
    1126:	60 91 c6 00 	lds	r22, 0x00C6
    112a:	80 91 0f 02 	lds	r24, 0x020F
    112e:	b9 dc       	rcall	.-1678   	; 0xaa2 <Q_putc>
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0b be       	out	0x3b, r0	; 59
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_36>:

ISR(USART1_RX_vect)
{
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	0b b6       	in	r0, 0x3b	; 59
    1162:	0f 92       	push	r0
    1164:	2f 93       	push	r18
    1166:	3f 93       	push	r19
    1168:	4f 93       	push	r20
    116a:	5f 93       	push	r21
    116c:	6f 93       	push	r22
    116e:	7f 93       	push	r23
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
	Q_putc(ports[1].rx_qid, UDR1);
    117c:	60 91 ce 00 	lds	r22, 0x00CE
    1180:	80 91 19 02 	lds	r24, 0x0219
    1184:	8e dc       	rcall	.-1764   	; 0xaa2 <Q_putc>
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_51>:

ISR(USART2_RX_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0b b6       	in	r0, 0x3b	; 59
    11b8:	0f 92       	push	r0
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	Q_putc(ports[2].rx_qid, UDR2);
    11d2:	60 91 d6 00 	lds	r22, 0x00D6
    11d6:	80 91 23 02 	lds	r24, 0x0223
    11da:	63 dc       	rcall	.-1850   	; 0xaa2 <Q_putc>
}
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0b be       	out	0x3b, r0	; 59
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_54>:

ISR(USART3_RX_vect)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	0b b6       	in	r0, 0x3b	; 59
    120e:	0f 92       	push	r0
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
	Q_putc(ports[3].rx_qid, UDR3);
    1228:	60 91 36 01 	lds	r22, 0x0136
    122c:	80 91 2d 02 	lds	r24, 0x022D
    1230:	38 dc       	rcall	.-1936   	; 0xaa2 <Q_putc>
}
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	7f 91       	pop	r23
    1240:	6f 91       	pop	r22
    1242:	5f 91       	pop	r21
    1244:	4f 91       	pop	r20
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0b be       	out	0x3b, r0	; 59
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <__divmodhi4>:
    1258:	97 fb       	bst	r25, 7
    125a:	07 2e       	mov	r0, r23
    125c:	16 f4       	brtc	.+4      	; 0x1262 <__divmodhi4+0xa>
    125e:	00 94       	com	r0
    1260:	06 d0       	rcall	.+12     	; 0x126e <__divmodhi4_neg1>
    1262:	77 fd       	sbrc	r23, 7
    1264:	08 d0       	rcall	.+16     	; 0x1276 <__divmodhi4_neg2>
    1266:	0b d0       	rcall	.+22     	; 0x127e <__udivmodhi4>
    1268:	07 fc       	sbrc	r0, 7
    126a:	05 d0       	rcall	.+10     	; 0x1276 <__divmodhi4_neg2>
    126c:	3e f4       	brtc	.+14     	; 0x127c <__divmodhi4_exit>

0000126e <__divmodhi4_neg1>:
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__divmodhi4_neg2>:
    1276:	70 95       	com	r23
    1278:	61 95       	neg	r22
    127a:	7f 4f       	sbci	r23, 0xFF	; 255

0000127c <__divmodhi4_exit>:
    127c:	08 95       	ret

0000127e <__udivmodhi4>:
    127e:	aa 1b       	sub	r26, r26
    1280:	bb 1b       	sub	r27, r27
    1282:	51 e1       	ldi	r21, 0x11	; 17
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <__udivmodhi4_ep>

00001286 <__udivmodhi4_loop>:
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	a6 17       	cp	r26, r22
    128c:	b7 07       	cpc	r27, r23
    128e:	10 f0       	brcs	.+4      	; 0x1294 <__udivmodhi4_ep>
    1290:	a6 1b       	sub	r26, r22
    1292:	b7 0b       	sbc	r27, r23

00001294 <__udivmodhi4_ep>:
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	5a 95       	dec	r21
    129a:	a9 f7       	brne	.-22     	; 0x1286 <__udivmodhi4_loop>
    129c:	80 95       	com	r24
    129e:	90 95       	com	r25
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	08 95       	ret

000012a6 <atoi>:
    12a6:	fc 01       	movw	r30, r24
    12a8:	88 27       	eor	r24, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	e8 94       	clt
    12ae:	21 91       	ld	r18, Z+
    12b0:	20 32       	cpi	r18, 0x20	; 32
    12b2:	e9 f3       	breq	.-6      	; 0x12ae <atoi+0x8>
    12b4:	29 30       	cpi	r18, 0x09	; 9
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <atoi+0x16>
    12b8:	2e 30       	cpi	r18, 0x0E	; 14
    12ba:	c8 f3       	brcs	.-14     	; 0x12ae <atoi+0x8>
    12bc:	2b 32       	cpi	r18, 0x2B	; 43
    12be:	39 f0       	breq	.+14     	; 0x12ce <atoi+0x28>
    12c0:	2d 32       	cpi	r18, 0x2D	; 45
    12c2:	31 f4       	brne	.+12     	; 0x12d0 <atoi+0x2a>
    12c4:	68 94       	set
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <atoi+0x28>
    12c8:	14 d0       	rcall	.+40     	; 0x12f2 <__mulhi_const_10>
    12ca:	82 0f       	add	r24, r18
    12cc:	91 1d       	adc	r25, r1
    12ce:	21 91       	ld	r18, Z+
    12d0:	20 53       	subi	r18, 0x30	; 48
    12d2:	2a 30       	cpi	r18, 0x0A	; 10
    12d4:	c8 f3       	brcs	.-14     	; 0x12c8 <atoi+0x22>
    12d6:	1e f4       	brtc	.+6      	; 0x12de <atoi+0x38>
    12d8:	90 95       	com	r25
    12da:	81 95       	neg	r24
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <strcmp>:
    12e0:	fb 01       	movw	r30, r22
    12e2:	dc 01       	movw	r26, r24
    12e4:	8d 91       	ld	r24, X+
    12e6:	01 90       	ld	r0, Z+
    12e8:	80 19       	sub	r24, r0
    12ea:	01 10       	cpse	r0, r1
    12ec:	d9 f3       	breq	.-10     	; 0x12e4 <strcmp+0x4>
    12ee:	99 0b       	sbc	r25, r25
    12f0:	08 95       	ret

000012f2 <__mulhi_const_10>:
    12f2:	7a e0       	ldi	r23, 0x0A	; 10
    12f4:	97 9f       	mul	r25, r23
    12f6:	90 2d       	mov	r25, r0
    12f8:	87 9f       	mul	r24, r23
    12fa:	80 2d       	mov	r24, r0
    12fc:	91 0d       	add	r25, r1
    12fe:	11 24       	eor	r1, r1
    1300:	08 95       	ret

00001302 <sprintf>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	2e 97       	sbiw	r28, 0x0e	; 14
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	0e 89       	ldd	r16, Y+22	; 0x16
    131c:	1f 89       	ldd	r17, Y+23	; 0x17
    131e:	86 e0       	ldi	r24, 0x06	; 6
    1320:	8c 83       	std	Y+4, r24	; 0x04
    1322:	1a 83       	std	Y+2, r17	; 0x02
    1324:	09 83       	std	Y+1, r16	; 0x01
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f e7       	ldi	r25, 0x7F	; 127
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	ae 01       	movw	r20, r28
    1330:	46 5e       	subi	r20, 0xE6	; 230
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	68 8d       	ldd	r22, Y+24	; 0x18
    1336:	79 8d       	ldd	r23, Y+25	; 0x19
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	11 d0       	rcall	.+34     	; 0x1360 <vfprintf>
    133e:	2f 81       	ldd	r18, Y+7	; 0x07
    1340:	38 85       	ldd	r19, Y+8	; 0x08
    1342:	f8 01       	movw	r30, r16
    1344:	e2 0f       	add	r30, r18
    1346:	f3 1f       	adc	r31, r19
    1348:	10 82       	st	Z, r1
    134a:	2e 96       	adiw	r28, 0x0e	; 14
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <vfprintf>:
    1360:	2f 92       	push	r2
    1362:	3f 92       	push	r3
    1364:	4f 92       	push	r4
    1366:	5f 92       	push	r5
    1368:	6f 92       	push	r6
    136a:	7f 92       	push	r7
    136c:	8f 92       	push	r8
    136e:	9f 92       	push	r9
    1370:	af 92       	push	r10
    1372:	bf 92       	push	r11
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	2c 97       	sbiw	r28, 0x0c	; 12
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	7c 01       	movw	r14, r24
    1396:	6b 01       	movw	r12, r22
    1398:	8a 01       	movw	r16, r20
    139a:	fc 01       	movw	r30, r24
    139c:	17 82       	std	Z+7, r1	; 0x07
    139e:	16 82       	std	Z+6, r1	; 0x06
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	81 ff       	sbrs	r24, 1
    13a4:	b0 c1       	rjmp	.+864    	; 0x1706 <vfprintf+0x3a6>
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	4c 01       	movw	r8, r24
    13ac:	f7 01       	movw	r30, r14
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	f6 01       	movw	r30, r12
    13b2:	93 fd       	sbrc	r25, 3
    13b4:	85 91       	lpm	r24, Z+
    13b6:	93 ff       	sbrs	r25, 3
    13b8:	81 91       	ld	r24, Z+
    13ba:	6f 01       	movw	r12, r30
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <vfprintf+0x62>
    13c0:	9e c1       	rjmp	.+828    	; 0x16fe <vfprintf+0x39e>
    13c2:	85 32       	cpi	r24, 0x25	; 37
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <vfprintf+0x74>
    13c6:	93 fd       	sbrc	r25, 3
    13c8:	85 91       	lpm	r24, Z+
    13ca:	93 ff       	sbrs	r25, 3
    13cc:	81 91       	ld	r24, Z+
    13ce:	6f 01       	movw	r12, r30
    13d0:	85 32       	cpi	r24, 0x25	; 37
    13d2:	21 f4       	brne	.+8      	; 0x13dc <vfprintf+0x7c>
    13d4:	b7 01       	movw	r22, r14
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	c7 d1       	rcall	.+910    	; 0x1768 <fputc>
    13da:	e8 cf       	rjmp	.-48     	; 0x13ac <vfprintf+0x4c>
    13dc:	51 2c       	mov	r5, r1
    13de:	31 2c       	mov	r3, r1
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	20 32       	cpi	r18, 0x20	; 32
    13e4:	a0 f4       	brcc	.+40     	; 0x140e <vfprintf+0xae>
    13e6:	8b 32       	cpi	r24, 0x2B	; 43
    13e8:	69 f0       	breq	.+26     	; 0x1404 <vfprintf+0xa4>
    13ea:	30 f4       	brcc	.+12     	; 0x13f8 <vfprintf+0x98>
    13ec:	80 32       	cpi	r24, 0x20	; 32
    13ee:	59 f0       	breq	.+22     	; 0x1406 <vfprintf+0xa6>
    13f0:	83 32       	cpi	r24, 0x23	; 35
    13f2:	69 f4       	brne	.+26     	; 0x140e <vfprintf+0xae>
    13f4:	20 61       	ori	r18, 0x10	; 16
    13f6:	2c c0       	rjmp	.+88     	; 0x1450 <vfprintf+0xf0>
    13f8:	8d 32       	cpi	r24, 0x2D	; 45
    13fa:	39 f0       	breq	.+14     	; 0x140a <vfprintf+0xaa>
    13fc:	80 33       	cpi	r24, 0x30	; 48
    13fe:	39 f4       	brne	.+14     	; 0x140e <vfprintf+0xae>
    1400:	21 60       	ori	r18, 0x01	; 1
    1402:	26 c0       	rjmp	.+76     	; 0x1450 <vfprintf+0xf0>
    1404:	22 60       	ori	r18, 0x02	; 2
    1406:	24 60       	ori	r18, 0x04	; 4
    1408:	23 c0       	rjmp	.+70     	; 0x1450 <vfprintf+0xf0>
    140a:	28 60       	ori	r18, 0x08	; 8
    140c:	21 c0       	rjmp	.+66     	; 0x1450 <vfprintf+0xf0>
    140e:	27 fd       	sbrc	r18, 7
    1410:	27 c0       	rjmp	.+78     	; 0x1460 <vfprintf+0x100>
    1412:	30 ed       	ldi	r19, 0xD0	; 208
    1414:	38 0f       	add	r19, r24
    1416:	3a 30       	cpi	r19, 0x0A	; 10
    1418:	78 f4       	brcc	.+30     	; 0x1438 <vfprintf+0xd8>
    141a:	26 ff       	sbrs	r18, 6
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0xca>
    141e:	fa e0       	ldi	r31, 0x0A	; 10
    1420:	5f 9e       	mul	r5, r31
    1422:	30 0d       	add	r19, r0
    1424:	11 24       	eor	r1, r1
    1426:	53 2e       	mov	r5, r19
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <vfprintf+0xf0>
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	38 9e       	mul	r3, r24
    142e:	30 0d       	add	r19, r0
    1430:	11 24       	eor	r1, r1
    1432:	33 2e       	mov	r3, r19
    1434:	20 62       	ori	r18, 0x20	; 32
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <vfprintf+0xf0>
    1438:	8e 32       	cpi	r24, 0x2E	; 46
    143a:	21 f4       	brne	.+8      	; 0x1444 <vfprintf+0xe4>
    143c:	26 fd       	sbrc	r18, 6
    143e:	5f c1       	rjmp	.+702    	; 0x16fe <vfprintf+0x39e>
    1440:	20 64       	ori	r18, 0x40	; 64
    1442:	06 c0       	rjmp	.+12     	; 0x1450 <vfprintf+0xf0>
    1444:	8c 36       	cpi	r24, 0x6C	; 108
    1446:	11 f4       	brne	.+4      	; 0x144c <vfprintf+0xec>
    1448:	20 68       	ori	r18, 0x80	; 128
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0xf0>
    144c:	88 36       	cpi	r24, 0x68	; 104
    144e:	41 f4       	brne	.+16     	; 0x1460 <vfprintf+0x100>
    1450:	f6 01       	movw	r30, r12
    1452:	93 fd       	sbrc	r25, 3
    1454:	85 91       	lpm	r24, Z+
    1456:	93 ff       	sbrs	r25, 3
    1458:	81 91       	ld	r24, Z+
    145a:	6f 01       	movw	r12, r30
    145c:	81 11       	cpse	r24, r1
    145e:	c1 cf       	rjmp	.-126    	; 0x13e2 <vfprintf+0x82>
    1460:	98 2f       	mov	r25, r24
    1462:	9f 7d       	andi	r25, 0xDF	; 223
    1464:	95 54       	subi	r25, 0x45	; 69
    1466:	93 30       	cpi	r25, 0x03	; 3
    1468:	28 f4       	brcc	.+10     	; 0x1474 <vfprintf+0x114>
    146a:	0c 5f       	subi	r16, 0xFC	; 252
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	ff e3       	ldi	r31, 0x3F	; 63
    1470:	f9 83       	std	Y+1, r31	; 0x01
    1472:	0d c0       	rjmp	.+26     	; 0x148e <vfprintf+0x12e>
    1474:	83 36       	cpi	r24, 0x63	; 99
    1476:	31 f0       	breq	.+12     	; 0x1484 <vfprintf+0x124>
    1478:	83 37       	cpi	r24, 0x73	; 115
    147a:	71 f0       	breq	.+28     	; 0x1498 <vfprintf+0x138>
    147c:	83 35       	cpi	r24, 0x53	; 83
    147e:	09 f0       	breq	.+2      	; 0x1482 <vfprintf+0x122>
    1480:	57 c0       	rjmp	.+174    	; 0x1530 <vfprintf+0x1d0>
    1482:	21 c0       	rjmp	.+66     	; 0x14c6 <vfprintf+0x166>
    1484:	f8 01       	movw	r30, r16
    1486:	80 81       	ld	r24, Z
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	0e 5f       	subi	r16, 0xFE	; 254
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	44 24       	eor	r4, r4
    1490:	43 94       	inc	r4
    1492:	51 2c       	mov	r5, r1
    1494:	54 01       	movw	r10, r8
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <vfprintf+0x160>
    1498:	38 01       	movw	r6, r16
    149a:	f2 e0       	ldi	r31, 0x02	; 2
    149c:	6f 0e       	add	r6, r31
    149e:	71 1c       	adc	r7, r1
    14a0:	f8 01       	movw	r30, r16
    14a2:	a0 80       	ld	r10, Z
    14a4:	b1 80       	ldd	r11, Z+1	; 0x01
    14a6:	26 ff       	sbrs	r18, 6
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <vfprintf+0x150>
    14aa:	65 2d       	mov	r22, r5
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x154>
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	7f ef       	ldi	r23, 0xFF	; 255
    14b4:	c5 01       	movw	r24, r10
    14b6:	2c 87       	std	Y+12, r18	; 0x0c
    14b8:	4c d1       	rcall	.+664    	; 0x1752 <strnlen>
    14ba:	2c 01       	movw	r4, r24
    14bc:	83 01       	movw	r16, r6
    14be:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c0:	2f 77       	andi	r18, 0x7F	; 127
    14c2:	22 2e       	mov	r2, r18
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <vfprintf+0x192>
    14c6:	38 01       	movw	r6, r16
    14c8:	f2 e0       	ldi	r31, 0x02	; 2
    14ca:	6f 0e       	add	r6, r31
    14cc:	71 1c       	adc	r7, r1
    14ce:	f8 01       	movw	r30, r16
    14d0:	a0 80       	ld	r10, Z
    14d2:	b1 80       	ldd	r11, Z+1	; 0x01
    14d4:	26 ff       	sbrs	r18, 6
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <vfprintf+0x17e>
    14d8:	65 2d       	mov	r22, r5
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x182>
    14de:	6f ef       	ldi	r22, 0xFF	; 255
    14e0:	7f ef       	ldi	r23, 0xFF	; 255
    14e2:	c5 01       	movw	r24, r10
    14e4:	2c 87       	std	Y+12, r18	; 0x0c
    14e6:	2a d1       	rcall	.+596    	; 0x173c <strnlen_P>
    14e8:	2c 01       	movw	r4, r24
    14ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ec:	20 68       	ori	r18, 0x80	; 128
    14ee:	22 2e       	mov	r2, r18
    14f0:	83 01       	movw	r16, r6
    14f2:	23 fc       	sbrc	r2, 3
    14f4:	19 c0       	rjmp	.+50     	; 0x1528 <vfprintf+0x1c8>
    14f6:	83 2d       	mov	r24, r3
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	48 16       	cp	r4, r24
    14fc:	59 06       	cpc	r5, r25
    14fe:	a0 f4       	brcc	.+40     	; 0x1528 <vfprintf+0x1c8>
    1500:	b7 01       	movw	r22, r14
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	30 d1       	rcall	.+608    	; 0x1768 <fputc>
    1508:	3a 94       	dec	r3
    150a:	f5 cf       	rjmp	.-22     	; 0x14f6 <vfprintf+0x196>
    150c:	f5 01       	movw	r30, r10
    150e:	27 fc       	sbrc	r2, 7
    1510:	85 91       	lpm	r24, Z+
    1512:	27 fe       	sbrs	r2, 7
    1514:	81 91       	ld	r24, Z+
    1516:	5f 01       	movw	r10, r30
    1518:	b7 01       	movw	r22, r14
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	25 d1       	rcall	.+586    	; 0x1768 <fputc>
    151e:	31 10       	cpse	r3, r1
    1520:	3a 94       	dec	r3
    1522:	f1 e0       	ldi	r31, 0x01	; 1
    1524:	4f 1a       	sub	r4, r31
    1526:	51 08       	sbc	r5, r1
    1528:	41 14       	cp	r4, r1
    152a:	51 04       	cpc	r5, r1
    152c:	79 f7       	brne	.-34     	; 0x150c <vfprintf+0x1ac>
    152e:	de c0       	rjmp	.+444    	; 0x16ec <vfprintf+0x38c>
    1530:	84 36       	cpi	r24, 0x64	; 100
    1532:	11 f0       	breq	.+4      	; 0x1538 <vfprintf+0x1d8>
    1534:	89 36       	cpi	r24, 0x69	; 105
    1536:	31 f5       	brne	.+76     	; 0x1584 <vfprintf+0x224>
    1538:	f8 01       	movw	r30, r16
    153a:	27 ff       	sbrs	r18, 7
    153c:	07 c0       	rjmp	.+14     	; 0x154c <vfprintf+0x1ec>
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	0c 5f       	subi	r16, 0xFC	; 252
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	08 c0       	rjmp	.+16     	; 0x155c <vfprintf+0x1fc>
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	07 2e       	mov	r0, r23
    1552:	00 0c       	add	r0, r0
    1554:	88 0b       	sbc	r24, r24
    1556:	99 0b       	sbc	r25, r25
    1558:	0e 5f       	subi	r16, 0xFE	; 254
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	2f 76       	andi	r18, 0x6F	; 111
    155e:	72 2e       	mov	r7, r18
    1560:	97 ff       	sbrs	r25, 7
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <vfprintf+0x216>
    1564:	90 95       	com	r25
    1566:	80 95       	com	r24
    1568:	70 95       	com	r23
    156a:	61 95       	neg	r22
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	20 68       	ori	r18, 0x80	; 128
    1574:	72 2e       	mov	r7, r18
    1576:	2a e0       	ldi	r18, 0x0A	; 10
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	a4 01       	movw	r20, r8
    157c:	2d d1       	rcall	.+602    	; 0x17d8 <__ultoa_invert>
    157e:	a8 2e       	mov	r10, r24
    1580:	a8 18       	sub	r10, r8
    1582:	43 c0       	rjmp	.+134    	; 0x160a <vfprintf+0x2aa>
    1584:	85 37       	cpi	r24, 0x75	; 117
    1586:	29 f4       	brne	.+10     	; 0x1592 <vfprintf+0x232>
    1588:	2f 7e       	andi	r18, 0xEF	; 239
    158a:	b2 2e       	mov	r11, r18
    158c:	2a e0       	ldi	r18, 0x0A	; 10
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	25 c0       	rjmp	.+74     	; 0x15dc <vfprintf+0x27c>
    1592:	f2 2f       	mov	r31, r18
    1594:	f9 7f       	andi	r31, 0xF9	; 249
    1596:	bf 2e       	mov	r11, r31
    1598:	8f 36       	cpi	r24, 0x6F	; 111
    159a:	c1 f0       	breq	.+48     	; 0x15cc <vfprintf+0x26c>
    159c:	18 f4       	brcc	.+6      	; 0x15a4 <vfprintf+0x244>
    159e:	88 35       	cpi	r24, 0x58	; 88
    15a0:	79 f0       	breq	.+30     	; 0x15c0 <vfprintf+0x260>
    15a2:	ad c0       	rjmp	.+346    	; 0x16fe <vfprintf+0x39e>
    15a4:	80 37       	cpi	r24, 0x70	; 112
    15a6:	19 f0       	breq	.+6      	; 0x15ae <vfprintf+0x24e>
    15a8:	88 37       	cpi	r24, 0x78	; 120
    15aa:	21 f0       	breq	.+8      	; 0x15b4 <vfprintf+0x254>
    15ac:	a8 c0       	rjmp	.+336    	; 0x16fe <vfprintf+0x39e>
    15ae:	2f 2f       	mov	r18, r31
    15b0:	20 61       	ori	r18, 0x10	; 16
    15b2:	b2 2e       	mov	r11, r18
    15b4:	b4 fe       	sbrs	r11, 4
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <vfprintf+0x272>
    15b8:	8b 2d       	mov	r24, r11
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	b8 2e       	mov	r11, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <vfprintf+0x272>
    15c0:	24 ff       	sbrs	r18, 4
    15c2:	0a c0       	rjmp	.+20     	; 0x15d8 <vfprintf+0x278>
    15c4:	9f 2f       	mov	r25, r31
    15c6:	96 60       	ori	r25, 0x06	; 6
    15c8:	b9 2e       	mov	r11, r25
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <vfprintf+0x278>
    15cc:	28 e0       	ldi	r18, 0x08	; 8
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <vfprintf+0x27c>
    15d2:	20 e1       	ldi	r18, 0x10	; 16
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x27c>
    15d8:	20 e1       	ldi	r18, 0x10	; 16
    15da:	32 e0       	ldi	r19, 0x02	; 2
    15dc:	f8 01       	movw	r30, r16
    15de:	b7 fe       	sbrs	r11, 7
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <vfprintf+0x290>
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	0c 5f       	subi	r16, 0xFC	; 252
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <vfprintf+0x29c>
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 5f       	subi	r16, 0xFE	; 254
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	a4 01       	movw	r20, r8
    15fe:	ec d0       	rcall	.+472    	; 0x17d8 <__ultoa_invert>
    1600:	a8 2e       	mov	r10, r24
    1602:	a8 18       	sub	r10, r8
    1604:	fb 2d       	mov	r31, r11
    1606:	ff 77       	andi	r31, 0x7F	; 127
    1608:	7f 2e       	mov	r7, r31
    160a:	76 fe       	sbrs	r7, 6
    160c:	0b c0       	rjmp	.+22     	; 0x1624 <vfprintf+0x2c4>
    160e:	37 2d       	mov	r19, r7
    1610:	3e 7f       	andi	r19, 0xFE	; 254
    1612:	a5 14       	cp	r10, r5
    1614:	50 f4       	brcc	.+20     	; 0x162a <vfprintf+0x2ca>
    1616:	74 fe       	sbrs	r7, 4
    1618:	0a c0       	rjmp	.+20     	; 0x162e <vfprintf+0x2ce>
    161a:	72 fc       	sbrc	r7, 2
    161c:	08 c0       	rjmp	.+16     	; 0x162e <vfprintf+0x2ce>
    161e:	37 2d       	mov	r19, r7
    1620:	3e 7e       	andi	r19, 0xEE	; 238
    1622:	05 c0       	rjmp	.+10     	; 0x162e <vfprintf+0x2ce>
    1624:	ba 2c       	mov	r11, r10
    1626:	37 2d       	mov	r19, r7
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <vfprintf+0x2d0>
    162a:	ba 2c       	mov	r11, r10
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <vfprintf+0x2d0>
    162e:	b5 2c       	mov	r11, r5
    1630:	34 ff       	sbrs	r19, 4
    1632:	0d c0       	rjmp	.+26     	; 0x164e <vfprintf+0x2ee>
    1634:	fe 01       	movw	r30, r28
    1636:	ea 0d       	add	r30, r10
    1638:	f1 1d       	adc	r31, r1
    163a:	80 81       	ld	r24, Z
    163c:	80 33       	cpi	r24, 0x30	; 48
    163e:	11 f4       	brne	.+4      	; 0x1644 <vfprintf+0x2e4>
    1640:	39 7e       	andi	r19, 0xE9	; 233
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <vfprintf+0x2f6>
    1644:	32 ff       	sbrs	r19, 2
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <vfprintf+0x2f4>
    1648:	b3 94       	inc	r11
    164a:	b3 94       	inc	r11
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <vfprintf+0x2f6>
    164e:	83 2f       	mov	r24, r19
    1650:	86 78       	andi	r24, 0x86	; 134
    1652:	09 f0       	breq	.+2      	; 0x1656 <vfprintf+0x2f6>
    1654:	b3 94       	inc	r11
    1656:	33 fd       	sbrc	r19, 3
    1658:	12 c0       	rjmp	.+36     	; 0x167e <vfprintf+0x31e>
    165a:	30 ff       	sbrs	r19, 0
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x30a>
    165e:	5a 2c       	mov	r5, r10
    1660:	b3 14       	cp	r11, r3
    1662:	18 f4       	brcc	.+6      	; 0x166a <vfprintf+0x30a>
    1664:	53 0c       	add	r5, r3
    1666:	5b 18       	sub	r5, r11
    1668:	b3 2c       	mov	r11, r3
    166a:	b3 14       	cp	r11, r3
    166c:	60 f4       	brcc	.+24     	; 0x1686 <vfprintf+0x326>
    166e:	b7 01       	movw	r22, r14
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	3c 87       	std	Y+12, r19	; 0x0c
    1676:	78 d0       	rcall	.+240    	; 0x1768 <fputc>
    1678:	b3 94       	inc	r11
    167a:	3c 85       	ldd	r19, Y+12	; 0x0c
    167c:	f6 cf       	rjmp	.-20     	; 0x166a <vfprintf+0x30a>
    167e:	b3 14       	cp	r11, r3
    1680:	10 f4       	brcc	.+4      	; 0x1686 <vfprintf+0x326>
    1682:	3b 18       	sub	r3, r11
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x328>
    1686:	31 2c       	mov	r3, r1
    1688:	34 ff       	sbrs	r19, 4
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <vfprintf+0x34e>
    168c:	b7 01       	movw	r22, r14
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	3c 87       	std	Y+12, r19	; 0x0c
    1694:	69 d0       	rcall	.+210    	; 0x1768 <fputc>
    1696:	3c 85       	ldd	r19, Y+12	; 0x0c
    1698:	32 ff       	sbrs	r19, 2
    169a:	16 c0       	rjmp	.+44     	; 0x16c8 <vfprintf+0x368>
    169c:	31 fd       	sbrc	r19, 1
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <vfprintf+0x346>
    16a0:	88 e7       	ldi	r24, 0x78	; 120
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x34a>
    16a6:	88 e5       	ldi	r24, 0x58	; 88
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	b7 01       	movw	r22, r14
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <vfprintf+0x366>
    16ae:	83 2f       	mov	r24, r19
    16b0:	86 78       	andi	r24, 0x86	; 134
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <vfprintf+0x368>
    16b4:	31 ff       	sbrs	r19, 1
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0x35c>
    16b8:	8b e2       	ldi	r24, 0x2B	; 43
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x35e>
    16bc:	80 e2       	ldi	r24, 0x20	; 32
    16be:	37 fd       	sbrc	r19, 7
    16c0:	8d e2       	ldi	r24, 0x2D	; 45
    16c2:	b7 01       	movw	r22, r14
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	50 d0       	rcall	.+160    	; 0x1768 <fputc>
    16c8:	a5 14       	cp	r10, r5
    16ca:	30 f4       	brcc	.+12     	; 0x16d8 <vfprintf+0x378>
    16cc:	b7 01       	movw	r22, r14
    16ce:	80 e3       	ldi	r24, 0x30	; 48
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	4a d0       	rcall	.+148    	; 0x1768 <fputc>
    16d4:	5a 94       	dec	r5
    16d6:	f8 cf       	rjmp	.-16     	; 0x16c8 <vfprintf+0x368>
    16d8:	aa 94       	dec	r10
    16da:	f4 01       	movw	r30, r8
    16dc:	ea 0d       	add	r30, r10
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	b7 01       	movw	r22, r14
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	40 d0       	rcall	.+128    	; 0x1768 <fputc>
    16e8:	a1 10       	cpse	r10, r1
    16ea:	f6 cf       	rjmp	.-20     	; 0x16d8 <vfprintf+0x378>
    16ec:	33 20       	and	r3, r3
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <vfprintf+0x392>
    16f0:	5d ce       	rjmp	.-838    	; 0x13ac <vfprintf+0x4c>
    16f2:	b7 01       	movw	r22, r14
    16f4:	80 e2       	ldi	r24, 0x20	; 32
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	37 d0       	rcall	.+110    	; 0x1768 <fputc>
    16fa:	3a 94       	dec	r3
    16fc:	f7 cf       	rjmp	.-18     	; 0x16ec <vfprintf+0x38c>
    16fe:	f7 01       	movw	r30, r14
    1700:	86 81       	ldd	r24, Z+6	; 0x06
    1702:	97 81       	ldd	r25, Z+7	; 0x07
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x3aa>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	2c 96       	adiw	r28, 0x0c	; 12
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret

0000173c <strnlen_P>:
    173c:	fc 01       	movw	r30, r24
    173e:	05 90       	lpm	r0, Z+
    1740:	61 50       	subi	r22, 0x01	; 1
    1742:	70 40       	sbci	r23, 0x00	; 0
    1744:	01 10       	cpse	r0, r1
    1746:	d8 f7       	brcc	.-10     	; 0x173e <strnlen_P+0x2>
    1748:	80 95       	com	r24
    174a:	90 95       	com	r25
    174c:	8e 0f       	add	r24, r30
    174e:	9f 1f       	adc	r25, r31
    1750:	08 95       	ret

00001752 <strnlen>:
    1752:	fc 01       	movw	r30, r24
    1754:	61 50       	subi	r22, 0x01	; 1
    1756:	70 40       	sbci	r23, 0x00	; 0
    1758:	01 90       	ld	r0, Z+
    175a:	01 10       	cpse	r0, r1
    175c:	d8 f7       	brcc	.-10     	; 0x1754 <strnlen+0x2>
    175e:	80 95       	com	r24
    1760:	90 95       	com	r25
    1762:	8e 0f       	add	r24, r30
    1764:	9f 1f       	adc	r25, r31
    1766:	08 95       	ret

00001768 <fputc>:
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	fb 01       	movw	r30, r22
    1772:	23 81       	ldd	r18, Z+3	; 0x03
    1774:	21 fd       	sbrc	r18, 1
    1776:	03 c0       	rjmp	.+6      	; 0x177e <fputc+0x16>
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	9f ef       	ldi	r25, 0xFF	; 255
    177c:	28 c0       	rjmp	.+80     	; 0x17ce <fputc+0x66>
    177e:	22 ff       	sbrs	r18, 2
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <fputc+0x46>
    1782:	46 81       	ldd	r20, Z+6	; 0x06
    1784:	57 81       	ldd	r21, Z+7	; 0x07
    1786:	24 81       	ldd	r18, Z+4	; 0x04
    1788:	35 81       	ldd	r19, Z+5	; 0x05
    178a:	42 17       	cp	r20, r18
    178c:	53 07       	cpc	r21, r19
    178e:	44 f4       	brge	.+16     	; 0x17a0 <fputc+0x38>
    1790:	a0 81       	ld	r26, Z
    1792:	b1 81       	ldd	r27, Z+1	; 0x01
    1794:	9d 01       	movw	r18, r26
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	31 83       	std	Z+1, r19	; 0x01
    179c:	20 83       	st	Z, r18
    179e:	8c 93       	st	X, r24
    17a0:	26 81       	ldd	r18, Z+6	; 0x06
    17a2:	37 81       	ldd	r19, Z+7	; 0x07
    17a4:	2f 5f       	subi	r18, 0xFF	; 255
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	37 83       	std	Z+7, r19	; 0x07
    17aa:	26 83       	std	Z+6, r18	; 0x06
    17ac:	10 c0       	rjmp	.+32     	; 0x17ce <fputc+0x66>
    17ae:	eb 01       	movw	r28, r22
    17b0:	09 2f       	mov	r16, r25
    17b2:	18 2f       	mov	r17, r24
    17b4:	00 84       	ldd	r0, Z+8	; 0x08
    17b6:	f1 85       	ldd	r31, Z+9	; 0x09
    17b8:	e0 2d       	mov	r30, r0
    17ba:	19 95       	eicall
    17bc:	89 2b       	or	r24, r25
    17be:	e1 f6       	brne	.-72     	; 0x1778 <fputc+0x10>
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	9f 81       	ldd	r25, Y+7	; 0x07
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9f 83       	std	Y+7, r25	; 0x07
    17c8:	8e 83       	std	Y+6, r24	; 0x06
    17ca:	81 2f       	mov	r24, r17
    17cc:	90 2f       	mov	r25, r16
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	08 95       	ret

000017d8 <__ultoa_invert>:
    17d8:	fa 01       	movw	r30, r20
    17da:	aa 27       	eor	r26, r26
    17dc:	28 30       	cpi	r18, 0x08	; 8
    17de:	51 f1       	breq	.+84     	; 0x1834 <__ultoa_invert+0x5c>
    17e0:	20 31       	cpi	r18, 0x10	; 16
    17e2:	81 f1       	breq	.+96     	; 0x1844 <__ultoa_invert+0x6c>
    17e4:	e8 94       	clt
    17e6:	6f 93       	push	r22
    17e8:	6e 7f       	andi	r22, 0xFE	; 254
    17ea:	6e 5f       	subi	r22, 0xFE	; 254
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	af 4f       	sbci	r26, 0xFF	; 255
    17f4:	b1 e0       	ldi	r27, 0x01	; 1
    17f6:	3e d0       	rcall	.+124    	; 0x1874 <__ultoa_invert+0x9c>
    17f8:	b4 e0       	ldi	r27, 0x04	; 4
    17fa:	3c d0       	rcall	.+120    	; 0x1874 <__ultoa_invert+0x9c>
    17fc:	67 0f       	add	r22, r23
    17fe:	78 1f       	adc	r23, r24
    1800:	89 1f       	adc	r24, r25
    1802:	9a 1f       	adc	r25, r26
    1804:	a1 1d       	adc	r26, r1
    1806:	68 0f       	add	r22, r24
    1808:	79 1f       	adc	r23, r25
    180a:	8a 1f       	adc	r24, r26
    180c:	91 1d       	adc	r25, r1
    180e:	a1 1d       	adc	r26, r1
    1810:	6a 0f       	add	r22, r26
    1812:	71 1d       	adc	r23, r1
    1814:	81 1d       	adc	r24, r1
    1816:	91 1d       	adc	r25, r1
    1818:	a1 1d       	adc	r26, r1
    181a:	20 d0       	rcall	.+64     	; 0x185c <__ultoa_invert+0x84>
    181c:	09 f4       	brne	.+2      	; 0x1820 <__ultoa_invert+0x48>
    181e:	68 94       	set
    1820:	3f 91       	pop	r19
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	26 9f       	mul	r18, r22
    1826:	11 24       	eor	r1, r1
    1828:	30 19       	sub	r19, r0
    182a:	30 5d       	subi	r19, 0xD0	; 208
    182c:	31 93       	st	Z+, r19
    182e:	de f6       	brtc	.-74     	; 0x17e6 <__ultoa_invert+0xe>
    1830:	cf 01       	movw	r24, r30
    1832:	08 95       	ret
    1834:	46 2f       	mov	r20, r22
    1836:	47 70       	andi	r20, 0x07	; 7
    1838:	40 5d       	subi	r20, 0xD0	; 208
    183a:	41 93       	st	Z+, r20
    183c:	b3 e0       	ldi	r27, 0x03	; 3
    183e:	0f d0       	rcall	.+30     	; 0x185e <__ultoa_invert+0x86>
    1840:	c9 f7       	brne	.-14     	; 0x1834 <__ultoa_invert+0x5c>
    1842:	f6 cf       	rjmp	.-20     	; 0x1830 <__ultoa_invert+0x58>
    1844:	46 2f       	mov	r20, r22
    1846:	4f 70       	andi	r20, 0x0F	; 15
    1848:	40 5d       	subi	r20, 0xD0	; 208
    184a:	4a 33       	cpi	r20, 0x3A	; 58
    184c:	18 f0       	brcs	.+6      	; 0x1854 <__ultoa_invert+0x7c>
    184e:	49 5d       	subi	r20, 0xD9	; 217
    1850:	31 fd       	sbrc	r19, 1
    1852:	40 52       	subi	r20, 0x20	; 32
    1854:	41 93       	st	Z+, r20
    1856:	02 d0       	rcall	.+4      	; 0x185c <__ultoa_invert+0x84>
    1858:	a9 f7       	brne	.-22     	; 0x1844 <__ultoa_invert+0x6c>
    185a:	ea cf       	rjmp	.-44     	; 0x1830 <__ultoa_invert+0x58>
    185c:	b4 e0       	ldi	r27, 0x04	; 4
    185e:	a6 95       	lsr	r26
    1860:	97 95       	ror	r25
    1862:	87 95       	ror	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	ba 95       	dec	r27
    186a:	c9 f7       	brne	.-14     	; 0x185e <__ultoa_invert+0x86>
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	61 05       	cpc	r22, r1
    1870:	71 05       	cpc	r23, r1
    1872:	08 95       	ret
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	0a 2e       	mov	r0, r26
    187a:	06 94       	lsr	r0
    187c:	57 95       	ror	r21
    187e:	47 95       	ror	r20
    1880:	37 95       	ror	r19
    1882:	27 95       	ror	r18
    1884:	ba 95       	dec	r27
    1886:	c9 f7       	brne	.-14     	; 0x187a <__ultoa_invert+0xa2>
    1888:	62 0f       	add	r22, r18
    188a:	73 1f       	adc	r23, r19
    188c:	84 1f       	adc	r24, r20
    188e:	95 1f       	adc	r25, r21
    1890:	a0 1d       	adc	r26, r0
    1892:	08 95       	ret

00001894 <_exit>:
    1894:	f8 94       	cli

00001896 <__stop_program>:
    1896:	ff cf       	rjmp	.-2      	; 0x1896 <__stop_program>
